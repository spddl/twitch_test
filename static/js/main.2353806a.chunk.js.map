{"version":3,"sources":["TwitchGlitchWhite.svg","../node_modules/better-queue/lib sync /^better/-queue/-.*$","components/cache.js","helper/FormatDate.js","redux/filter.js","helper/getRandomColor.js","redux/index.js","components/Log.js","components/Settings.js","components/TopBar.js","serviceWorker.js","data/twitch.js","data/bages.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","cache","CellMeasurerCache","minHeight","defaultHeight","fixedWidth","keyMapper","rowIndex","refreshCache","rowHeight","_minHeight","_defaultHeight","clearAll","zeroPad2","num","zeroPad3","_FormatDate","Datenow","mobile","date","Date","HH","getHours","mm","getMinutes","ss","getSeconds","SSS","getMilliseconds","DD","getDate","MM","getMonth","YYYY","getFullYear","FormatDate","cacheInput","cacheOutput","result","_memoizedFormatDate","debug","timer","Filter","allLogs","filter","console","log","get","undefined","find","value","logs","length","size","scrollBottom","time","CHANNEL","NAME","MSG","toLowerCase","item","chan","name","msg","indexOf","timeEnd","randomcolor","index","Math","floor","random","color","splice","update","type","initialState","List","Map","level","hostname","settings","JSON","parse","localStorage","getItem","modalShow","detectLinks","fontClass","fontSize","maxLines","channelColor","channels","badges","global","store","createStore","state","action","ChannelColorList","i","len","getRandomColor","push","found","findIndex","ele","set","setItem","stringify","toArray","roomId","key","FILTER","Number","_10percent","_maxLines","takeLast","newColor","isNaN","toObject","window","__REDUX_DEVTOOLS_EXTENSION__","getBrowserHiddenProps","hidden","visibilityChange","document","msHidden","webkitHidden","LogContainer","props","handleResize","innerWidth","setState","bindListRef","current","forceUpdateGrid","listenScrollEvent","scrollHeight","scrollTop","clientHeight","UserNameRenderer","row","className","onClick","updateFilter","style","tags","msgAttention","anchorme","truncate","attributes","attention","dangerouslySetInnerHTML","__html","decamelize","text","replace","createBadge","badge","versions","subscriber","Object","bits","title","alt","aria-label","src","image_url_1x","srcSet","image_url_2x","image_url_3x","error","warn","React","createRef","bind","addEventListener","this","_debounce","removeResizeListener","prevProps","_prevState","_snapshot","scrollToRow","_scrollingToRow","userInput","scrollButton","Button","variant","height","fontFamily","width","overscanColumnCount","overscanRowCount","scrollingResetTimeInterval","ref","rowCount","deferredMeasurementCache","onScroll","noRowsRenderer","rowRenderer","_key","parent","source","channelStyle","backgroundColor","channel","hasOwnProperty","element","has","columnIndex","padding","wordWrap","lineHeight","timestamp","PureComponent","connect","SettingsModal","context","handleShow","handleClose","handleChange","restart","temp","addChannel","target","forEach","InputGroup","Prepend","Text","FormControl","defaultValue","onChange","Append","role","Modal","show","onHide","scrollable","Header","closeButton","Title","Body","Collapse","in","location","reload","Alert","Form","Group","as","Row","Label","column","sm","Col","Control","placeholder","min","max","Check","custom","label","defaultChecked","checked","aria-describedby","Footer","history","createBrowserHistory","configureUrlQuery","addChangeHandlers","urlPropsQueryConfig","QueryChannel","UrlQueryParamTypes","string","queryParam","QueryName","QueryMsg","TopBar","updateDebounceFilter","fn","delay","args","arguments","clearTimeout","setTimeout","apply","debounce","onWheelHandler","onTouchMoveHandler","onTouchStartHandler","QueryHostname","QueryApp","onChangeQueryChannel","onChangeQueryName","onChangeQueryMsg","up","ChannelArray","nextIndex","AppArray","deltaY","updateFilterNext","touches","touchReset","pageY","touchY","t","appStyle","Badge","margin","touchAction","onWheel","onTouchMove","onTouchStart","Navbar","bg","collapseOnSelect","Brand","require","marginRight","ButtonToolbar","inline","onSubmit","preventDefault","refs","search","Settings","enhance","compose","addUrlProps","Boolean","match","chat","TwitchJs","token","username","joinTimeout","_log","_level","tempChannels","ACTION","_readyState","StoreChannel","map","ChannelState","_channelState","substr","_join","difference","join","then","data","roomState","_part","part","a","_","catch","err","on","command","message","emotes","split","start","end","formatEmotes","exec","systemMsg","targetMsgId","banDuration","banReason","fetch","res","json","badge_sets","ReactDOM","render","Log","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2353806a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/TwitchGlitchWhite.5f80eca1.svg\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 441;","import { CellMeasurerCache } from 'react-virtualized'\r\n\r\nexport const cache = new CellMeasurerCache({ // https://github.com/bvaughn/react-virtualized/blob/master/docs/CellMeasurer.md#cellmeasurercache\r\n  minHeight: 19,\r\n  defaultHeight: 19,\r\n  fixedWidth: true,\r\n  keyMapper: rowIndex => rowIndex\r\n})\r\n\r\nexport const refreshCache = function (rowHeight = 19) {\r\n  // console.log('refreshCache()')\r\n  // console.trace()\r\n\r\n  cache._minHeight = rowHeight\r\n  cache._defaultHeight = rowHeight\r\n  cache.clearAll()\r\n}\r\n","const zeroPad2 = (num) => num < 10 ? '0' + num : num\r\nconst zeroPad3 = (num) => {\r\n  if (num < 10) return '00' + num\r\n  else if (num < 100) return '0' + num\r\n  else return num\r\n}\r\nconst _FormatDate = (Datenow = 0, mobile = false) => {\r\n  const date = new Date(Datenow)\r\n\r\n  // 'HH:mm:ss.SSS'\r\n  const HH = zeroPad2(date.getHours())\r\n  const mm = zeroPad2(date.getMinutes())\r\n  const ss = zeroPad2(date.getSeconds())\r\n  const SSS = zeroPad3(date.getMilliseconds())\r\n\r\n  if (!mobile) {\r\n    // 'YYYY-MM-DD HH:mm:ss.SSS'\r\n    const DD = zeroPad2(date.getDate())\r\n    const MM = zeroPad2(date.getMonth())\r\n    const YYYY = date.getFullYear()\r\n    return `${YYYY}-${MM}-${DD} ${HH}:${mm}:${ss}.${SSS}`\r\n  }\r\n\r\n  return `${HH}:${mm}:${ss}.${SSS}`\r\n}\r\n\r\nconst _memoizedFormatDate = (Datenow = 0, mobile) => {\r\n  let cacheInput = 0\r\n  let cacheOutput = ''\r\n  return (Datenow, mobile) => {\r\n    if (cacheInput === Datenow) {\r\n      return cacheOutput\r\n    } else {\r\n      const result = _FormatDate(Datenow, mobile)\r\n      cacheInput = Datenow\r\n      cacheOutput = result\r\n      return result\r\n    }\r\n  }\r\n}\r\n\r\nconst FormatDate = _memoizedFormatDate()\r\nexport default FormatDate\r\n","const debug = false\r\nconst timer = false\r\n\r\nexport default function Filter (allLogs, filter) {\r\n  if (debug) console.log('>>>> Filter', allLogs, filter)\r\n  // if (debug) console.log(`::: Filter name '${filter.get('name')}', level '${filter.get('level')}', hostname '${filter.get('hostname')}', msg '${filter.get('msg')}'`)\r\n  if (debug) console.log(`::: Filter channel '${filter.get('channel')}', name '${filter.get('name')}', msg '${filter.get('msg')}'`)\r\n\r\n  if (filter.find(value => value !== '') === undefined) { // if (filter.get('name') === '' && filter.get('level') === '' && filter.get('hostname') === '' && filter.get('msg') === '') {\r\n    if (debug) console.log('Filter return { logs: allLogs, length: allLogs.size }')\r\n    return { logs: allLogs, length: allLogs.size, scrollBottom: true }\r\n  }\r\n  if (timer) console.time('Filter')\r\n  // let LEVEL\r\n  // if (filter.get('level') !== '') {\r\n  //   LEVEL = filter.get('level') + 1\r\n  // }\r\n\r\n  const CHANNEL = filter.get('channel')\r\n\r\n  // filter = filter.set('msg', filter.get('msg').toLowerCase())\r\n  const NAME = filter.get('name')\r\n  // const HOSTNAME = filter.get('hostname')\r\n  const MSG = filter.get('msg').toLowerCase()\r\n\r\n  // if (debug) console.log(`::: Filter name '${NAME}', level '${LEVEL}', hostname '${HOSTNAME}', msg '${MSG}'`)\r\n  if (debug) console.log(`::: Filter channel '${CHANNEL}', name '${NAME}', msg '${MSG}'`)\r\n\r\n  const logs = allLogs.filter(item => {\r\n    // if (LEVEL && item.level !== LEVEL) { // genaue übereinstimmung\r\n    //   return false\r\n    // }\r\n\r\n    // if (LEVEL && item.level >= LEVEL) { // ab diesem Level\r\n    //   return false\r\n    // }\r\n\r\n    if (CHANNEL && item.chan !== CHANNEL) {\r\n      return false\r\n    }\r\n\r\n    if (NAME && item.name !== NAME) {\r\n      return false\r\n    }\r\n\r\n    // if (HOSTNAME && item.hostname !== HOSTNAME) {\r\n    //   return false\r\n    // }\r\n\r\n    if (MSG && item.msg.toLowerCase().indexOf(MSG) === -1) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  })\r\n  if (timer) console.timeEnd('Filter')\r\n  return { logs: logs, length: logs.size }\r\n}\r\n\r\n// export default function Filter (allLogs, filter) {\r\n//   if (debug) console.log('>>>> Filter', allLogs, filter)\r\n//   if (debug) console.log(`::: Filter name '${filter.get('name')}', level '${filter.get('level')}', hostname '${filter.get('hostname')}', msg '${filter.get('msg')}'`)\r\n\r\n//   if (filter.has('name') && filter.has('level') && filter.has('hostname') && filter.has('msg')) {\r\n//     if (debug) console.log('Filter return { logs: allLogs, length: allLogs.size }')\r\n//     return { logs: allLogs, length: allLogs.size, scrollBottom: true }\r\n//   }\r\n\r\n//   if (debug) console.time('Filter')\r\n//   let LEVEL\r\n//   if (filter.has('level')) {\r\n//     LEVEL = filter.get('level') + 1\r\n//   }\r\n\r\n//   const NAME = filter.get('name')\r\n//   const HOSTNAME = filter.get('hostname')\r\n//   const MSG = filter.get('msg').toLowerCase()\r\n\r\n//   if (debug) console.log(`::: Filter name '${NAME}', level '${LEVEL}', hostname '${HOSTNAME}', msg '${MSG}'`)\r\n//   const logs = allLogs.filter(item => {\r\n//     // if (filter.level && item.level !== filter.level) return false // genaue übereinstimmung\r\n\r\n//     if (LEVEL && item.level >= LEVEL) return false // ab diesem Level\r\n\r\n//     if (NAME && item.name !== NAME) return false\r\n\r\n//     if (HOSTNAME && item.hostname !== HOSTNAME) return false\r\n\r\n//     if (MSG && item.msg.toLowerCase().indexOf(MSG) === -1) return false\r\n\r\n//     return true\r\n//   })\r\n//   if (debug) console.timeEnd('Filter')\r\n//   return { logs: logs, length: logs.size }\r\n// }\r\n","let randomcolor = ['#fc5c65', '#fd9644', '#fed330', '#26de81', '#2bcbba', '#eb3b5a', '#fa8231', '#f7b731', '#20bf6b', '#0fb9b1', '#45aaf2', '#4b7bec', '#a55eea', '#d1d8e0', '#778ca3', '#2d98da', '#3867d6', '#8854d0', '#a5b1c2', '#4b6584'] // https://flatuicolors.com/\r\n\r\nexport default () => {\r\n  const index = Math.floor(Math.random() * randomcolor.length)\r\n  const color = randomcolor[index]\r\n  randomcolor.splice(index, 1)\r\n  if (!randomcolor.length) {\r\n    randomcolor = ['#fc5c65', '#fd9644', '#fed330', '#26de81', '#2bcbba', '#eb3b5a', '#fa8231', '#f7b731', '#20bf6b', '#0fb9b1', '#45aaf2', '#4b7bec', '#a55eea', '#d1d8e0', '#778ca3', '#2d98da', '#3867d6', '#8854d0', '#a5b1c2', '#4b6584']\r\n  }\r\n  return color\r\n}\r\n","/* globals localStorage:true */\n\nimport { createStore } from 'redux'\nimport { List, Map } from 'immutable' // https://immutable-js.github.io/immutable-js/\nimport Filter from './filter'\nimport { refreshCache } from '../components/cache'\n\nimport getRandomColor from '../helper/getRandomColor'\n\nconst debug = false\nconst timer = false\n\nexport const update = function (value, type) {\n  if (debug) console.log('update()', { type, value })\n  return ({ type, value })\n}\n\n// let randomcolor = ['#fc5c65', '#fd9644', '#fed330', '#26de81', '#2bcbba', '#eb3b5a', '#fa8231', '#f7b731', '#20bf6b', '#0fb9b1', '#45aaf2', '#4b7bec', '#a55eea', '#d1d8e0', '#778ca3', '#2d98da', '#3867d6', '#8854d0', '#a5b1c2', '#4b6584'] // https://flatuicolors.com/\n// const getRandomColor = () => {\n//   const index = Math.floor(Math.random() * randomcolor.length)\n//   const color = randomcolor[index]\n//   randomcolor.splice(index, 1)\n//   if (!randomcolor.length) {\n//     randomcolor = ['#fc5c65', '#fd9644', '#fed330', '#26de81', '#2bcbba', '#eb3b5a', '#fa8231', '#f7b731', '#20bf6b', '#0fb9b1', '#45aaf2', '#4b7bec', '#a55eea', '#d1d8e0', '#778ca3', '#2d98da', '#3867d6', '#8854d0', '#a5b1c2', '#4b6584']\n//   }\n//   return color\n// }\n\n// https://github.com/koba04/redux-store-structure-patterns/blob/master/patterns/separated-list-store.ts?source=post_page---------------------------#L44\nconst LogReducer = (state = {}, action) => {\n  // console.log(action)\n\n  if (debug) console.log('Reducer action', action)\n  if (debug) console.log('Reducer OLDStore', state)\n\n  if (timer) console.time(action.type)\n  switch (action.type) { // Logs\n    case 'scrollBottom':\n      if (timer) console.timeEnd(action.type)\n      state = {\n        ...state,\n        scrollBottom: action.value\n      }\n      break\n    case 'ADD_DATA':\n      let ChannelColorList = state.settings.get('channelColor') || {}\n\n      for (let i = 0, len = action.value.length; i < len; i++) {\n        if (!ChannelColorList[action.value[i].chan]) ChannelColorList[action.value[i].chan] = getRandomColor()\n        // if (!ChannelColorList[action.value[i].chan]) {\n        //   ChannelColorList[action.value[i].chan] = getRandomColor()\n        //   state.settings.set('channelColor', ChannelColorList)\n        // }\n      }\n\n      // List\n      // const allLogs = state.allLogs.concat(action.value) // 2.008056640625ms\n      const allLogs = state.allLogs.push(...action.value) // 1.783935546875ms\n\n      // Seq\n      // const allLogs = state.allLogs.concat(action.value)\n\n      state.allLogs = allLogs\n      break\n\n    case 'ADD_ROOMID':\n    // case 'ADD_CHANNEL': // TODO: Add roomId\n      // console.log('typeof action.value', typeof action.value, action.value)\n      // console.log('typeof state.channels', typeof state.channels, state.channels)\n\n      const found = state.channels.findIndex(ele => ele.name === action.value.name)\n      if (found !== -1) {\n        state.channels = state.channels.set(found, action.value)\n        action.value = state.channels\n      }\n      localStorage.setItem('channels', JSON.stringify(action.value.toArray()))\n      return {\n        ...state,\n        channels: action.value\n      }\n\n      // break\n    case 'ADD_CHANNEL': // eslint-disable-line\n      ChannelColorList = state.settings.get('channelColor') || {}\n      if (!(ChannelColorList && ChannelColorList[action.value.name])) ChannelColorList[action.value.name] = getRandomColor()\n      const channels = state.channels.push({ name: action.value.name, roomId: action.value.roomId }) /* roomId is undefined */\n\n      // localStorage.setItem('channels', JSON.stringify(action.value.toArray()))\n      return {\n        ...state,\n        channels: channels\n      }\n      // break\n    case 'CHANNELS': // eslint-disable-line\n      // console.log('CHANNELS', action.value)\n\n      localStorage.setItem('channels', JSON.stringify(action.value.toArray()))\n      return {\n        ...state,\n        channels: action.value\n      }\n\n      // localStorage.setItem('channels', JSON.stringify(action.value.toArray()))\n\n      // // state.channels = action.value\n      // return {\n      //   ...state,\n      //   channels: action.value\n      // }\n      // break\n\n    case 'UPDATE_BADGES':\n      // console.log('UPDATE_BADGES', action, state.badges)\n      state.badges[action.value.key] = Map(action.value.value)\n      return {\n        ...state,\n        badges: state.badges\n      }\n    default:\n  }\n\n  // Filter\n  switch (action.type) { // TODO scrollbottom\n    case 'ADD_FILTER_channel':\n      state.filter = state.filter.set('channel', action.value)\n      break\n    case 'ADD_FILTER_name':\n      state.filter = state.filter.set('name', action.value)\n      break\n    case 'ADD_FILTER_msg':\n      state.filter = state.filter.set('msg', action.value)\n      break\n\n    default:\n  }\n\n  switch (action.type) { // Filter übernehmen\n    case 'ADD_FILTER_name':\n    case 'ADD_FILTER_channel':\n    case 'ADD_FILTER_msg':\n    case 'scrollBottom':\n    case 'ADD_DATA':\n      // TODO: wenn 'state.scrollBottom' === false ist sollte er auch keine Zeilen löschen wenn das 'maxLines' erreicht ist\n      // wenn alle Filter === '' sind sollte er wieder nach unten scrollen\n      // man sollte die Filter benutzen können auch wenn nicht 'state.scrollBottom' === true ist\n      const FILTER = (action.type === 'ADD_FILTER_name' || action.type === 'ADD_FILTER_channel' || action.type === 'ADD_FILTER_msg')\n      if (state.scrollBottom || FILTER) {\n        let { logs, length, scrollBottom } = Filter(state.allLogs, state.filter)\n        const maxLines = Number(state.settings.get('maxLines'))\n\n        if (length > maxLines) { // https://github.com/spddl/react_logein/blob/master/src/store/index.js#L91\n          const _10percent = 10 * maxLines / 100\n          const _maxLines = maxLines - _10percent\n\n          state.allLogs = state.allLogs.takeLast(_maxLines)\n          logs = logs.takeLast(_maxLines)\n          length = _maxLines\n          refreshCache() // Damit der Index der Zeilen als Key für den Cache verwendet werden kann\n        }\n\n        if (timer) console.timeEnd(action.type)\n        return {\n          ...state,\n          scrollBottom: scrollBottom || state.scrollBottom,\n          logs,\n          length\n        }\n      } else {\n        if (state.filter.find(value => value !== '') === undefined) { // Wenn kein Filter gesetzt ist\n          if (timer) console.timeEnd(action.type)\n          return { // nach unten scrollen\n            ...state,\n            // scrollBottom: true,\n            logs: state.allLogs,\n            length: state.allLogs.size\n          }\n        } else {\n          if (timer) console.timeEnd(action.type)\n          return { ...state } // 'FREEZE' Die Daten werden nicht geändert\n        }\n      }\n    default:\n  }\n\n  // Settings\n  switch (action.type) {\n    case 'channelColor':\n      const newColor = action.value\n      action.value = {\n        ...state.settings.get(action.type),\n        ...newColor\n      }\n    case 'modalShow': // eslint-disable-line\n    case 'detectLinks':\n    case 'fontClass':\n    case 'fontSize':\n    case 'rowHeight':\n    case 'appShow':\n    case 'hostnameShow':\n    case 'maxLines':\n      if (isNaN(!action.value)) action.value = Number(action.value)\n      const settings = state.settings.set(action.type, action.value)\n      state = {\n        ...state,\n        settings\n      }\n      localStorage.setItem('settings', JSON.stringify(settings.toObject()))\n      break\n    default:\n  }\n\n  if (timer) console.timeEnd(action.type)\n  if (debug) console.log('Reducer NEWStore', state)\n  return state\n}\n\nconst initialState = {\n  allLogs: List(), // https://immutable-js.github.io/immutable-js/docs/#/List\n  logs: List(),\n  length: 0,\n  scrollBottom: true,\n  filter: Map({\n    name: '',\n    level: '',\n    hostname: '',\n    msg: ''\n  }),\n  // settings: Map({ // https://immutable-js.github.io/immutable-js/docs/#/Map\n  settings: Map(JSON.parse(localStorage.getItem('settings')) || {\n    modalShow: false, // true,\n    detectLinks: false,\n    fontClass: 'inconsolata-font',\n    fontSize: 13,\n    rowHeight: 19,\n    maxLines: 50000,\n    channelColor: {}\n  }),\n  channels: List(JSON.parse(localStorage.getItem('channels')) || []),\n  badges: {\n    global: Map()\n  }\n}\n\nexport const store = createStore(\n  LogReducer,\n  initialState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n// process.env.NODE_ENV !== 'production' && window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n","import React, { PureComponent } from 'react'\r\n\r\nimport AutoSizer from 'react-virtualized/dist/commonjs/AutoSizer'\r\nimport List from 'react-virtualized/dist/commonjs/List'\r\nimport CellMeasurer from 'react-virtualized/dist/commonjs/CellMeasurer'\r\n\r\nimport { cache, refreshCache } from './cache'\r\n\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport '../TableStyles.css'\r\nimport _debounce from 'lodash.debounce'\r\n\r\nimport anchorme from 'anchorme'\r\n\r\nimport FormatDate from '../helper/FormatDate'\r\n// import classifierNumber from '../helper/classifierNumber'\r\n// import LevelColor from '../helper/colors'\r\n\r\nimport { connect } from 'react-redux'\r\nimport { update } from '../redux'\r\n\r\nconst debug = false\r\n\r\n// Limitations and Performance Considerations // https://github.com/bvaughn/react-virtualized/blob/a41ff4857ea08c604db3a64f556ff08135cfbfcc/docs/CellMeasurer.md\r\n// Performance\r\n// Measuring a column's width requires measuring all rows in order to determine the widest occurrence of that column. The same is true in reverse for measuring \r\n// a row's height.For this reason it may not be a good idea to use this HOC for Grids containing a large number of both columns and cells.\r\n\r\n// Since this component measures one cell at a time to determine it's width/height, it will likely be slow if a user skips many rows (or columns) at once \r\n// by scrolling with a scrollbar or via a scroll-to-cell prop. There is (unfortunately) no workaround for this performance limitation at the moment.\r\n\r\nconst getBrowserHiddenProps = () => {\r\n  let hidden, visibilityChange\r\n  if (typeof document.hidden !== 'undefined') {\r\n    hidden = 'hidden'\r\n    visibilityChange = 'visibilitychange'\r\n  } else if (typeof document.msHidden !== 'undefined') {\r\n    hidden = 'msHidden'\r\n    visibilityChange = 'msvisibilitychange'\r\n  } else if (typeof document.webkitHidden !== 'undefined') {\r\n    hidden = 'webkitHidden'\r\n    visibilityChange = 'webkitvisibilitychange'\r\n  }\r\n\r\n  return {\r\n    hidden,\r\n    visibilityChange\r\n  }\r\n}\r\n\r\nclass LogContainer extends PureComponent {\r\n  constructor(props) {\r\n    super(props)\r\n    if (debug) console.log('LogContainer constructor', props)\r\n\r\n    this.bindListRef = React.createRef()\r\n\r\n    this.state = {\r\n      mobile: window.innerWidth < 640,\r\n      scrollBottom: true\r\n    }\r\n\r\n    this.updateFilter = this.updateFilter.bind(this)\r\n\r\n    const { hidden, visibilityChange } = getBrowserHiddenProps() // https://dev.to/hurricaneinteractive/guilt-users-into-coming-back-with-your-document-title-55kn\r\n\r\n    if (typeof document.addEventListener !== 'undefined' && typeof hidden !== 'undefined') {\r\n      document.addEventListener(visibilityChange, () => {\r\n        if (!document[hidden]) {\r\n          refreshCache()\r\n          // if (this.bindListRef.current) {\r\n          //   this.bindListRef.current.forceUpdateGrid()\r\n          // }\r\n        }\r\n      }, false)\r\n    }\r\n  }\r\n\r\n  // bindListRef = ref => { this.list = ref } // eslint-disable-line\r\n\r\n  componentDidMount () {\r\n    if (debug) console.log('componentDidMount()')\r\n    if (this.bindListRef.current) {\r\n      this.bindListRef.current.forceUpdateGrid()\r\n    }\r\n    window.addEventListener('resize', _debounce(() => this.handleResize(window.innerWidth), 100))\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    try {\r\n      window.removeResizeListener('resize', _debounce(() => this.handleResize(window.innerWidth), 100))\r\n    } catch (error) {  }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, _prevState, _snapshot) { // https://stackoverflow.com/a/51770376\r\n    if (debug) console.log('componentDidUpdate()')\r\n    // if (debug) console.log(`${this.state.scrollBottom} && ${this.props.length} !== ${prevProps.length}`)\r\n\r\n    if (this.props.length !== prevProps.length) {\r\n      if (this.props.scrollBottom) { // if (this.state.scrollBottom) {\r\n        const length = this.props.length\r\n        this.bindListRef.current.scrollToRow(length)\r\n        // if (debug) console.log(`1-this.bindListRef.current.scrollToRow(${length})`)\r\n        this.setState({ _scrollingToRow: length }, () => {\r\n          this.bindListRef.current.scrollToRow(length)\r\n          // if (debug) console.log(`2-this.bindListRef.current.scrollToRow(${length})`)\r\n        })\r\n      }\r\n\r\n      if (this.props.filter !== prevProps.filter) {\r\n        refreshCache() // jedes mal wenn ein Filter geändert wird\r\n        // für mehr performance bräuchte man eine UUID\r\n      }\r\n    }\r\n  }\r\n\r\n  handleResize = innerWidth => {\r\n    if (debug) console.log('handleResize()')\r\n    if (innerWidth < 640) this.setState({ mobile: true })\r\n    else this.setState({ mobile: false })\r\n\r\n    refreshCache()\r\n    if (this.bindListRef.current) {\r\n      this.bindListRef.current.forceUpdateGrid()\r\n    }\r\n  }\r\n\r\n  listenScrollEvent = ({ scrollHeight, scrollTop, clientHeight }) => {\r\n    if (debug) console.log(`listenScrollEvent() if ((${scrollHeight} - ${scrollTop}) === ${clientHeight})`)\r\n    if (scrollHeight === 0 && scrollTop === 0) return\r\n\r\n    if ((scrollHeight - scrollTop) === clientHeight) {\r\n      if (!this.props.scrollBottom) this.props.update(true, 'scrollBottom')\r\n    } else {\r\n      if (this.props.scrollBottom) this.props.update(false, 'scrollBottom')\r\n    }\r\n  }\r\n\r\n  updateFilter (userInput, type) {\r\n    if (debug) console.log('updateFilter()', userInput, type)\r\n    if (this.props.filter[type] === userInput) userInput = ''\r\n    this.props.update(userInput, 'ADD_FILTER_' + type)\r\n  }\r\n\r\n  classifierLevel(row) {\r\n    // const { result, classcolor } = helper.classifierLevel(cellData)\r\n    return <span onClick={() => this.updateFilter(row.chan, 'channel')}>{row.chan}</span>\r\n  }\r\n\r\n  UserNameRenderer = (row) => {\r\n    return <span className='username' onClick={() => this.updateFilter(row.name, 'name')} style={{ color: (row && row.tags && row.tags.color ? row.tags.color : '#EEE') }}>{row.name}</span>\r\n  }\r\n\r\n  msgAttention = (row) => {\r\n    row.msg = this.props.settings.get('detectLinks')\r\n      ? anchorme(row.msg, {\r\n      truncate: [30, 15],\r\n      attributes: [{ name: 'target', value: '_blank' }]\r\n    }) : row.msg\r\n\r\n    if (row && row.tags && row.tags.attention) {\r\n      return <span dangerouslySetInnerHTML={{ __html: row.msg }} style={{ color: 'red' }} />\r\n      } else if (row && row.tags && row.tags.action) {\r\n      return <span dangerouslySetInnerHTML={{ __html: row.msg }} style={{ color: row.tags.color }} />\r\n      } else {\r\n      return <span dangerouslySetInnerHTML={{ __html: row.msg }} />\r\n    }\r\n  }\r\n\r\n  decamelize = (text) => {\r\n    return text\r\n      .replace(/([a-z\\d])([A-Z])/g, '$1-$2')\r\n      .replace(/([A-Z]+)([A-Z][a-z\\d]+)/g, '$1-$2')\r\n      .toLowerCase()\r\n  }\r\n\r\n  createBadge = ({ name, badge, tags }) => {\r\n    // console.log('1createBadge', name, badge, tags)\r\n    switch (name) {\r\n      case 'subscriber':\r\n        if (badge.versions[tags.badges.subscriber]) {\r\n          badge = badge.versions[tags.badges.subscriber]\r\n        } else {\r\n          badge = Object.keys(badge.versions)[0]\r\n        }\r\n        break\r\n\r\n      case 'bits':\r\n        if (badge.versions[tags.badges.bits]) {\r\n          badge = badge.versions[tags.badges.bits]\r\n        } else {\r\n          badge = Object.keys(badge.versions)[0]\r\n        }\r\n        break\r\n\r\n      default:\r\n        if (badge.versions['0']) {\r\n          badge = badge.versions['0']\r\n        } else if (badge.versions['1']) {\r\n          badge = badge.versions['1']\r\n        } else {\r\n          badge = Object.keys(badge.versions)[0]\r\n        }\r\n    }\r\n\r\n    // if (!badge) badge = Object.keys(badge.versions)[0]\r\n    // console.log('2createBadge', name, badge, tags)\r\n\r\n    try {\r\n      return <img\r\n        key={name || ''}\r\n        title={badge.title || ''}\r\n        alt={badge.title || ''}\r\n        aria-label={badge.title || ''}\r\n        className='line'\r\n        src={badge.image_url_1x}\r\n        srcSet={`${badge.image_url_1x} 1x, ${badge.image_url_2x} 2x, ${badge.image_url_3x} 4x`}\r\n      ></img>\r\n    } catch (error) {\r\n      console.warn(error)\r\n      return <img\r\n        key={name}\r\n        alt={name}\r\n        className='line'\r\n      ></img>\r\n    }\r\n    \r\n  }\r\n\r\n  render () {\r\n    if (debug) console.log('LogContainer RENDER', this.props, '############################################')\r\n\r\n    let scrollButton = ''\r\n    if (!this.props.scrollBottom) { // TODO: nur wenn man auch scrollen kann\r\n      scrollButton = <Button variant='secondary' id='scrollDown' onClick={() => {\r\n        this.bindListRef.current.scrollToRow(this.props.length)\r\n        this.props.update(true, 'scrollBottom')\r\n        refreshCache()\r\n      }}>scroll down</Button>\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div style={{\r\n          height: 'calc(100vh - 60px)',\r\n          fontSize: Number(this.props.settings.get('fontSize')),\r\n          fontFamily: `'${this.props.settings.get('fontClass')}', monospace`\r\n        }} className={ 'bg-dark text-list' }>\r\n\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n\r\n              <List\r\n                id='list'\r\n                // height={window.innerHeight - 60}\r\n                // width={window.innerWidth - 3}\r\n                height={height}\r\n                width={width - 3}\r\n                overscanColumnCount={0}\r\n                overscanRowCount={10}\r\n                scrollingResetTimeInterval={0}\r\n                ref={this.bindListRef}\r\n                rowCount={this.props.length}\r\n                deferredMeasurementCache={cache}\r\n                onScroll={this.listenScrollEvent}\r\n                rowHeight={cache.rowHeight}\r\n                noRowsRenderer={() => <div><center><i>Nichts gefunden</i></center></div>}\r\n                rowRenderer={({ // https://github.com/bvaughn/react-virtualized/blob/8738097a6ead422f74590d6a631bd5fd83ebc831/docs/List.md#rowrenderer\r\n                  index,       // Index of row\r\n                  // isScrolling, // The List is currently being scrolled\r\n                  // isVisible,   // This row is visible within the List (eg it is not an overscanned row)\r\n                  _key,         // Unique key within array of rendered rows\r\n                  parent,      // Reference to the parent List (instance)\r\n                  style        // Style object to be applied to row (to position it);\r\n                              // This must be passed through to the rendered row element.\r\n                }) => {\r\n                  // console.log({index})\r\n                  // console.log(this.props)\r\n                  let key\r\n                  const source = this.props.logs.get(index) // This comes from your list data\r\n                  if (source.tags && source.tags.id) {\r\n                    key = source.tags.id\r\n                  } else {\r\n                    key = _key || index\r\n                  }\r\n\r\n                  const channelStyle = this.props.settings.get('channelColor') && this.props.settings.get('channelColor')[source.chan] ? { backgroundColor: this.props.settings.get('channelColor')[source.chan] } : {}\r\n                  const channel = <><span className='line badge badge-primary' style={channelStyle} onClick={() => this.updateFilter(source.chan, 'channel')}>{source.chan}</span></>\r\n\r\n                  // let sub\r\n                  // let mod\r\n                  let badges = []\r\n                  if (source && source.tags && source.tags.badges) {\r\n                    // if ('subscriber' in source.tags.badges || 'founder' in source.tags.badges) {\r\n                    //   console.log(source.tags)\r\n                    //   sub = <span className='line badge badge-primary'>SUB</span>\r\n                    // }\r\n                    // if ('moderator' in source.tags.badges ) {\r\n                    //   mod = <span className='line badge badge-primary'>MOD</span>\r\n                    // }\r\n                    // source.tags.badges.forEach((x) => {\r\n                    //   badges.push(\r\n                    //     <span className='line badge badge-primary'>{x}</span>\r\n                    //   )\r\n                    // })\r\n                    for (let name in source.tags.badges) {\r\n                      if (source.tags.badges.hasOwnProperty(name)) {\r\n                        let element\r\n                        name = this.decamelize(name)\r\n                        // console.log(name)\r\n                        \r\n                        // https://discuss.dev.twitch.tv/t/how-to-get-emotes-badges-object/18916/2\r\n                        if (this.props.badges[source.chan] && this.props.badges[source.chan].has(name)) {\r\n                          const badge = this.props.badges[source.chan].get(name) // .versions['0']\r\n                          element = this.createBadge({ name, badge, tags: source.tags })\r\n                        } else if (this.props.badges.global.has(name)) {\r\n                          const badge = this.props.badges.global.get(name) // .versions['1']\r\n                          element = this.createBadge({ name, badge, tags: source.tags })\r\n                        } else {\r\n                          // console.log(this.props.badges.global, name)\r\n                          // twitchcon-na2019 => twitchconNA2019\r\n                          element = <span className='line badge badge-primary' key={name} title={name}>{name}</span>\r\n                        }\r\n                        // <img \r\n                        // key={name} \r\n                        // alt=\"TwitchCon NA 2019\" \r\n                        // aria-label=\"TwitchCon NA 2019-Abzeichen\" \r\n                        // className=\"chat-badge\" \r\n                        // src=\"https://static-cdn.jtvnw.net/badges/v1/569c829d-c216-4f56-a191-3db257ed657c/1\" \r\n                        // srcSet=\"https://static-cdn.jtvnw.net/badges/v1/569c829d-c216-4f56-a191-3db257ed657c/1 1x, https://static-cdn.jtvnw.net/badges/v1/569c829d-c216-4f56-a191-3db257ed657c/2 2x, https://static-cdn.jtvnw.net/badges/v1/569c829d-c216-4f56-a191-3db257ed657c/3 4x\"></img>\r\n\r\n                \r\n                        // click_action: \"none\"\r\n                        // click_url: \"\"\r\n                        // description: \"Moderator\"\r\n                        // image_url_1x: \"https://static-cdn.jtvnw.net/badges/v1/3267646d-33f0-4b17-b3df-f923a41db1d0/1\"\r\n                        // image_url_2x: \"https://static-cdn.jtvnw.net/badges/v1/3267646d-33f0-4b17-b3df-f923a41db1d0/2\"\r\n                        // image_url_4x: \"https://static-cdn.jtvnw.net/badges/v1/3267646d-33f0-4b17-b3df-f923a41db1d0/3\"\r\n                        // last_updated: null\r\n                        // title: \"Moderator\"\r\n                   \r\n\r\n                        // switch (name) {\r\n                        //   case 'turbo': element = <span className='line badge badge-primary' key={name} title={name}>{name} {source.tags.badges[name]}</span>; break\r\n                        //   case 'moderator': element = <span className='line badge badge-primary' key={name} title={name}>MOD</span>; break\r\n                        //   case 'subscriber': \r\n                        //     const count = source.tags.badgeInfo.replace('subscriber/', '')\r\n                        //     element = <span className='line badge badge-primary' key={name} title={name}>SUB {count || source.tags.badges[name]}</span>\r\n                        //     break;\r\n                        //   case 'partner': element = <span className='line badge badge-primary' key={name} title={name}>verifiziert</span>; break\r\n                        //   // case 'premium': element = <span className='line badge badge-primary' key={name} title={name}>Twitch Prime</span>; break\r\n                        //   case 'vip': element = <span className='line badge badge-primary' key={name} title={name}>VIP</span>; break\r\n\r\n                        //   case 'glhfPledge ': element = <span href=\"https://www.anykey.org/pledge\" key={name} ><img className=\"chat-image chat-line__message--emote tw-inline-block\" src=\"https://static-cdn.jtvnw.net/emoticons/v1/7/1.0\" srcSet=\"https://static-cdn.jtvnw.net/emoticons/v1/7/1.0 1x,https://static-cdn.jtvnw.net/emoticons/v1/7/2.0 2x,https://static-cdn.jtvnw.net/emoticons/v1/7/3.0 4x\" alt=\"B)\"></img></span>; break\r\n                      \r\n                        //   case 'premium': element = <img key={name} alt=\"Twitch Prime\" aria-label=\"Twitch Prime-Abzeichen\" className=\"chat-badge\" src=\"https://static-cdn.jtvnw.net/badges/v1/a1dd5073-19c3-4911-8cb4-c464a7bc1510/1\" srcSet=\"https://static-cdn.jtvnw.net/badges/v1/a1dd5073-19c3-4911-8cb4-c464a7bc1510/1 1x, https://static-cdn.jtvnw.net/badges/v1/a1dd5073-19c3-4911-8cb4-c464a7bc1510/2 2x, https://static-cdn.jtvnw.net/badges/v1/a1dd5073-19c3-4911-8cb4-c464a7bc1510/3 4x\"></img>; break\r\n                      \r\n                        //   case 'twitchconEu2019': element = <img key={name} alt=\"TwitchCon NA 2019\" aria-label=\"TwitchCon NA 2019-Abzeichen\" className=\"chat-badge\" src=\"https://static-cdn.jtvnw.net/badges/v1/569c829d-c216-4f56-a191-3db257ed657c/1\" srcSet=\"https://static-cdn.jtvnw.net/badges/v1/569c829d-c216-4f56-a191-3db257ed657c/1 1x, https://static-cdn.jtvnw.net/badges/v1/569c829d-c216-4f56-a191-3db257ed657c/2 2x, https://static-cdn.jtvnw.net/badges/v1/569c829d-c216-4f56-a191-3db257ed657c/3 4x\"></img>; break\r\n\r\n              \r\n                        //   default:\r\n                        //     // twitchconEu2019 \r\n                        //     element = <span className='line badge badge-primary' key={name} title={name}>{name} {source.tags.badges[name]}</span>\r\n                        // } \r\n                        badges.push(element)\r\n                      }\r\n                    }\r\n                  }\r\n\r\n\r\n                  return (\r\n                    <CellMeasurer // https://github.com/bvaughn/react-virtualized/blob/master/docs/CellMeasurer.md\r\n                      cache={cache}\r\n                      columnIndex={0}\r\n                      key={key}\r\n                      parent={parent}\r\n                      rowIndex={index}\r\n                    >\r\n                      {() => {\r\n                        return (\r\n                          <div\r\n                            key={key}\r\n                            style={{...style,\r\n                                padding: '.3rem', // '.5rem 2rem',\r\n                                wordWrap: 'break-word',\r\n                                lineHeight: '20px'\r\n                              }}\r\n                            >\r\n                            <span>{FormatDate(source.timestamp, this.state.mobile)}</span>:\r\n                            {channel}\r\n                            {/* isSub = 'subscriber' in tags.badges || 'founder' in tags.badges; */}\r\n                            {/* <span className='line badge badge-primary'>{this.classifierLevel(source)}</span> */}\r\n                            {/* {mod}\r\n                            {sub} */}\r\n                            {badges}\r\n                            <span className='line'>{this.UserNameRenderer(source)}</span>\r\n                            <span className='line'>{this.msgAttention(source)}</span>\r\n                            {/* <span\r\n                              className={'line'}\r\n                              style={ LevelColor[level] }\r\n                              onClick={() => this.updateFilter(source.level, 'level')}\r\n                            >{level}</span>\r\n                            {hostname}\r\n                            {app}\r\n                            <span className='line' dangerouslySetInnerHTML={{\r\n                              __html: this.props.settings.get('detectLinks')\r\n                              ? anchorme(source.msg, {\r\n                                truncate: [30, 15],\r\n                                attributes: [{ name: 'target', value: '_blank' }]\r\n                              }) : source.msg\r\n                            }}>\r\n                            </span> */}\r\n                          </div>\r\n                        )\r\n                      }}\r\n                    </CellMeasurer>\r\n                  )\r\n\r\n                }}\r\n              />\r\n\r\n        )}\r\n          </AutoSizer>\r\n\r\n        {scrollButton}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  state => ({\r\n    scrollBottom: state.scrollBottom,\r\n    logs: state.logs,\r\n    length: state.length,\r\n    filter: state.filter,\r\n    settings: state.settings,\r\n    badges: state.badges\r\n  }), // mapStateToProps\r\n  { update } // mapDispatchToProps\r\n)(LogContainer)\r\n","import React, { PureComponent } from 'react'\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\n\nimport Collapse from 'react-bootstrap/Collapse'\n\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport Alert from 'react-bootstrap/Alert'\n\nimport { connect } from 'react-redux'\nimport { update } from '../redux'\n\nconst debug = false\n\nclass SettingsModal extends PureComponent {\n  constructor (props, context) {\n    super(props, context)\n\n    this.handleShow = this.handleShow.bind(this)\n    this.handleClose = this.handleClose.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n\n    this.state = {\n      restart: false,\n      temp: '',\n      addChannel: ''\n    }\n  }\n\n  handleShow () {\n    this.props.update(true, 'modalShow')\n  }\n\n  handleClose () {\n    this.props.update(false, 'modalShow')\n  }\n\n  handleChange ({ target }) {\n    this.setState({ addChannel: target.value })\n  }\n\n  render () {\n    if (debug) console.log('SettingsContainer RENDER', this.props, '############################################')\n\n    const channelColor = []\n    this.props.channels.forEach((channel) => {\n      channelColor.push(\n        <InputGroup key={channel.name} className='mb-3'>\n          <InputGroup.Prepend>\n            <InputGroup.Text>{channel.name}</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl\n            key={channel.name}\n            type='color'\n            name={channel.name}\n            defaultValue={this.props.settings.get('channelColor')[channel.name]}\n            onChange={({ target }) => {\n              this.props.update({ [target.name]: target.value }, 'channelColor')\n            }}\n          />\n          <InputGroup.Append>\n            <Button\n              variant='outline-danger'\n              onClick={() => {\n                let channels = this.props.channels\n                const index = channels.indexOf(channel) // https://immutable-js.github.io/immutable-js/docs/#/List/indexOf\n                if (index > -1) {\n                  channels = channels.splice(index, 1) // https://immutable-js.github.io/immutable-js/docs/#/List/slice\n                }\n                this.props.update(channels, 'CHANNELS')\n              }}\n            >X</Button>\n          </InputGroup.Append>\n        </InputGroup>\n      )\n    })\n\n    return (\n      <>\n        <Button variant='outline-secondary' onClick={this.handleShow}>\n          <span role='img' aria-label='Gear'>⚙</span>\n        </Button>\n\n        <Modal\n          size='lg'\n          show={this.props.settings.get('modalShow')}\n          onHide={this.handleClose}\n          scrollable\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Einstellungen</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n\n            <Collapse in={this.state.restart}>\n              <div onClick={() => { window.location.reload() }}>\n                <Alert variant='danger'>\n                  Webseite Aktualisieren notwenig (F5)\n                </Alert>\n              </div>\n            </Collapse>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm='1'>Font</Form.Label>\n              <Col sm='11'>\n                <Form.Control\n                  as='select'\n                  name='fontClass'\n                  value={this.props.settings.get('fontClass')}\n                  onChange={({ target }) => { this.props.update(target.value, 'fontClass') }}\n                >\n                  <option value='Arimo'>Arimo</option>\n                  <option value='Hind'>Hind</option>\n                  <option value='IBM Plex Sans'>IBM Plex Sans</option>\n                  <option value='Montserrat'>Montserrat</option>\n                  <option value='Muli'>Muli</option>\n                  <option value='Nunito Sans'>Nunito Sans</option>\n                  <option value='Gothic A1'>Gothic A1</option>\n                  <option value='Roboto'>Roboto</option>\n                  <option value='Rubik'>Rubik</option>\n                  <option value='Source Sans Pro'>Source Sans Pro</option>\n                  <option value='Poppins'>Poppins</option>\n                  <option value='Open Sans'>Open Sans</option>\n                  <option value='Work Sans'>Work Sans</option>\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <InputGroup className='mb-3'>\n              <InputGroup.Prepend>\n                <InputGroup.Text id='basic-addon1'>Font Size</InputGroup.Text>\n              </InputGroup.Prepend>\n\n              <FormControl\n                type='number'\n                placeholder='Font Size'\n                aria-label='Font Size'\n                name='fontSize'\n                onChange={({ target }) => { this.props.update(target.value, target.name) }}\n                defaultValue={this.props.settings.get('fontSize')}\n                min='6'\n                max='30'\n              />\n              <InputGroup.Append>\n                <InputGroup.Text>px</InputGroup.Text>\n              </InputGroup.Append>\n            </InputGroup>\n\n            <InputGroup className='mb-3'>\n              <InputGroup.Prepend>\n                <InputGroup.Text>Row Height</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                type='number'\n                placeholder='Row Height'\n                aria-label='Row Height'\n                name='rowHeight'\n                onChange={({ target }) => {\n                  this.props.update(target.value, target.name)\n                  this.setState({ restart: true })\n                }}\n                defaultValue={this.props.settings.get('rowHeight')}\n                min='3'\n                max='60'\n              />\n              <InputGroup.Append>\n                <InputGroup.Text>px</InputGroup.Text>\n              </InputGroup.Append>\n            </InputGroup>\n\n            <InputGroup className='mb-3'>\n              <InputGroup.Prepend>\n                <InputGroup.Text>Max Lines</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                type='number'\n                placeholder='Max Lines'\n                aria-label='Max Lines'\n                onChange={({ target }) => {\n                  this.props.update(target.value, target.name)\n                  this.setState({ restart: true })\n                }}\n                name='maxLines'\n                defaultValue={this.props.settings.get('maxLines')}\n                min='1'\n              />\n            </InputGroup>\n\n            <div key='checkbox-detectLinks' className='mb-3'>\n              <Form.Check\n                custom\n                type='checkbox'\n                id='checkbox-detectLinks'\n                label='Erkenne URLs/EMails/IP-Adressen und konvertiere zu einem Link'\n                name='detectLinks'\n                defaultChecked={this.props.settings.get('detectLinks')}\n                onChange={({ target }) => { this.props.update(target.checked, target.name) }}\n              />\n            </div>\n\n            <div key='checkbox-showBadges' className='mb-3'>\n              <Form.Check\n                custom\n                type='checkbox'\n                id='checkbox-showBadges'\n                label='Zeige Badges an'\n                name='showBadges'\n                defaultChecked={this.props.settings.get('showBadges')}\n                onChange={({ target }) => { this.props.update(target.checked, target.name) }}\n              />\n            </div>\n\n            {channelColor}\n\n            <InputGroup className='mb-3'>\n              <FormControl // https://reactjs.org/docs/forms.html#controlled-components\n                placeholder='add Channel'\n                aria-label='add Channel'\n                aria-describedby='basic-addon9'\n                // defaultValue={this.temp}\n                value={this.state.addChannel}\n                onChange={this.handleChange}\n\n                // value={this.state.addChannel}\n                // onChange={({ target }) => {\n                //   // this.setState({ addChannel: target.value })\n                //   this.setState({ addChannel: { name: target.value, roomId: undefined } })\n                // }}\n                // TODO: onEnter: () =>\n              />\n              <InputGroup.Append>\n                <Button\n                  variant='outline-success'\n                  onClick={() => {\n                    // const channels = this.props.channels.push({ name: this.state.addChannel.toLowerCase(), roomId: undefined })\n                    this.props.update({ name: this.state.addChannel.toLowerCase(), roomId: undefined }, 'ADD_CHANNEL') // TODO: Gleich mit neue Farbe übergeben\n                    this.setState({ addChannel: '' })\n                  }}\n                >Add</Button>\n              </InputGroup.Append>\n            </InputGroup>\n\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant='secondary' onClick={this.handleClose}>\n              Schliessen\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    settings: state.settings,\n    channels: state.channels\n  }), // mapStateToProps\n  { update } // mapDispatchToProps\n)(SettingsModal)\n","import React, { PureComponent } from 'react'\r\n\r\nimport Navbar from 'react-bootstrap/Navbar'\r\n\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar'\r\n\r\nimport Form from 'react-bootstrap/Form'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\n// import classifierLevel from '../helper/classifierLevel'\r\n// import classifierNumber from '../helper/classifierNumber'\r\n// import LevelColor from '../helper/colors'\r\n\r\nimport SettingsModal from './Settings'\r\nimport { addUrlProps, UrlQueryParamTypes, configureUrlQuery } from 'react-url-query' // https://github.com/pbeshai/react-url-query\r\n\r\nimport { createBrowserHistory } from 'history'\r\n\r\nimport { compose } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { update } from '../redux'\r\n\r\nconst debug = false\r\n\r\nfunction debounce (fn, delay) {\r\n  let timer = null\r\n  return function () {\r\n    let context = this\r\n    let args = arguments\r\n    clearTimeout(timer)\r\n    timer = setTimeout(function () {\r\n      fn.apply(context, args)\r\n    }, delay)\r\n  }\r\n}\r\n\r\nconst history = createBrowserHistory()\r\n\r\nconfigureUrlQuery({\r\n  history,\r\n  addChangeHandlers: true\r\n})\r\n\r\nconst urlPropsQueryConfig = {\r\n  // QueryApp: { type: UrlQueryParamTypes.string, queryParam: 'app' },\r\n  // QueryHostname: { type: UrlQueryParamTypes.string, queryParam: 'hostname' },\r\n  // QueryLvl: { type: UrlQueryParamTypes.string, queryParam: 'lvl' },\r\n  QueryChannel: { type: UrlQueryParamTypes.string, queryParam: 'channel' },\r\n  QueryName: { type: UrlQueryParamTypes.string, queryParam: 'name' },\r\n  QueryMsg: { type: UrlQueryParamTypes.string, queryParam: 'msg' }\r\n}\r\n\r\nclass TopBar extends PureComponent {\r\n  constructor (props) {\r\n    super(props)\r\n    if (debug) console.log('TopBar', props)\r\n\r\n    this.state = {}\r\n    this.timer = {}\r\n    this.updateFilter = this.updateFilter.bind(this)\r\n    // this.updateDebounceFilter = debounce(this.updateDebounceFilter, 150) // https://stackoverflow.com/a/48702173\r\n    this.updateDebounceFilter = debounce(this.updateFilter, 150) // https://stackoverflow.com/a/48702173\r\n\r\n    this.onWheelHandler = this.onWheelHandler.bind(this)\r\n    this.onTouchMoveHandler = this.onTouchMoveHandler.bind(this)\r\n    this.onTouchStartHandler = this.onTouchStartHandler.bind(this)\r\n  }\r\n\r\n  componentDidMount () {\r\n    if (this.props.QueryChannel) this.props.update(this.props.QueryHostname, 'ADD_FILTER_channel')\r\n    if (this.props.QueryName) this.props.update(this.props.QueryApp, 'ADD_FILTER_name')\r\n    if (this.props.QueryMsg) this.props.update(this.props.QueryMsg, 'ADD_FILTER_msg')\r\n    // if (this.props.QueryHostname) this.props.update(this.props.QueryHostname, 'ADD_FILTER_hostname')\r\n    // if (this.props.QueryLvl) {\r\n    //   const lvl = isNaN(this.props.QueryLvl) ? classifierLevel(this.props.QueryLvl.toUpperCase()) : this.props.QueryLvl\r\n    //   this.props.update(lvl, 'ADD_FILTER_level')\r\n    // }\r\n  }\r\n\r\n  updateFilter (userInput, type) {\r\n    this.props.update(userInput, 'ADD_FILTER_' + type)\r\n    switch (type) {\r\n      case 'channel': this.props.onChangeQueryChannel(userInput); break\r\n      case 'name': this.props.onChangeQueryName(userInput); break\r\n      case 'msg': this.props.onChangeQueryMsg(userInput); break\r\n      // case 'hostname': this.props.onChangeQueryHostname(userInput); break\r\n      // case 'level': this.props.onChangeQueryLvl(userInput); break\r\n      default:\r\n    }\r\n  }\r\n\r\n  // updateDebounceFilter (userInput, type) {\r\n  //   this.props.update(userInput, 'ADD_FILTER_' + type)\r\n  //   switch (type) {\r\n  //     case 'name': this.props.onChangeQueryApp(userInput); break\r\n  //     case 'hostname': this.props.onChangeQueryHostname(userInput); break\r\n  //     case 'level': this.props.onChangeQueryLvl(userInput); break\r\n  //     case 'msg': this.props.onChangeQueryMsg(userInput); break\r\n  //     default:\r\n  //   }\r\n  // }\r\n\r\n  updateFilterNext (type, up) {\r\n    if (debug) console.log('updateFilterNext', { type, up })\r\n    switch (type) {\r\n      // case 'hostname':\r\n      //   const HostanameArray = Object.keys(this.props.settings.get('hostnameColor'))\r\n      //   if (HostanameArray.length !== 1) {\r\n      //     const index = HostanameArray.indexOf(this.props.filter.get('hostname'))\r\n      //     let nextIndex\r\n      //     if (up) {\r\n      //       nextIndex = index - 1\r\n      //       if (HostanameArray[nextIndex] === undefined) nextIndex = HostanameArray.length - 1\r\n      //     } else {\r\n      //       nextIndex = index + 1\r\n      //       if (HostanameArray[nextIndex] === undefined) nextIndex = 0\r\n      //     }\r\n      //     this.updateFilter(HostanameArray[nextIndex], type)\r\n      //   }\r\n      //   break\r\n\r\n      case 'channel':\r\n        const ChannelArray = Object.keys(this.props.settings.get('channelColor'))\r\n        console.log({ ChannelArray })\r\n\r\n        if (ChannelArray.length !== 1) {\r\n          const index = ChannelArray.indexOf(this.props.filter.get('channel'))\r\n          let nextIndex\r\n          if (up) {\r\n            nextIndex = index - 1\r\n            if (ChannelArray[nextIndex] === undefined) nextIndex = ChannelArray.length - 1\r\n          } else {\r\n            nextIndex = index + 1\r\n            if (ChannelArray[nextIndex] === undefined) nextIndex = 0\r\n          }\r\n          this.updateFilter(ChannelArray[nextIndex], type)\r\n        }\r\n        break\r\n\r\n      case 'name':\r\n        const AppArray = Object.keys(this.props.settings.get('appColor')) // TODO: das kommt direkt aus der Line\r\n        if (AppArray.length !== 1) {\r\n          const index = AppArray.indexOf(this.props.filter.get('name'))\r\n          let nextIndex\r\n          if (up) {\r\n            nextIndex = index - 1\r\n            if (AppArray[nextIndex] === undefined) nextIndex = AppArray.length - 1\r\n          } else {\r\n            nextIndex = index + 1\r\n            if (AppArray[nextIndex] === undefined) nextIndex = 0\r\n          }\r\n          this.updateFilter(AppArray[nextIndex], type)\r\n        }\r\n        break\r\n\r\n        // case 'level':\r\n        //   let level = this.props.filter.get('level')\r\n        //   if (up) level = level - 1\r\n        //   else level = level + 1\r\n        //   this.updateFilter(level, type)\r\n        //   break\r\n\r\n      default:\r\n        console.warn('updateFilterNext:', type)\r\n    }\r\n  }\r\n\r\n  onWheelHandler ({ deltaY }, type) {\r\n    let up\r\n    if (deltaY > 0) up = false\r\n    else up = true\r\n    this.updateFilterNext(type, up)\r\n  }\r\n\r\n  onTouchMoveHandler ({ touches }, type) {\r\n    if (!this.state.touchReset) {\r\n      const t = touches[0]\r\n      let up\r\n      if (t.pageY - this.state.touchY > 0) up = false\r\n      else up = true\r\n      this.setState({ touchReset: true })\r\n      this.updateFilterNext(type, up)\r\n    }\r\n  }\r\n\r\n  onTouchStartHandler ({ touches }) {\r\n    const t = touches[0]\r\n    this.setState({ touchY: t.pageY, touchReset: false })\r\n  }\r\n\r\n  render () {\r\n    if (debug) console.log('TopbarContainer RENDER', this.props, '############################################')\r\n\r\n    let channel = ''\r\n    if (this.props.filter.get('channel') !== '') {\r\n      const appStyle = this.props.settings.get('channelColor') && this.props.settings.get('channelColor')[this.props.filter.get('channel')] ? { backgroundColor: this.props.settings.get('channelColor')[this.props.filter.get('channel')] } : {}\r\n      channel = <Badge\r\n        variant='secondary'\r\n        ref='app'\r\n        style={{ ...appStyle, margin: '0 5px 5px', touchAction: 'pan-down' }}\r\n        onClick={() => this.updateFilter('', 'channel')}\r\n        onWheel={(e) => this.onWheelHandler(e, 'channel')}\r\n        onTouchMove={(e) => this.onTouchMoveHandler(e, 'channel')}\r\n        onTouchStart={this.onTouchStartHandler}\r\n      >{this.props.filter.get('channel')}</Badge>\r\n\r\n      this.props.onChangeQueryChannel(this.props.filter.get('channel'))\r\n    }\r\n\r\n    let name = ''\r\n    if (this.props.filter.get('name') !== '') {\r\n      const appStyle = this.props.settings.get('appColor') && this.props.settings.get('appColor')[this.props.filter.get('name')] ? { color: this.props.settings.get('appColor')[this.props.filter.get('name')] } : {}\r\n      name = <Badge\r\n        variant='secondary'\r\n        ref='app'\r\n        style={{ ...appStyle, margin: '0 5px 5px', touchAction: 'pan-down' }}\r\n        onClick={() => this.updateFilter('', 'name')}\r\n        onWheel={(e) => this.onWheelHandler(e, 'name')}\r\n        onTouchMove={(e) => this.onTouchMoveHandler(e, 'name')}\r\n        onTouchStart={this.onTouchStartHandler}\r\n      >{this.props.filter.get('name')}</Badge>\r\n\r\n      this.props.onChangeQueryName(this.props.filter.get('name'))\r\n    }\r\n\r\n    // let lvl = ''\r\n    // if (this.props.filter.get('level') !== '') {\r\n    //   const level = classifierNumber(this.props.filter.get('level'))\r\n    //   lvl = <Badge\r\n    //     variant='secondary'\r\n    //     className={'line'}\r\n    //     ref='lvl'\r\n    //     style={{ ...LevelColor[level], margin: '0 5px 5px', touchAction: 'pan-down' }}\r\n    //     onClick={() => this.updateFilter('', 'level')}\r\n    //     onWheel={(e) => this.onWheelHandler(e, 'level')}\r\n    //     onTouchMove={(e) => this.onTouchMoveHandler(e, 'level')}\r\n    //     onTouchStart={this.onTouchStartHandler}\r\n    //     dangerouslySetInnerHTML={{ __html: level }}\r\n    //   />\r\n\r\n    //   this.props.onChangeQueryLvl(level)\r\n    // }\r\n\r\n    // let hostname = ''\r\n    // if (this.props.filter.get('hostname') !== '') {\r\n    //   const hostnameStyle = this.props.settings.get('hostnameColor') && this.props.settings.get('hostnameColor')[this.props.filter.get('hostname')] ? { color: this.props.settings.get('hostnameColor')[this.props.filter.get('hostname')] } : {}\r\n    //   hostname = <Badge\r\n    //     variant='secondary'\r\n    //     ref='hostname'\r\n    //     style={{ ...hostnameStyle, margin: '0 5px 5px', touchAction: 'pan-down' }}\r\n    //     onClick={() => this.updateFilter('', 'hostname')}\r\n    //     onWheel={(e) => this.onWheelHandler(e, 'hostname')}\r\n    //     onTouchMove={(e) => this.onTouchMoveHandler(e, 'hostname')}\r\n    //     onTouchStart={this.onTouchStartHandler}\r\n    //     dangerouslySetInnerHTML={{ __html: this.props.filter.get('hostname') }}\r\n    //   />\r\n\r\n    //   this.props.onChangeQueryHostname(this.props.filter.get('hostname'))\r\n    // }\r\n\r\n    return (\r\n      <Navbar bg='dark' variant='dark' style={{ height: '60px' }} collapseOnSelect>\r\n        <Navbar.Brand>\r\n          <Navbar.Text className='d-lg-none'>\r\n            <img src={require('../TwitchGlitchWhite.svg')} alt='logo' width='30' height='30' className='d-inline-block align-top' />\r\n          </Navbar.Text>\r\n          <Navbar.Text className='d-none d-lg-block'>\r\n            <img src={require('../TwitchGlitchWhite.svg')} alt='logo' width='30' height='30' className='d-inline-block align-top' style={{ marginRight: '5px' }} />\r\n            TwitchChatViewer\r\n          </Navbar.Text>\r\n        </Navbar.Brand>\r\n\r\n        <Navbar.Text>\r\n          <span className='d-lg-none'>{this.props.length}</span>\r\n          <span className='d-none d-lg-block'>{this.props.length} lines</span>\r\n        </Navbar.Text>\r\n\r\n        <Navbar.Collapse className='justify-content-center'>\r\n          <Navbar.Text>\r\n            <ButtonToolbar>\r\n              {channel}\r\n              {/* {hostname} */}\r\n              {name}\r\n              {/* {lvl} */}\r\n            </ButtonToolbar>\r\n          </Navbar.Text>\r\n        </Navbar.Collapse>\r\n\r\n        <Navbar.Collapse className='justify-content-end'>\r\n          <Form\r\n            inline\r\n            onSubmit={e => {\r\n              e.preventDefault()\r\n              this.updateFilter(this.refs.search.value, 'msg')\r\n            }}\r\n          >\r\n            <FormControl\r\n              type='text'\r\n              placeholder='Search'\r\n              className='mr-sm-2 btn-dark'\r\n              ref='search'\r\n              defaultValue={this.props.filter.get('msg')}\r\n              onChange={() => this.updateDebounceFilter(this.refs.search.value, 'msg')}\r\n            />\r\n          </Form>\r\n          <SettingsModal />\r\n        </Navbar.Collapse>\r\n\r\n      </Navbar>\r\n    )\r\n  }\r\n}\r\n\r\nconst enhance = compose(\r\n  connect(\r\n    state => ({\r\n      length: state.length,\r\n      filter: state.filter,\r\n      settings: state.settings\r\n    }), // mapStateToProps\r\n    { update } // mapDispatchToProps\r\n  ),\r\n  addUrlProps({ urlPropsQueryConfig })\r\n)\r\nexport default enhance(TopBar)\r\n","/* globals fetch:true */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","// import protobuf from 'protobufjs' // https://www.npmjs.com/package/protobufjs\r\n\r\nimport { connect } from 'react-redux'\r\nimport { update } from '../redux'\r\n\r\nimport getRandomColor from '../helper/getRandomColor'\r\n\r\nimport difference from 'lodash.difference'\r\n\r\nimport TwitchJs from 'twitch-js'\r\n\r\nconst formatEmotes = (text, emotes) => {\r\n  if (emotes === []) return text\r\n  text = text.split('')\r\n  for (let i = 0, len = emotes.length; i < len; i++) {\r\n    // A cookie associated with a cross-site resource at https://jtvnw.net/ was set without the `SameSite` attribute. A future release of Chrome will only deliver cookies with cross-site requests if they are set with `SameSite=None` and `Secure`. You can review cookies in developer tools under Application>Storage>Cookies and see more details at https://www.chromestatus.com/feature/5088147346030592 and https://www.chromestatus.com/feature/5633521622188032.\r\n    text.splice(emotes[i].start, emotes[i].end, '<img class=\"emoticon\" src=\"//static-cdn.jtvnw.net/emoticons/v1/' + emotes[i].id + '/1.0\">')\r\n  }\r\n  return text.join('')\r\n}\r\n\r\n// let randomcolor = ['#fc5c65', '#fd9644', '#fed330', '#26de81', '#2bcbba', '#eb3b5a', '#fa8231', '#f7b731', '#20bf6b', '#0fb9b1', '#45aaf2', '#4b7bec', '#a55eea', '#d1d8e0', '#778ca3', '#2d98da', '#3867d6', '#8854d0', '#a5b1c2', '#4b6584'] // https://flatuicolors.com/\r\n// const getRandomColor = () => {\r\n//   const index = Math.floor(Math.random() * randomcolor.length)\r\n//   const color = randomcolor[index]\r\n//   randomcolor.splice(index, 1)\r\n//   if (!randomcolor.length) {\r\n//     randomcolor = ['#fc5c65', '#fd9644', '#fed330', '#26de81', '#2bcbba', '#eb3b5a', '#fa8231', '#f7b731', '#20bf6b', '#0fb9b1', '#45aaf2', '#4b7bec', '#a55eea', '#d1d8e0', '#778ca3', '#2d98da', '#3867d6', '#8854d0', '#a5b1c2', '#4b6584']\r\n//   }\r\n//   return color\r\n// }\r\n\r\nconst { chat } = new TwitchJs({ token: '', username: `justinfan${Math.floor((Math.random() * 80000) + 1000)}`, chat: { joinTimeout: 60000 } })\r\n// const { chat } = TwitchJs.client({ token, username })\r\nchat._log._level = -1\r\n\r\n// eslint-disable-next-line no-control-regex\r\nconst ACTION = /(\\x01ACTION )(.*)(\\x01)/\r\n\r\n// settingsStore.subscribe(async () => {\r\n//   const all = chat._getChannels()\r\n//   const newChannel = settingsStore.getState().channel.map(name => '#' + name)\r\n\r\n//   const part = difference(all, newChannel)\r\n//   await Promise.all(part.map(channel => chat.part(channel)))\r\n\r\n//   const join = difference(newChannel, all)\r\n//   await Promise.all(join.map(channel => chat.join(channel)))\r\n// })\r\n\r\nexport const _disconnect = () => {\r\n  chat.disconnect()\r\n}\r\n\r\n// const join = (channel) => {\r\n//   chat.join(channel).then(data => console.log(data))\r\n// }\r\n\r\nconst part = (channel) => {\r\n  chat.part(channel)\r\n}\r\n\r\nconst connected = () => chat._readyState === 3\r\n\r\nexport const _connect = ({ update, channels }) => {\r\n  // console.log('_readyState', chat._readyState)\r\n  // console.log(channels.toArray())\r\n  if (connected()) { // https://github.com/twitch-devs/twitch-js/blob/083d8626c8fdfb19ff147a59f60d487b712be06c/src/Chat/index.js\r\n    const StoreChannel = channels.toArray().map(chan => chan.name)\r\n    // console.log('settings.get StoreChannel', StoreChannel)\r\n\r\n    const ChannelState = Object.keys(chat._channelState).map(chan => chan.substr(1))\r\n    // console.log({ StoreChannel, ChannelState })\r\n\r\n    const _join = difference(StoreChannel, ChannelState)\r\n    if (_join.length) {\r\n      chat.join(_join[0]).then(data => {\r\n        update({ name: _join[0], roomId: data.roomState.roomId }, 'ADD_ROOMID')\r\n        update([{ timestamp: +new Date(), chan: _join[0], msg: '=> JOIN' }], 'ADD_DATA')\r\n      })\r\n    }\r\n\r\n    const _part = difference(ChannelState, StoreChannel)\r\n    if (_part.length) {\r\n      console.log('part', _part)\r\n      // part(_part.map(chan => `#${chan}`))\r\n      part(_part[0])\r\n    }\r\n  } else if (chat._readyState === 0) {\r\n    chat.connect()\r\n      .then(async () => {\r\n        // console.log('Connect ...')\r\n        // await Promise.all(channels.toArray().map(channel => chat.join(channel.name))).then(data => console.log(data))\r\n        channels.toArray().map(channel => chat.join(channel.name).then(_ => update([{ timestamp: +new Date(), chan: channel.name, msg: '=> JOIN' }], 'ADD_DATA')))\r\n      })\r\n      .catch(err => {\r\n        console.warn(err)\r\n      })\r\n\r\n    chat.on('*', ({ channel, command, message, tags, timestamp, username }) => {\r\n      timestamp = timestamp || +new Date()\r\n      const chan = channel && channel.substr(1)\r\n      const name = username\r\n      let msg\r\n      switch (command) {\r\n        case 'PRIVMSG':\r\n          msg = formatEmotes(message, tags.emotes)\r\n          if (tags.color === null) {\r\n            tags.color = getRandomColor()\r\n          }\r\n          if (msg.toLowerCase().indexOf('@' + chan) !== -1) {\r\n            tags.attention = true\r\n          }\r\n          const found = ACTION.exec(msg)\r\n          if (found !== null) {\r\n            msg = found[2]\r\n            tags.action = true\r\n          }\r\n          update([{ timestamp, chan, name, msg, tags }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'USERNOTICE':\r\n          update([{ timestamp, chan, msg: tags.systemMsg }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'CLEARMSG': // https://dev.twitch.tv/docs/irc/tags#clearmsg-twitch-tags\r\n          // Single message removal on a channel. This is triggered via /delete <target-msg-id> on IRC.\r\n          console.log({ channel, command, message, tags, timestamp, username })\r\n          update([{ timestamp, chan, msg: `REMOVE ${username}, ${tags.targetMsgId}` }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'CLEARCHAT': // https://dev.twitch.tv/docs/irc/tags#clearchat-twitch-tags\r\n        // Temporary or permanent ban on a channel.\r\n          if (tags.banDuration) { // ban-duration (Optional) Duration of the timeout, in seconds. If omitted, the ban is permanent.\r\n            msg = `TIMEOUT: ${username}, ${tags.banDuration + 's' + (tags.banReason ? ', ' + tags.banReason : '')}`\r\n          } else {\r\n            msg = `BAN: ${username}, banReason: ${tags.banReason}`\r\n          }\r\n          update([{ timestamp, chan, msg }], 'ADD_DATA') // TODO: tag für Farbe\r\n          break\r\n\r\n        case 'JOIN':\r\n        //   update([{ timestamp, chan: '-', msg: '=> JOIN' }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'PART':\r\n        //   update([{ timestamp, chan: '-', msg: '<= PART' }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'CONNECTED':\r\n          update([{ timestamp, chan: 'twitch.tv', msg: 'CONNECTED' }], 'ADD_DATA')\r\n          break\r\n\r\n          // \"HOSTTARGET\"\r\n          // { channel: \"#tsm_viss\", command: \"HOSTTARGET\", message: undefined, tags: { … }, timestamp: Sat Nov 02 2019 00: 00: 23 GMT + 0100(Mitteleuropäische Normalzeit), … }\r\n          // channel: \"#tsm_viss\"\r\n          // command: \"HOSTTARGET\"\r\n          // message: undefined\r\n          // tags: { }\r\n          // timestamp: Sat Nov 02 2019 00: 00: 23 GMT + 0100(Mitteleuropäische Normalzeit) { }\r\n          // username: \"halifax\"\r\n\r\n          // \"NOTICE\"\r\n          // { channel: \"#tsm_viss\", command: \"NOTICE\", message: \"Now hosting Halifax.\", tags: { … }, timestamp: Sat Nov 02 2019 00: 00: 23 GMT + 0100(Mitteleuropäische Normalzeit), … }\r\n          // channel: \"#tsm_viss\"\r\n          // command: \"NOTICE\"\r\n          // message: \"Now hosting Halifax.\"\r\n          // tags: { msgId: \"host_on\" }\r\n          // timestamp: Sat Nov 02 2019 00: 00: 23 GMT + 0100(Mitteleuropäische Normalzeit) { }\r\n          // username: \"tmi.twitch.tv\"\r\n\r\n        case '001': ; break\r\n        case '002': ; break\r\n        case '003': ; break\r\n        case '004': ; break\r\n        case '353': ; break\r\n        case '366': ; break\r\n        case '372': ; break\r\n        case '375': ; break\r\n        case '376': ; break\r\n        case 'CAP': ; break\r\n        case 'MODE': ; break\r\n        case 'PING': ; break\r\n        case 'ROOMSTATE': ; break\r\n\r\n        case 'PARSE_ERROR_ENCOUNTERED': ; break\r\n\r\n        default:\r\n          console.log('default', { channel, command, message, tags, timestamp, username })\r\n      }\r\n    })\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport default connect(\r\n  state => ({\r\n    channels: state.channels\r\n  }), // mapStateToProps\r\n  // state => ({ settings: state.settings }), // mapStateToProps\r\n  // state => ({ }), // mapStateToProps\r\n  { update } // mapDispatchToProps\r\n)(_connect)\r\n","/* globals fetch:true */\r\n\r\nimport { connect } from 'react-redux'\r\nimport { update } from '../redux'\r\n\r\nimport difference from 'lodash.difference'\r\n\r\nlet tempChannels\r\n\r\nexport const _connect = ({ update, badges, channels }) => {\r\n  // console.log('badges_connect', badges, channels)\r\n\r\n  const StoreChannel = channels.toArray().filter(chan => chan.roomId) // filtere undefined roomId raus\r\n\r\n  const ChannelState = tempChannels\r\n  // console.log({ StoreChannel, ChannelState })\r\n\r\n  const _join = difference(StoreChannel, ChannelState)\r\n  if (_join.length) {\r\n    // console.log('badges_connectjoin', _join)\r\n  }\r\n\r\n  const _part = difference(ChannelState, StoreChannel)\r\n  if (_part.length) {\r\n    // console.log('badges_connectpart', _part)\r\n    // https://badges.twitch.tv/v1/badges/channels/gronkh/display\r\n  }\r\n\r\n  if (badges.global.size === 0) {\r\n    fetch('https://badges.twitch.tv/v1/badges/global/display')\r\n      .then(res => res.json())\r\n      .then(res => update({ key: 'global', value: res.badge_sets }, 'UPDATE_BADGES'))\r\n  }\r\n\r\n  StoreChannel.forEach(value => {\r\n    if (!badges[value.name]) {\r\n      fetch(`https://badges.twitch.tv/v1/badges/channels/${value.roomId}/display`)\r\n        .then(res => res.json())\r\n        .then(res => {\r\n          update({ key: value.name, value: res.badge_sets }, 'UPDATE_BADGES')\r\n        })\r\n    }\r\n  })\r\n\r\n  tempChannels = StoreChannel\r\n  return null\r\n}\r\n\r\nexport default connect(\r\n  state => ({\r\n    channels: state.channels,\r\n    badges: state.badges\r\n  }), // mapStateToProps\r\n  { update } // mapDispatchToProps\r\n)(_connect)\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Log from './components/Log'\nimport TopBar from './components/TopBar'\nimport * as serviceWorker from './serviceWorker'\n\nimport DataService from './data/twitch'\nimport BadgesService from './data/bages'\nimport { Provider } from 'react-redux'\nimport { store } from './redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <TopBar />\n    <Log />\n    <DataService />\n    <BadgesService />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}