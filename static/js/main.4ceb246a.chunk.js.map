{"version":3,"sources":["TwitchGlitchWhite.svg","../node_modules/better-queue/lib sync /^better/-queue/-.*$","components/cache.js","helper/formatEmotes.js","helper/getRandomColor.js","components/chatLine.js","helper/FormatDate.js","redux/filter.js","redux/index.js","components/Log.js","components/Settings.js","components/TopBar.js","serviceWorker.js","data/bages.js","data/twitch.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","cache","CellMeasurerCache","minHeight","defaultHeight","fixedWidth","keyMapper","rowIndex","refreshCache","rowHeight","_minHeight","_defaultHeight","clearAll","msg","emotes","measure","length","i","split","end","start","empty","Array","apply","map","slice","concat","splice","key","onLoad","className","alt","src","srcSet","randomcolor","index","Math","floor","random","color","ACTION","App","props","chan","source","name","tags","timestamp","toLowerCase","indexOf","styleColor","found","exec","banDuration","backgroundColor","banReason","formatEmotes","getRandomColor","detectLinks","anchorme","truncate","attributes","value","style","this","Component","zeroPad2","num","zeroPad3","_FormatDate","Datenow","mobile","date","Date","HH","getHours","mm","getMinutes","ss","getSeconds","SSS","getMilliseconds","DD","getDate","MM","getMonth","YYYY","getFullYear","FormatDate","cacheInput","cacheOutput","result","_memoizedFormatDate","debug","timer","Filter","allLogs","filter","console","log","get","undefined","find","logs","size","scrollBottom","time","CHANNEL","NAME","MSG","item","timeEnd","update","type","initialState","List","Map","level","hostname","settings","JSON","parse","localStorage","getItem","modalShow","showBadges","fontClass","fontSize","maxLines","channelColor","channels","badges","global","store","createStore","state","action","ChannelColorList","len","push","forEach","username","temp","set","Object","assign","findIndex","ele","setItem","stringify","toArray","roomId","FILTER","Number","_10percent","_maxLines","takeLast","newColor","isNaN","toObject","window","__REDUX_DEVTOOLS_EXTENSION__","getBrowserHiddenProps","hidden","visibilityChange","document","msHidden","webkitHidden","LogContainer","handleResize","innerWidth","setState","bindListRef","current","forceUpdateGrid","listenScrollEvent","scrollHeight","scrollTop","clientHeight","UserNameRenderer","row","onClick","updateFilter","decamelize","text","replace","createBadge","badge","versions","subscriber","bits","title","aria-label","image_url_1x","image_url_2x","image_url_4x","error","warn","createBadgeTags","hasOwnProperty","element","has","React","createRef","bind","addEventListener","_debounce","removeResizeListener","prevProps","_prevState","_snapshot","scrollToRow","_scrollingToRow","userInput","scrollButton","Button","variant","height","fontFamily","width","overscanColumnCount","overscanRowCount","scrollingResetTimeInterval","ref","rowCount","deferredMeasurementCache","onScroll","noRowsRenderer","rowRenderer","_key","parent","channelStyle","channel","columnIndex","padding","wordWrap","lineHeight","PureComponent","connect","SettingsModal","context","handleShow","handleClose","handleChange","restart","addChannel","target","InputGroup","Prepend","Text","FormControl","defaultValue","onChange","Append","role","Modal","show","onHide","scrollable","Header","closeButton","Title","Body","Collapse","in","location","reload","Alert","Form","Group","as","Row","Label","column","sm","Col","Control","placeholder","min","max","Check","custom","label","defaultChecked","checked","aria-describedby","Footer","history","createBrowserHistory","configureUrlQuery","addChangeHandlers","urlPropsQueryConfig","QueryChannel","UrlQueryParamTypes","string","queryParam","QueryName","QueryMsg","TopBar","updateDebounceFilter","fn","delay","args","arguments","clearTimeout","setTimeout","debounce","onWheelHandler","onTouchMoveHandler","onTouchStartHandler","QueryHostname","QueryApp","onChangeQueryChannel","onChangeQueryName","onChangeQueryMsg","up","ChannelArray","nextIndex","AppArray","deltaY","updateFilterNext","touches","touchReset","pageY","touchY","t","appStyle","Badge","margin","touchAction","onWheel","onTouchMove","onTouchStart","Navbar","bg","collapseOnSelect","Brand","require","marginRight","ButtonToolbar","inline","onSubmit","preventDefault","refs","search","Settings","enhance","compose","addUrlProps","Boolean","match","tempChannels","chat","TwitchJs","token","joinTimeout","_readyState","StoreChannel","ChannelState","_channelState","substr","_joins","difference","_join","join","then","data","roomState","_parts","_part","a","_","catch","err","on","command","message","_raw","systemMsg","targetMsgId","fetch","res","json","badge_sets","ReactDOM","render","Log","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ceb246a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/TwitchGlitchWhite.5f80eca1.svg\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 441;","import { CellMeasurerCache } from 'react-virtualized'\r\n\r\nexport const cache = new CellMeasurerCache({ // https://github.com/bvaughn/react-virtualized/blob/master/docs/CellMeasurer.md#cellmeasurercache\r\n  minHeight: 19,\r\n  defaultHeight: 19,\r\n  fixedWidth: true,\r\n  keyMapper: rowIndex => rowIndex\r\n})\r\n\r\nexport const refreshCache = function (rowHeight = 19) {\r\n  // console.log('refreshCache()')\r\n  // console.trace()\r\n\r\n  cache._minHeight = rowHeight\r\n  cache._defaultHeight = rowHeight\r\n  cache.clearAll()\r\n}\r\n","import React from 'react'\r\n\r\nexport default ({ msg, emotes, measure, id }) => {\r\n  if (emotes.length === 0) {\r\n    return msg\r\n  }\r\n  // console.log({ msg, emotes })\r\n\r\n  msg = msg.split('')\r\n\r\n  // msg = emotes.map((emote, i) => {\r\n  //   const img = <img\r\n  //     key={`${id}-${emote.id}-${i}`}\r\n  //     // onLoad={measure}\r\n  //     className='emoticon'\r\n  //     alt={emote.id}\r\n  //     src={'//static-cdn.jtvnw.net/emoticons/v1/' + emote.id + '/1.0'}\r\n  //     srcSet={`//static-cdn.jtvnw.net/emoticons/v1/${emote.id}/2 2x, //static-cdn.jtvnw.net/emoticons/v1/${emote.id}/4 4x`}\r\n  //   />\r\n  //   const start = emote.start\r\n  //   const ende = emote.end + 1\r\n  //   const left = msg.slice(0, start)\r\n  //   const right = msg.slice(ende)\r\n  //   return (<span key={`${emote.id}-${i}`}>{left.concat(img, right)}</span>)\r\n  // })\r\n  // chatLine.js: 25 emotes: 0.002685546875ms\r\n  // chatLine.js: 25 emotes: 0.00390625ms\r\n  // chatLine.js: 25 emotes: 0.004150390625ms\r\n  // chatLine.js: 25 emotes: 0.003173828125ms\r\n  // chatLine.js: 25 emotes: 0.057861328125ms\r\n  // chatLine.js: 25 emotes: 0.004150390625ms\r\n  // chatLine.js: 25 emotes: 0.0029296875ms\r\n  // chatLine.js: 25 emotes: 0.003173828125ms\r\n  // chatLine.js: 25 emotes: 0.03515625ms\r\n\r\n  // // // // // // // // // // // // // // // // // //\r\n\r\n  // for (let i = emotes.length; i--;) {\r\n  //   msg.splice(\r\n  //     emotes[i].start,\r\n  //     emotes[i].end + 1,\r\n  //     <img\r\n  //       key={`${id}-${emotes[i].id}-${i}`}\r\n  //       // onLoad={measure}\r\n  //       className='emoticon'\r\n  //       alt={emotes[i].id}\r\n  //       src={'//static-cdn.jtvnw.net/emoticons/v1/' + emotes[i].id + '/1.0'}\r\n  //       srcSet={`//static-cdn.jtvnw.net/emoticons/v1/${emotes[i].id}/2 2x, //static-cdn.jtvnw.net/emoticons/v1/${emotes[i].id}/4 4x`}\r\n  //     />\r\n  //   )\r\n  // }\r\n  // chatLine.js: 25 emotes: 0.003173828125ms\r\n  // chatLine.js: 25 emotes: 0.027099609375ms\r\n  // chatLine.js: 25 emotes: 0.00390625ms\r\n  // chatLine.js: 25 emotes: 0.004150390625ms\r\n  // chatLine.js: 25 emotes: 0.00390625ms\r\n  // chatLine.js: 25 emotes: 0.0029296875ms\r\n  // chatLine.js: 25 emotes: 0.003173828125ms\r\n  // chatLine.js: 25 emotes: 0.002685546875ms\r\n  // chatLine.js: 25 emotes: 0.004150390625ms\r\n  // chatLine.js: 25 emotes: 0.029052734375ms\r\n  // chatLine.js: 25 emotes: 0.0029296875ms\r\n\r\n  // // // // // // // // // // // // // // // // // //\r\n\r\n  for (const i in emotes) { // https://github.com/tmijs/tmi.js/issues/11\r\n    const e = emotes[i]\r\n    const length = e.end - e.start\r\n    const empty = Array.apply(null, new Array(length + 1)).map(function () { return '' })\r\n    msg = msg.slice(0, e.start).concat(empty).concat(msg.slice(e.end + 1, msg.length))\r\n    msg.splice(e.start, 1, <img\r\n      key={`${id}-${e.id}-${i}`}\r\n      onLoad={measure}\r\n      className='emoticon'\r\n      alt={e.id}\r\n      src={`//static-cdn.jtvnw.net/emoticons/v1/${e.id}/1.0`}\r\n      srcSet={`//static-cdn.jtvnw.net/emoticons/v1/${e.id}/2.0 2x, //static-cdn.jtvnw.net/emoticons/v1/${e.id}/4.0 4x`}\r\n    />)\r\n  }\r\n  // chatLine.js: 25 emotes: 0.003173828125ms\r\n  // chatLine.js: 25 emotes: 0.051025390625ms\r\n  // chatLine.js: 25 emotes: 0.003173828125ms\r\n  // chatLine.js: 25 emotes: 0.049072265625ms\r\n  // chatLine.js: 25 emotes: 0.004150390625ms\r\n  // chatLine.js: 25 emotes: 0.071044921875ms\r\n  // chatLine.js: 25 emotes: 0.004150390625ms\r\n  // chatLine.js: 25 emotes: 0.054931640625ms\r\n  // chatLine.js: 25 emotes: 0.002685546875ms\r\n  // chatLine.js: 25 emotes: 0.004150390625ms\r\n\r\n  return msg\r\n}\r\n","let randomcolor = ['#fc5c65', '#fd9644', '#fed330', '#26de81', '#2bcbba', '#eb3b5a', '#fa8231', '#f7b731', '#20bf6b', '#0fb9b1', '#45aaf2', '#4b7bec', '#a55eea', '#d1d8e0', '#778ca3', '#2d98da', '#3867d6', '#8854d0', '#a5b1c2', '#4b6584'] // https://flatuicolors.com/\r\n\r\nexport default () => {\r\n  const index = Math.floor(Math.random() * randomcolor.length)\r\n  const color = randomcolor[index]\r\n  randomcolor.splice(index, 1)\r\n  if (!randomcolor.length) {\r\n    randomcolor = ['#fc5c65', '#fd9644', '#fed330', '#26de81', '#2bcbba', '#eb3b5a', '#fa8231', '#f7b731', '#20bf6b', '#0fb9b1', '#45aaf2', '#4b7bec', '#a55eea', '#d1d8e0', '#778ca3', '#2d98da', '#3867d6', '#8854d0', '#a5b1c2', '#4b6584']\r\n  }\r\n  return color\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport anchorme from 'anchorme'\r\n\r\n// import FormatDate from '../helper/FormatDate'\r\nimport formatEmotes from '../helper/formatEmotes'\r\nimport getRandomColor from '../helper/getRandomColor'\r\n\r\n// eslint-disable-next-line no-control-regex\r\nconst ACTION = /(\\x01ACTION )(.*)(\\x01)/\r\n\r\nclass App extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    // console.log(props)\r\n\r\n    this.chan = props.source.chan\r\n    this.msg = props.source.msg\r\n    this.name = props.source.name\r\n    this.tags = props.source.tags\r\n    this.timestamp = props.source.timestamp\r\n\r\n    // console.log(this.msg)\r\n\r\n    if (this.msg && this.msg.toLowerCase().indexOf('@' + this.chan) !== -1) {\r\n      this.styleColor = { color: 'red' }\r\n    }\r\n\r\n    const found = ACTION.exec(this.msg)\r\n    if (found !== null) {\r\n      this.msg = found[2]\r\n      this.styleColor = { color: this.tags.color }\r\n    }\r\n\r\n    if (this.tags && this.tags.banDuration) { // ban-duration (Optional) Duration of the timeout, in seconds. If omitted, the ban is permanent.\r\n      this.styleColor = {\r\n        backgroundColor: 'rgba(255, 193, 7, 0.3)'\r\n      }\r\n      // msg = `TIMEOUT: ${username}, ${this.tags.banDuration + 's' + (this.tags.banReason ? ', ' + this.tags.banReason : '')}`\r\n      // console.log(this.styleColor)\r\n    } else if (this.tags && this.tags.banReason) {\r\n      // msg = `BAN: ${username}, banReason: ${this.tags.banReason}`\r\n      this.styleColor = {\r\n        backgroundColor: 'rgba(255, 0, 0, 0.3)'\r\n      }\r\n      // console.log(this.styleColor)\r\n    }\r\n\r\n    if (this.tags && this.tags.emotes) {\r\n      this.msg = formatEmotes({ msg: this.msg, emotes: this.tags.emotes, measure: props.measure, id: this.tags.id })\r\n    }\r\n\r\n    if (this.tags && this.tags.color === true) {\r\n      this.tags.color = getRandomColor()\r\n    }\r\n\r\n    if (props.detectLinks) {\r\n      this.msg = anchorme(this.msg, {\r\n        truncate: [30, 15],\r\n        attributes: [{ name: 'target', value: '_blank' }]\r\n      })\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <span style={this.styleColor}>{this.msg}</span>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","const zeroPad2 = (num) => num < 10 ? '0' + num : num\r\nconst zeroPad3 = (num) => {\r\n  if (num < 10) return '00' + num\r\n  else if (num < 100) return '0' + num\r\n  else return num\r\n}\r\nconst _FormatDate = (Datenow = 0, mobile = false) => {\r\n  const date = new Date(Datenow)\r\n\r\n  // 'HH:mm:ss.SSS'\r\n  const HH = zeroPad2(date.getHours())\r\n  const mm = zeroPad2(date.getMinutes())\r\n  const ss = zeroPad2(date.getSeconds())\r\n  const SSS = zeroPad3(date.getMilliseconds())\r\n\r\n  if (!mobile) {\r\n    // 'YYYY-MM-DD HH:mm:ss.SSS'\r\n    const DD = zeroPad2(date.getDate())\r\n    const MM = zeroPad2(date.getMonth())\r\n    const YYYY = date.getFullYear()\r\n    return `${YYYY}-${MM}-${DD} ${HH}:${mm}:${ss}.${SSS}`\r\n  }\r\n\r\n  return `${HH}:${mm}:${ss}.${SSS}`\r\n}\r\n\r\nconst _memoizedFormatDate = (Datenow = 0, mobile) => {\r\n  let cacheInput = 0\r\n  let cacheOutput = ''\r\n  return (Datenow, mobile) => {\r\n    if (cacheInput === Datenow) {\r\n      return cacheOutput\r\n    } else {\r\n      const result = _FormatDate(Datenow, mobile)\r\n      cacheInput = Datenow\r\n      cacheOutput = result\r\n      return result\r\n    }\r\n  }\r\n}\r\n\r\nconst FormatDate = _memoizedFormatDate()\r\nexport default FormatDate\r\n","const debug = false\r\nconst timer = false\r\n\r\nexport default function Filter (allLogs, filter) {\r\n  if (debug) console.log('>>>> Filter', allLogs, filter)\r\n  // if (debug) console.log(`::: Filter name '${filter.get('name')}', level '${filter.get('level')}', hostname '${filter.get('hostname')}', msg '${filter.get('msg')}'`)\r\n  if (debug) console.log(`::: Filter channel '${filter.get('channel')}', name '${filter.get('name')}', msg '${filter.get('msg')}'`)\r\n\r\n  if (filter.find(value => value !== '') === undefined) { // if (filter.get('name') === '' && filter.get('level') === '' && filter.get('hostname') === '' && filter.get('msg') === '') {\r\n    if (debug) console.log('Filter return { logs: allLogs, length: allLogs.size }')\r\n    return { logs: allLogs, length: allLogs.size, scrollBottom: true }\r\n  }\r\n  if (timer) console.time('Filter')\r\n  // let LEVEL\r\n  // if (filter.get('level') !== '') {\r\n  //   LEVEL = filter.get('level') + 1\r\n  // }\r\n\r\n  const CHANNEL = filter.get('channel')\r\n\r\n  // filter = filter.set('msg', filter.get('msg').toLowerCase())\r\n  const NAME = filter.get('name')\r\n  // const HOSTNAME = filter.get('hostname')\r\n  const MSG = filter.get('msg').toLowerCase()\r\n\r\n  // if (debug) console.log(`::: Filter name '${NAME}', level '${LEVEL}', hostname '${HOSTNAME}', msg '${MSG}'`)\r\n  if (debug) console.log(`::: Filter channel '${CHANNEL}', name '${NAME}', msg '${MSG}'`)\r\n\r\n  const logs = allLogs.filter(item => {\r\n    // if (LEVEL && item.level !== LEVEL) { // genaue übereinstimmung\r\n    //   return false\r\n    // }\r\n\r\n    // if (LEVEL && item.level >= LEVEL) { // ab diesem Level\r\n    //   return false\r\n    // }\r\n\r\n    if (CHANNEL && item.chan !== CHANNEL) {\r\n      return false\r\n    }\r\n\r\n    if (NAME && item.name !== NAME) {\r\n      return false\r\n    }\r\n\r\n    // if (HOSTNAME && item.hostname !== HOSTNAME) {\r\n    //   return false\r\n    // }\r\n\r\n    if (MSG && item.msg.toLowerCase().indexOf(MSG) === -1) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  })\r\n  if (timer) console.timeEnd('Filter')\r\n  return { logs: logs, length: logs.size }\r\n}\r\n\r\n// export default function Filter (allLogs, filter) {\r\n//   if (debug) console.log('>>>> Filter', allLogs, filter)\r\n//   if (debug) console.log(`::: Filter name '${filter.get('name')}', level '${filter.get('level')}', hostname '${filter.get('hostname')}', msg '${filter.get('msg')}'`)\r\n\r\n//   if (filter.has('name') && filter.has('level') && filter.has('hostname') && filter.has('msg')) {\r\n//     if (debug) console.log('Filter return { logs: allLogs, length: allLogs.size }')\r\n//     return { logs: allLogs, length: allLogs.size, scrollBottom: true }\r\n//   }\r\n\r\n//   if (debug) console.time('Filter')\r\n//   let LEVEL\r\n//   if (filter.has('level')) {\r\n//     LEVEL = filter.get('level') + 1\r\n//   }\r\n\r\n//   const NAME = filter.get('name')\r\n//   const HOSTNAME = filter.get('hostname')\r\n//   const MSG = filter.get('msg').toLowerCase()\r\n\r\n//   if (debug) console.log(`::: Filter name '${NAME}', level '${LEVEL}', hostname '${HOSTNAME}', msg '${MSG}'`)\r\n//   const logs = allLogs.filter(item => {\r\n//     // if (filter.level && item.level !== filter.level) return false // genaue übereinstimmung\r\n\r\n//     if (LEVEL && item.level >= LEVEL) return false // ab diesem Level\r\n\r\n//     if (NAME && item.name !== NAME) return false\r\n\r\n//     if (HOSTNAME && item.hostname !== HOSTNAME) return false\r\n\r\n//     if (MSG && item.msg.toLowerCase().indexOf(MSG) === -1) return false\r\n\r\n//     return true\r\n//   })\r\n//   if (debug) console.timeEnd('Filter')\r\n//   return { logs: logs, length: logs.size }\r\n// }\r\n","/* globals localStorage:true */\n\nimport { createStore } from 'redux'\nimport { List, Map } from 'immutable' // https://immutable-js.github.io/immutable-js/\nimport Filter from './filter'\nimport { refreshCache } from '../components/cache'\n\nimport getRandomColor from '../helper/getRandomColor'\n\nconst debug = false\nconst timer = false\n\nexport const update = function (value, type) {\n  if (debug) console.log('update()', { type, value })\n  return ({ type, value })\n}\n\n// let randomcolor = ['#fc5c65', '#fd9644', '#fed330', '#26de81', '#2bcbba', '#eb3b5a', '#fa8231', '#f7b731', '#20bf6b', '#0fb9b1', '#45aaf2', '#4b7bec', '#a55eea', '#d1d8e0', '#778ca3', '#2d98da', '#3867d6', '#8854d0', '#a5b1c2', '#4b6584'] // https://flatuicolors.com/\n// const getRandomColor = () => {\n//   const index = Math.floor(Math.random() * randomcolor.length)\n//   const color = randomcolor[index]\n//   randomcolor.splice(index, 1)\n//   if (!randomcolor.length) {\n//     randomcolor = ['#fc5c65', '#fd9644', '#fed330', '#26de81', '#2bcbba', '#eb3b5a', '#fa8231', '#f7b731', '#20bf6b', '#0fb9b1', '#45aaf2', '#4b7bec', '#a55eea', '#d1d8e0', '#778ca3', '#2d98da', '#3867d6', '#8854d0', '#a5b1c2', '#4b6584']\n//   }\n//   return color\n// }\n\n// https://github.com/koba04/redux-store-structure-patterns/blob/master/patterns/separated-list-store.ts?source=post_page---------------------------#L44\nconst LogReducer = (state = {}, action) => {\n  // console.log(action)\n\n  if (debug) console.log('Reducer action', action)\n  if (debug) console.log('Reducer OLDStore', state)\n\n  if (timer) console.time(action.type)\n  switch (action.type) { // Logs\n    case 'scrollBottom':\n      if (timer) console.timeEnd(action.type)\n      state = {\n        ...state,\n        scrollBottom: action.value\n      }\n      break\n    case 'ADD_DATA':\n      let ChannelColorList = state.settings.get('channelColor') || {}\n\n      for (let i = 0, len = action.value.length; i < len; i++) {\n        if (!ChannelColorList[action.value[i].chan]) ChannelColorList[action.value[i].chan] = getRandomColor()\n        // if (!ChannelColorList[action.value[i].chan]) {\n        //   ChannelColorList[action.value[i].chan] = getRandomColor()\n        //   state.settings.set('channelColor', ChannelColorList)\n        // }\n      }\n\n      // List\n      // const allLogs = state.allLogs.concat(action.value) // 2.008056640625ms\n      const allLogs = state.allLogs.push(...action.value) // 1.783935546875ms\n\n      // Seq\n      // const allLogs = state.allLogs.concat(action.value)\n\n      //\n\n      state.allLogs = allLogs\n      break\n\n    case 'EDIT_DATA':\n      // const _allLogs = state.allLogs.map(item => {\n      //   if (item.chan === action.value.chan && item.username === action.value.username) {\n      //     return {\n      //       ...item,\n      //       tags: action.value.tags\n      //     }\n      //   } else {\n      //     return item\n      //   }\n      // })\n\n      // const index = state.allLogs.findIndex(item => item.chan === action.value.chan && item.username === action.value.username)\n      // console.log(index)\n\n      //  { timestamp: 1573241620058, chan: \"twitch.tv\", msg: \"CONNECTED\" } 0\n      //  { timestamp: 1573241620275, chan: \"lirik\", msg: \"=> JOIN\" } 1\n      // let newArr = state.allLogs\n      state.allLogs.forEach((item, index) => {\n        let i = -1\n        if (item.chan === action.value.chan && item.name === action.value.username) {\n          i = index\n        }\n        if (i !== -1) {\n          const temp = state.allLogs.get(i)\n          state.allLogs = state.allLogs.set(i, Object.assign({}, temp, { tags: action.value.tags }))\n        }\n        return true\n      })\n\n      // let i = 0\n      // while (i < 6) { // while (true) {\n      //   const index = newArr.findIndex(item => (item.chan === action.value.chan && item.name === action.value.username))\n      //   console.log(index, action.value)\n      //   if (index === -1) {\n      //     break\n      //   }\n      //   newArr = newArr.update(index, item => Object.assign({}, item, { tags: action.value.tags }))\n      //   console.log(newArr.get(index))\n\n      //   i += 1\n      // }\n\n      // var obj = {\n      //   username: 'gronkh',\n      //   channel: 'lirik'\n      // }\n\n      // const newArr = state.allLogs.update(index, item => Object.assign({}, item, { tags: action.value.tags }))\n\n      // list.update(2, val => val.toUpperCase())\n\n      // state.allLogs = newArr || state.allLogs\n      break\n\n    case 'ADD_ROOMID':\n      const found = state.channels.findIndex(ele => ele.name === action.value.name)\n      if (found !== -1) {\n        state.channels = state.channels.set(found, action.value)\n        action.value = state.channels\n      }\n      localStorage.setItem('channels', JSON.stringify(action.value.toArray()))\n      return {\n        ...state,\n        channels: action.value\n      }\n\n      // break\n    case 'ADD_CHANNEL': // eslint-disable-line\n      ChannelColorList = state.settings.get('channelColor') || {}\n      if (!(ChannelColorList && ChannelColorList[action.value.name])) ChannelColorList[action.value.name] = getRandomColor()\n      const channels = state.channels.push({ name: action.value.name, roomId: action.value.roomId }) /* roomId is undefined */\n\n      // localStorage.setItem('channels', JSON.stringify(action.value.toArray()))\n      return {\n        ...state,\n        channels: channels\n      }\n      // break\n    case 'CHANNELS': // eslint-disable-line\n      // console.log('CHANNELS', action.value)\n\n      localStorage.setItem('channels', JSON.stringify(action.value.toArray()))\n      return {\n        ...state,\n        channels: action.value\n      }\n\n      // localStorage.setItem('channels', JSON.stringify(action.value.toArray()))\n\n      // // state.channels = action.value\n      // return {\n      //   ...state,\n      //   channels: action.value\n      // }\n      // break\n\n    case 'UPDATE_BADGES':\n      // console.log('UPDATE_BADGES', action, state.badges)\n      state.badges[action.value.key] = Map(action.value.value)\n      return {\n        ...state,\n        badges: state.badges\n      }\n    default:\n  }\n\n  // Filter\n  switch (action.type) { // TODO scrollbottom\n    case 'ADD_FILTER_channel':\n      state.filter = state.filter.set('channel', action.value)\n      break\n    case 'ADD_FILTER_name':\n      state.filter = state.filter.set('name', action.value)\n      break\n    case 'ADD_FILTER_msg':\n      state.filter = state.filter.set('msg', action.value)\n      break\n\n    default:\n  }\n\n  switch (action.type) { // Filter übernehmen\n    case 'ADD_FILTER_name':\n    case 'ADD_FILTER_channel':\n    case 'ADD_FILTER_msg':\n    case 'scrollBottom':\n    case 'ADD_DATA':\n      // TODO: wenn 'state.scrollBottom' === false ist sollte er auch keine Zeilen löschen wenn das 'maxLines' erreicht ist\n      // wenn alle Filter === '' sind sollte er wieder nach unten scrollen\n      // man sollte die Filter benutzen können auch wenn nicht 'state.scrollBottom' === true ist\n      const FILTER = (action.type === 'ADD_FILTER_name' || action.type === 'ADD_FILTER_channel' || action.type === 'ADD_FILTER_msg')\n      if (state.scrollBottom || FILTER) {\n        let { logs, length, scrollBottom } = Filter(state.allLogs, state.filter)\n        const maxLines = Number(state.settings.get('maxLines'))\n\n        if (length > maxLines) { // https://github.com/spddl/react_logein/blob/master/src/store/index.js#L91\n          const _10percent = 10 * maxLines / 100\n          const _maxLines = maxLines - _10percent\n\n          state.allLogs = state.allLogs.takeLast(_maxLines)\n          logs = logs.takeLast(_maxLines)\n          length = _maxLines\n          refreshCache() // Damit der Index der Zeilen als Key für den Cache verwendet werden kann\n        }\n\n        if (timer) console.timeEnd(action.type)\n        return {\n          ...state,\n          scrollBottom: scrollBottom || state.scrollBottom,\n          logs,\n          length\n        }\n      } else {\n        if (state.filter.find(value => value !== '') === undefined) { // Wenn kein Filter gesetzt ist\n          if (timer) console.timeEnd(action.type)\n          return { // nach unten scrollen\n            ...state,\n            // scrollBottom: true,\n            logs: state.allLogs,\n            length: state.allLogs.size\n          }\n        } else {\n          if (timer) console.timeEnd(action.type)\n          return { ...state } // 'FREEZE' Die Daten werden nicht geändert\n        }\n      }\n    default:\n  }\n\n  // Settings\n  switch (action.type) {\n    case 'channelColor':\n      const newColor = action.value\n      action.value = {\n        ...state.settings.get(action.type),\n        ...newColor\n      }\n    case 'modalShow': // eslint-disable-line\n    case 'detectLinks':\n    case 'showBadges':\n    case 'fontClass':\n    case 'fontSize':\n    case 'rowHeight':\n    case 'appShow':\n    case 'hostnameShow':\n    case 'maxLines':\n      if (isNaN(!action.value)) action.value = Number(action.value)\n      const settings = state.settings.set(action.type, action.value)\n      state = {\n        ...state,\n        settings\n      }\n      localStorage.setItem('settings', JSON.stringify(settings.toObject()))\n      break\n    default:\n  }\n\n  if (timer) console.timeEnd(action.type)\n  if (debug) console.log('Reducer NEWStore', state)\n  return state\n}\n\nconst initialState = {\n  allLogs: List(), // https://immutable-js.github.io/immutable-js/docs/#/List\n  logs: List(),\n  length: 0,\n  scrollBottom: true,\n  filter: Map({\n    name: '',\n    level: '',\n    hostname: '',\n    msg: ''\n  }),\n  // settings: Map({ // https://immutable-js.github.io/immutable-js/docs/#/Map\n  settings: Map(JSON.parse(localStorage.getItem('settings')) || {\n    modalShow: false, // true,\n    detectLinks: false,\n    showBadges: true,\n    fontClass: 'inconsolata-font',\n    fontSize: 13,\n    rowHeight: 19,\n    maxLines: 50000,\n    channelColor: {}\n  }),\n  channels: List(JSON.parse(localStorage.getItem('channels')) || []),\n  badges: {\n    global: Map()\n  }\n}\n\nexport const store = createStore(\n  LogReducer,\n  initialState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n// process.env.NODE_ENV !== 'production' && window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n","import React, { PureComponent } from 'react'\r\n\r\nimport AutoSizer from 'react-virtualized/dist/commonjs/AutoSizer'\r\nimport List from 'react-virtualized/dist/commonjs/List'\r\nimport CellMeasurer from 'react-virtualized/dist/commonjs/CellMeasurer'\r\n\r\nimport { cache, refreshCache } from './cache'\r\n\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport '../TableStyles.css'\r\nimport _debounce from 'lodash.debounce'\r\n\r\n// import anchorme from 'anchorme'\r\n\r\nimport ChatLine from './chatLine'\r\n\r\nimport FormatDate from '../helper/FormatDate'\r\n// import formatEmotes from '../helper/formatEmotes'\r\n// import getRandomColor from '../helper/getRandomColor'\r\n// import classifierNumber from '../helper/classifierNumber'\r\n// import LevelColor from '../helper/colors'\r\n\r\nimport { connect } from 'react-redux'\r\nimport { update } from '../redux'\r\n\r\nconst debug = false\r\n\r\n// Limitations and Performance Considerations // https://github.com/bvaughn/react-virtualized/blob/a41ff4857ea08c604db3a64f556ff08135cfbfcc/docs/CellMeasurer.md\r\n// Performance\r\n// Measuring a column's width requires measuring all rows in order to determine the widest occurrence of that column. The same is true in reverse for measuring \r\n// a row's height.For this reason it may not be a good idea to use this HOC for Grids containing a large number of both columns and cells.\r\n\r\n// Since this component measures one cell at a time to determine it's width/height, it will likely be slow if a user skips many rows (or columns) at once \r\n// by scrolling with a scrollbar or via a scroll-to-cell prop. There is (unfortunately) no workaround for this performance limitation at the moment.\r\n\r\nconst getBrowserHiddenProps = () => {\r\n  let hidden, visibilityChange\r\n  if (typeof document.hidden !== 'undefined') {\r\n    hidden = 'hidden'\r\n    visibilityChange = 'visibilitychange'\r\n  } else if (typeof document.msHidden !== 'undefined') {\r\n    hidden = 'msHidden'\r\n    visibilityChange = 'msvisibilitychange'\r\n  } else if (typeof document.webkitHidden !== 'undefined') {\r\n    hidden = 'webkitHidden'\r\n    visibilityChange = 'webkitvisibilitychange'\r\n  }\r\n\r\n  return {\r\n    hidden,\r\n    visibilityChange\r\n  }\r\n}\r\n\r\nclass LogContainer extends PureComponent {\r\n  constructor(props) {\r\n    super(props)\r\n    if (debug) console.log('LogContainer constructor', props)\r\n\r\n    this.bindListRef = React.createRef()\r\n\r\n    this.state = {\r\n      mobile: window.innerWidth < 640,\r\n      scrollBottom: true\r\n    }\r\n\r\n    this.updateFilter = this.updateFilter.bind(this)\r\n\r\n    const { hidden, visibilityChange } = getBrowserHiddenProps() // https://dev.to/hurricaneinteractive/guilt-users-into-coming-back-with-your-document-title-55kn\r\n\r\n    if (typeof document.addEventListener !== 'undefined' && typeof hidden !== 'undefined') {\r\n      document.addEventListener(visibilityChange, () => {\r\n        if (!document[hidden]) {\r\n          refreshCache()\r\n          // if (this.bindListRef.current) {\r\n          //   this.bindListRef.current.forceUpdateGrid()\r\n          // }\r\n        }\r\n      }, false)\r\n    }\r\n  }\r\n\r\n  // bindListRef = ref => { this.list = ref } // eslint-disable-line\r\n\r\n  componentDidMount() {\r\n    if (debug) console.log('componentDidMount()')\r\n    if (this.bindListRef.current) {\r\n      this.bindListRef.current.forceUpdateGrid()\r\n    }\r\n    window.addEventListener('resize', _debounce(() => this.handleResize(window.innerWidth), 100))\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    try {\r\n      window.removeResizeListener('resize', _debounce(() => this.handleResize(window.innerWidth), 100))\r\n    } catch (error) { }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, _prevState, _snapshot) { // https://stackoverflow.com/a/51770376\r\n    if (debug) console.log('componentDidUpdate()')\r\n    // if (debug) console.log(`${this.state.scrollBottom} && ${this.props.length} !== ${prevProps.length}`)\r\n\r\n    if (this.props.length !== prevProps.length) {\r\n      if (this.props.scrollBottom) { // if (this.state.scrollBottom) {\r\n        const length = this.props.length\r\n        this.bindListRef.current.scrollToRow(length)\r\n        // if (debug) console.log(`1-this.bindListRef.current.scrollToRow(${length})`)\r\n        this.setState({ _scrollingToRow: length }, () => {\r\n          this.bindListRef.current.scrollToRow(length)\r\n          // if (debug) console.log(`2-this.bindListRef.current.scrollToRow(${length})`)\r\n        })\r\n      }\r\n\r\n      if (this.props.filter !== prevProps.filter) {\r\n        refreshCache() // jedes mal wenn ein Filter geändert wird\r\n        // für mehr performance bräuchte man eine UUID\r\n      }\r\n    }\r\n  }\r\n\r\n  handleResize = (innerWidth) => {\r\n    if (debug) console.log('handleResize()')\r\n    if (innerWidth < 640) this.setState({ mobile: true })\r\n    else this.setState({ mobile: false })\r\n\r\n    refreshCache()\r\n    if (this.bindListRef.current) {\r\n      this.bindListRef.current.forceUpdateGrid()\r\n    }\r\n  }\r\n\r\n  listenScrollEvent = ({ scrollHeight, scrollTop, clientHeight }) => {\r\n    if (debug) console.log(`listenScrollEvent() if ((${scrollHeight} - ${scrollTop}) === ${clientHeight})`)\r\n    if (scrollHeight === 0 && scrollTop === 0) return\r\n\r\n    if ((scrollHeight - scrollTop) === clientHeight) {\r\n      if (!this.props.scrollBottom) this.props.update(true, 'scrollBottom')\r\n    } else {\r\n      if (this.props.scrollBottom) this.props.update(false, 'scrollBottom')\r\n    }\r\n  }\r\n\r\n  updateFilter(userInput, type) {\r\n    if (debug) console.log('updateFilter()', userInput, type)\r\n    if (this.props.filter[type] === userInput) userInput = ''\r\n    this.props.update(userInput, 'ADD_FILTER_' + type)\r\n  }\r\n\r\n  classifierLevel(row) {\r\n    // const { result, classcolor } = helper.classifierLevel(cellData)\r\n    return <span onClick={() => this.updateFilter(row.chan, 'channel')}>{row.chan}</span>\r\n  }\r\n\r\n  UserNameRenderer = (row) => {\r\n    return <span className='username' onClick={() => this.updateFilter(row.name, 'name')} style={{ color: (row && row.tags && row.tags.color ? row.tags.color : '#EEE') }}>{row.name}</span>\r\n  }\r\n\r\n  decamelize = (text) => {\r\n    return text\r\n      .replace(/([a-z\\d])([A-Z])/g, '$1-$2')\r\n      .replace(/([A-Z]+)([A-Z][a-z\\d]+)/g, '$1-$2')\r\n      .toLowerCase()\r\n  }\r\n\r\n  createBadge = ({ measure, name, badge, tags }) => {\r\n    // console.log('1createBadge', name, badge, tags)\r\n    switch (name) {\r\n      case 'subscriber':\r\n        if (badge.versions[tags.badges.subscriber]) {\r\n          badge = badge.versions[tags.badges.subscriber]\r\n        } else {\r\n          badge = Object.keys(badge.versions)[0]\r\n        }\r\n        break\r\n\r\n      case 'bits':\r\n        if (badge.versions[tags.badges.bits]) {\r\n          badge = badge.versions[tags.badges.bits]\r\n        } else {\r\n          badge = Object.keys(badge.versions)[0]\r\n        }\r\n        break\r\n\r\n      default:\r\n        if (badge.versions['0']) badge = badge.versions['0']\r\n        else if (badge.versions['1']) badge = badge.versions['1']\r\n        else badge = Object.keys(badge.versions)[0]\r\n    }\r\n\r\n    try {\r\n      return <img\r\n        onLoad={measure}\r\n        key={name || ''}\r\n        title={badge.title || ''}\r\n        alt={badge.title || ''}\r\n        aria-label={badge.title || ''}\r\n        className='line'\r\n        src={badge.image_url_1x}\r\n        srcSet={`${badge.image_url_1x} 1x, ${badge.image_url_2x} 2x, ${badge.image_url_4x} 4x`}\r\n      ></img>\r\n    } catch (error) {\r\n      console.warn(error)\r\n      return <img\r\n        onLoad={measure}\r\n        key={name}\r\n        alt={name}\r\n        className='line'\r\n      ></img>\r\n    }\r\n  }\r\n\r\n  createBadgeTags = ({ source, measure }) => {\r\n    let badges = []\r\n    if (source && source.tags && source.tags.badges) {\r\n      for (let name in source.tags.badges) {\r\n        if (source.tags.badges.hasOwnProperty(name)) {\r\n          let element\r\n          name = this.decamelize(name)\r\n          // console.log(name)\r\n\r\n          // https://discuss.dev.twitch.tv/t/how-to-get-emotes-badges-object/18916/2\r\n          if (this.props.badges[source.chan] && this.props.badges[source.chan].has(name)) {\r\n            const badge = this.props.badges[source.chan].get(name) // .versions['0']\r\n            element = this.createBadge({ measure, name, badge, tags: source.tags })\r\n          } else if (this.props.badges.global.has(name)) {\r\n            const badge = this.props.badges.global.get(name) // .versions['1']\r\n            element = this.createBadge({ measure, name, badge, tags: source.tags })\r\n          } else {\r\n            // console.log(this.props.badges.global, name)\r\n            // TODO::twitchcon-na2019 => twitchconNA2019\r\n            element = <span className='line badge badge-primary' key={name} title={name}>{name}</span>\r\n          }\r\n          badges.push(element)\r\n        }\r\n      }\r\n    }\r\n    return badges\r\n  }\r\n\r\n  render() {\r\n    if (debug) console.log('LogContainer RENDER', this.props, '############################################')\r\n\r\n    let scrollButton = ''\r\n    if (!this.props.scrollBottom) { // TODO: nur wenn man auch scrollen kann\r\n      scrollButton = <Button variant='secondary' id='scrollDown' onClick={() => {\r\n        this.bindListRef.current.scrollToRow(this.props.length)\r\n        this.props.update(true, 'scrollBottom')\r\n        refreshCache()\r\n      }}>scroll down</Button>\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div style={{\r\n          height: 'calc(100vh - 60px)',\r\n          fontSize: Number(this.props.settings.get('fontSize')),\r\n          fontFamily: `'${this.props.settings.get('fontClass')}', monospace`\r\n        }} className={'bg-dark text-list'}>\r\n\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n\r\n              <List\r\n                id='list'\r\n                // height={window.innerHeight - 60}\r\n                // width={window.innerWidth - 3}\r\n                height={height}\r\n                width={width - 3}\r\n                overscanColumnCount={0}\r\n                overscanRowCount={10}\r\n                scrollingResetTimeInterval={0}\r\n                ref={this.bindListRef}\r\n                rowCount={this.props.length}\r\n                deferredMeasurementCache={cache}\r\n                onScroll={this.listenScrollEvent}\r\n                rowHeight={cache.rowHeight}\r\n                noRowsRenderer={() => <div><center><i>Nichts gefunden</i></center></div>}\r\n                rowRenderer={({ // https://github.com/bvaughn/react-virtualized/blob/8738097a6ead422f74590d6a631bd5fd83ebc831/docs/List.md#rowrenderer\r\n                  index,       // Index of row\r\n                  // isScrolling, // The List is currently being scrolled\r\n                  // isVisible,   // This row is visible within the List (eg it is not an overscanned row)\r\n                  _key,         // Unique key within array of rendered rows\r\n                  parent,      // Reference to the parent List (instance)\r\n                  style        // Style object to be applied to row (to position it);\r\n                  // This must be passed through to the rendered row element.\r\n                }) => {\r\n                  let key\r\n                  const source = this.props.logs.get(index) // This comes from your list data\r\n                  if (source.tags && source.tags.id) {\r\n                    key = source.tags.id\r\n                  } else {\r\n                    key = _key || index\r\n                  }\r\n\r\n                  const channelStyle = this.props.settings.get('channelColor') && this.props.settings.get('channelColor')[source.chan] ? { backgroundColor: this.props.settings.get('channelColor')[source.chan] } : {}\r\n                  const channel = <><span className='line badge badge-primary' style={channelStyle} onClick={() => this.updateFilter(source.chan, 'channel')}>{source.chan}</span></>\r\n\r\n                  return (\r\n                    <CellMeasurer // https://github.com/bvaughn/react-virtualized/blob/master/docs/CellMeasurer.md\r\n                      cache={cache}\r\n                      columnIndex={0}\r\n                      key={key}\r\n                      parent={parent}\r\n                      rowIndex={index}\r\n                    >\r\n                      {({ measure }) => (\r\n\r\n                        <div\r\n                          key={key}\r\n                          style={{\r\n                            ...style,\r\n                            padding: '.3rem', // '.5rem 2rem',\r\n                            wordWrap: 'break-word',\r\n                            lineHeight: '20px'\r\n                          }}\r\n                        >\r\n                          <span>{FormatDate(source.timestamp, this.state.mobile)}</span>:\r\n                          {channel}\r\n                          {(this.props.settings.get('showBadges') ? this.createBadgeTags({ source, measure }) : '')}\r\n                          <span className='line'>{this.UserNameRenderer(source)}</span>\r\n                          <span className='line'><ChatLine source={source} detectLinks={this.props.settings.get('detectLinks')} measure={measure} /></span>\r\n                        </div>\r\n                      )}\r\n                    </CellMeasurer>\r\n                  )\r\n\r\n                }}\r\n              />\r\n\r\n            )}\r\n          </AutoSizer>\r\n\r\n          {scrollButton}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  state => ({\r\n    scrollBottom: state.scrollBottom,\r\n    logs: state.logs,\r\n    length: state.length,\r\n    filter: state.filter,\r\n    settings: state.settings,\r\n    badges: state.badges\r\n  }), // mapStateToProps\r\n  { update } // mapDispatchToProps\r\n)(LogContainer)\r\n","import React, { PureComponent } from 'react'\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\n\nimport Collapse from 'react-bootstrap/Collapse'\n\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport Alert from 'react-bootstrap/Alert'\n\nimport { connect } from 'react-redux'\nimport { update } from '../redux'\n\nconst debug = false\n\nclass SettingsModal extends PureComponent {\n  constructor (props, context) {\n    super(props, context)\n\n    this.handleShow = this.handleShow.bind(this)\n    this.handleClose = this.handleClose.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n\n    this.state = {\n      restart: false,\n      temp: '',\n      addChannel: ''\n    }\n  }\n\n  handleShow () {\n    this.props.update(true, 'modalShow')\n  }\n\n  handleClose () {\n    this.props.update(false, 'modalShow')\n  }\n\n  handleChange ({ target }) {\n    this.setState({ addChannel: target.value })\n  }\n\n  render () {\n    if (debug) console.log('SettingsContainer RENDER', this.props, '############################################')\n\n    const channelColor = []\n    this.props.channels.forEach((channel) => {\n      channelColor.push(\n        <InputGroup key={channel.name} className='mb-3'>\n          <InputGroup.Prepend>\n            <InputGroup.Text>{channel.name}</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl\n            key={channel.name}\n            type='color'\n            name={channel.name}\n            defaultValue={this.props.settings.get('channelColor')[channel.name]}\n            onChange={({ target }) => {\n              this.props.update({ [target.name]: target.value }, 'channelColor')\n            }}\n          />\n          <InputGroup.Append>\n            <Button\n              variant='outline-danger'\n              onClick={() => {\n                let channels = this.props.channels\n                const index = channels.indexOf(channel) // https://immutable-js.github.io/immutable-js/docs/#/List/indexOf\n                if (index > -1) {\n                  channels = channels.splice(index, 1) // https://immutable-js.github.io/immutable-js/docs/#/List/slice\n                }\n                this.props.update(channels, 'CHANNELS')\n              }}\n            >X</Button>\n          </InputGroup.Append>\n        </InputGroup>\n      )\n    })\n\n    return (\n      <>\n        <Button variant='outline-secondary' onClick={this.handleShow}>\n          <span role='img' aria-label='Gear'>⚙</span>\n        </Button>\n\n        <Modal\n          size='lg'\n          show={this.props.settings.get('modalShow')}\n          onHide={this.handleClose}\n          scrollable\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Einstellungen</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n\n            <Collapse in={this.state.restart}>\n              <div onClick={() => { window.location.reload() }}>\n                <Alert variant='danger'>\n                  Webseite Aktualisieren notwenig (F5)\n                </Alert>\n              </div>\n            </Collapse>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm='1'>Font</Form.Label>\n              <Col sm='11'>\n                <Form.Control\n                  as='select'\n                  name='fontClass'\n                  value={this.props.settings.get('fontClass')}\n                  onChange={({ target }) => { this.props.update(target.value, 'fontClass') }}\n                >\n                  <option value='Arimo'>Arimo</option>\n                  <option value='Hind'>Hind</option>\n                  <option value='IBM Plex Sans'>IBM Plex Sans</option>\n                  <option value='Montserrat'>Montserrat</option>\n                  <option value='Muli'>Muli</option>\n                  <option value='Nunito Sans'>Nunito Sans</option>\n                  <option value='Gothic A1'>Gothic A1</option>\n                  <option value='Roboto'>Roboto</option>\n                  <option value='Rubik'>Rubik</option>\n                  <option value='Source Sans Pro'>Source Sans Pro</option>\n                  <option value='Poppins'>Poppins</option>\n                  <option value='Open Sans'>Open Sans</option>\n                  <option value='Work Sans'>Work Sans</option>\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <InputGroup className='mb-3'>\n              <InputGroup.Prepend>\n                <InputGroup.Text id='basic-addon1'>Font Size</InputGroup.Text>\n              </InputGroup.Prepend>\n\n              <FormControl\n                type='number'\n                placeholder='Font Size'\n                aria-label='Font Size'\n                name='fontSize'\n                onChange={({ target }) => { this.props.update(target.value, target.name) }}\n                defaultValue={this.props.settings.get('fontSize')}\n                min='6'\n                max='30'\n              />\n              <InputGroup.Append>\n                <InputGroup.Text>px</InputGroup.Text>\n              </InputGroup.Append>\n            </InputGroup>\n\n            <InputGroup className='mb-3'>\n              <InputGroup.Prepend>\n                <InputGroup.Text>Row Height</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                type='number'\n                placeholder='Row Height'\n                aria-label='Row Height'\n                name='rowHeight'\n                onChange={({ target }) => {\n                  this.props.update(target.value, target.name)\n                  this.setState({ restart: true })\n                }}\n                defaultValue={this.props.settings.get('rowHeight')}\n                min='3'\n                max='60'\n              />\n              <InputGroup.Append>\n                <InputGroup.Text>px</InputGroup.Text>\n              </InputGroup.Append>\n            </InputGroup>\n\n            <InputGroup className='mb-3'>\n              <InputGroup.Prepend>\n                <InputGroup.Text>Max Lines</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                type='number'\n                placeholder='Max Lines'\n                aria-label='Max Lines'\n                onChange={({ target }) => {\n                  this.props.update(target.value, target.name)\n                  this.setState({ restart: true })\n                }}\n                name='maxLines'\n                defaultValue={this.props.settings.get('maxLines')}\n                min='1'\n              />\n            </InputGroup>\n\n            <div key='checkbox-detectLinks' className='mb-3'>\n              <Form.Check\n                custom\n                type='checkbox'\n                id='checkbox-detectLinks'\n                label='Erkenne URLs/EMails/IP-Adressen und konvertiere zu einem Link'\n                name='detectLinks'\n                defaultChecked={this.props.settings.get('detectLinks')}\n                onChange={({ target }) => { this.props.update(target.checked, target.name) }}\n              />\n            </div>\n\n            <div key='checkbox-showBadges' className='mb-3'>\n              <Form.Check\n                custom\n                type='checkbox'\n                id='checkbox-showBadges'\n                label='Zeige Badges an'\n                name='showBadges'\n                defaultChecked={this.props.settings.get('showBadges')}\n                onChange={({ target }) => { this.props.update(target.checked, target.name) }}\n              />\n            </div>\n\n            {channelColor}\n\n            <InputGroup className='mb-3'>\n              <FormControl // https://reactjs.org/docs/forms.html#controlled-components\n                placeholder='add Channel'\n                aria-label='add Channel'\n                aria-describedby='basic-addon9'\n                // defaultValue={this.temp}\n                value={this.state.addChannel}\n                onChange={this.handleChange}\n\n                // value={this.state.addChannel}\n                // onChange={({ target }) => {\n                //   // this.setState({ addChannel: target.value })\n                //   this.setState({ addChannel: { name: target.value, roomId: undefined } })\n                // }}\n                // TODO: onEnter: () =>\n              />\n              <InputGroup.Append>\n                <Button\n                  variant='outline-success'\n                  onClick={() => {\n                    // const channels = this.props.channels.push({ name: this.state.addChannel.toLowerCase(), roomId: undefined })\n                    this.props.update({ name: this.state.addChannel.toLowerCase(), roomId: undefined }, 'ADD_CHANNEL') // TODO: Gleich mit neue Farbe übergeben\n                    this.setState({ addChannel: '' })\n                  }}\n                >Add</Button>\n              </InputGroup.Append>\n            </InputGroup>\n\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant='secondary' onClick={this.handleClose}>\n              Schliessen\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    settings: state.settings,\n    channels: state.channels\n  }), // mapStateToProps\n  { update } // mapDispatchToProps\n)(SettingsModal)\n","import React, { PureComponent } from 'react'\r\n\r\nimport Navbar from 'react-bootstrap/Navbar'\r\n\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar'\r\n\r\nimport Form from 'react-bootstrap/Form'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\n// import classifierLevel from '../helper/classifierLevel'\r\n// import classifierNumber from '../helper/classifierNumber'\r\n// import LevelColor from '../helper/colors'\r\n\r\nimport SettingsModal from './Settings'\r\nimport { addUrlProps, UrlQueryParamTypes, configureUrlQuery } from 'react-url-query' // https://github.com/pbeshai/react-url-query\r\n\r\nimport { createBrowserHistory } from 'history'\r\n\r\nimport { compose } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { update } from '../redux'\r\n\r\nconst debug = false\r\n\r\nfunction debounce (fn, delay) {\r\n  let timer = null\r\n  return function () {\r\n    let context = this\r\n    let args = arguments\r\n    clearTimeout(timer)\r\n    timer = setTimeout(function () {\r\n      fn.apply(context, args)\r\n    }, delay)\r\n  }\r\n}\r\n\r\nconst history = createBrowserHistory()\r\n\r\nconfigureUrlQuery({\r\n  history,\r\n  addChangeHandlers: true\r\n})\r\n\r\nconst urlPropsQueryConfig = {\r\n  // QueryApp: { type: UrlQueryParamTypes.string, queryParam: 'app' },\r\n  // QueryHostname: { type: UrlQueryParamTypes.string, queryParam: 'hostname' },\r\n  // QueryLvl: { type: UrlQueryParamTypes.string, queryParam: 'lvl' },\r\n  QueryChannel: { type: UrlQueryParamTypes.string, queryParam: 'channel' },\r\n  QueryName: { type: UrlQueryParamTypes.string, queryParam: 'name' },\r\n  QueryMsg: { type: UrlQueryParamTypes.string, queryParam: 'msg' }\r\n}\r\n\r\nclass TopBar extends PureComponent {\r\n  constructor (props) {\r\n    super(props)\r\n    if (debug) console.log('TopBar', props)\r\n\r\n    this.state = {}\r\n    this.timer = {}\r\n    this.updateFilter = this.updateFilter.bind(this)\r\n    // this.updateDebounceFilter = debounce(this.updateDebounceFilter, 150) // https://stackoverflow.com/a/48702173\r\n    this.updateDebounceFilter = debounce(this.updateFilter, 150) // https://stackoverflow.com/a/48702173\r\n\r\n    this.onWheelHandler = this.onWheelHandler.bind(this)\r\n    this.onTouchMoveHandler = this.onTouchMoveHandler.bind(this)\r\n    this.onTouchStartHandler = this.onTouchStartHandler.bind(this)\r\n  }\r\n\r\n  componentDidMount () {\r\n    if (this.props.QueryChannel) this.props.update(this.props.QueryHostname, 'ADD_FILTER_channel')\r\n    if (this.props.QueryName) this.props.update(this.props.QueryApp, 'ADD_FILTER_name')\r\n    if (this.props.QueryMsg) this.props.update(this.props.QueryMsg, 'ADD_FILTER_msg')\r\n    // if (this.props.QueryHostname) this.props.update(this.props.QueryHostname, 'ADD_FILTER_hostname')\r\n    // if (this.props.QueryLvl) {\r\n    //   const lvl = isNaN(this.props.QueryLvl) ? classifierLevel(this.props.QueryLvl.toUpperCase()) : this.props.QueryLvl\r\n    //   this.props.update(lvl, 'ADD_FILTER_level')\r\n    // }\r\n  }\r\n\r\n  updateFilter (userInput, type) {\r\n    this.props.update(userInput, 'ADD_FILTER_' + type)\r\n    switch (type) {\r\n      case 'channel': this.props.onChangeQueryChannel(userInput); break\r\n      case 'name': this.props.onChangeQueryName(userInput); break\r\n      case 'msg': this.props.onChangeQueryMsg(userInput); break\r\n      // case 'hostname': this.props.onChangeQueryHostname(userInput); break\r\n      // case 'level': this.props.onChangeQueryLvl(userInput); break\r\n      default:\r\n    }\r\n  }\r\n\r\n  // updateDebounceFilter (userInput, type) {\r\n  //   this.props.update(userInput, 'ADD_FILTER_' + type)\r\n  //   switch (type) {\r\n  //     case 'name': this.props.onChangeQueryApp(userInput); break\r\n  //     case 'hostname': this.props.onChangeQueryHostname(userInput); break\r\n  //     case 'level': this.props.onChangeQueryLvl(userInput); break\r\n  //     case 'msg': this.props.onChangeQueryMsg(userInput); break\r\n  //     default:\r\n  //   }\r\n  // }\r\n\r\n  updateFilterNext (type, up) {\r\n    if (debug) console.log('updateFilterNext', { type, up })\r\n    switch (type) {\r\n      // case 'hostname':\r\n      //   const HostanameArray = Object.keys(this.props.settings.get('hostnameColor'))\r\n      //   if (HostanameArray.length !== 1) {\r\n      //     const index = HostanameArray.indexOf(this.props.filter.get('hostname'))\r\n      //     let nextIndex\r\n      //     if (up) {\r\n      //       nextIndex = index - 1\r\n      //       if (HostanameArray[nextIndex] === undefined) nextIndex = HostanameArray.length - 1\r\n      //     } else {\r\n      //       nextIndex = index + 1\r\n      //       if (HostanameArray[nextIndex] === undefined) nextIndex = 0\r\n      //     }\r\n      //     this.updateFilter(HostanameArray[nextIndex], type)\r\n      //   }\r\n      //   break\r\n\r\n      case 'channel':\r\n        const ChannelArray = Object.keys(this.props.settings.get('channelColor'))\r\n        console.log({ ChannelArray })\r\n\r\n        if (ChannelArray.length !== 1) {\r\n          const index = ChannelArray.indexOf(this.props.filter.get('channel'))\r\n          let nextIndex\r\n          if (up) {\r\n            nextIndex = index - 1\r\n            if (ChannelArray[nextIndex] === undefined) nextIndex = ChannelArray.length - 1\r\n          } else {\r\n            nextIndex = index + 1\r\n            if (ChannelArray[nextIndex] === undefined) nextIndex = 0\r\n          }\r\n          this.updateFilter(ChannelArray[nextIndex], type)\r\n        }\r\n        break\r\n\r\n      case 'name':\r\n        const AppArray = Object.keys(this.props.settings.get('appColor')) // TODO: das kommt direkt aus der Line\r\n        if (AppArray.length !== 1) {\r\n          const index = AppArray.indexOf(this.props.filter.get('name'))\r\n          let nextIndex\r\n          if (up) {\r\n            nextIndex = index - 1\r\n            if (AppArray[nextIndex] === undefined) nextIndex = AppArray.length - 1\r\n          } else {\r\n            nextIndex = index + 1\r\n            if (AppArray[nextIndex] === undefined) nextIndex = 0\r\n          }\r\n          this.updateFilter(AppArray[nextIndex], type)\r\n        }\r\n        break\r\n\r\n        // case 'level':\r\n        //   let level = this.props.filter.get('level')\r\n        //   if (up) level = level - 1\r\n        //   else level = level + 1\r\n        //   this.updateFilter(level, type)\r\n        //   break\r\n\r\n      default:\r\n        console.warn('updateFilterNext:', type)\r\n    }\r\n  }\r\n\r\n  onWheelHandler ({ deltaY }, type) {\r\n    let up\r\n    if (deltaY > 0) up = false\r\n    else up = true\r\n    this.updateFilterNext(type, up)\r\n  }\r\n\r\n  onTouchMoveHandler ({ touches }, type) {\r\n    if (!this.state.touchReset) {\r\n      const t = touches[0]\r\n      let up\r\n      if (t.pageY - this.state.touchY > 0) up = false\r\n      else up = true\r\n      this.setState({ touchReset: true })\r\n      this.updateFilterNext(type, up)\r\n    }\r\n  }\r\n\r\n  onTouchStartHandler ({ touches }) {\r\n    const t = touches[0]\r\n    this.setState({ touchY: t.pageY, touchReset: false })\r\n  }\r\n\r\n  render () {\r\n    if (debug) console.log('TopbarContainer RENDER', this.props, '############################################')\r\n\r\n    let channel = ''\r\n    if (this.props.filter.get('channel') !== '') {\r\n      const appStyle = this.props.settings.get('channelColor') && this.props.settings.get('channelColor')[this.props.filter.get('channel')] ? { backgroundColor: this.props.settings.get('channelColor')[this.props.filter.get('channel')] } : {}\r\n      channel = <Badge\r\n        variant='secondary'\r\n        ref='app'\r\n        style={{ ...appStyle, margin: '0 5px 5px', touchAction: 'pan-down' }}\r\n        onClick={() => this.updateFilter('', 'channel')}\r\n        onWheel={(e) => this.onWheelHandler(e, 'channel')}\r\n        onTouchMove={(e) => this.onTouchMoveHandler(e, 'channel')}\r\n        onTouchStart={this.onTouchStartHandler}\r\n      >{this.props.filter.get('channel')}</Badge>\r\n\r\n      this.props.onChangeQueryChannel(this.props.filter.get('channel'))\r\n    }\r\n\r\n    let name = ''\r\n    if (this.props.filter.get('name') !== '') {\r\n      const appStyle = this.props.settings.get('appColor') && this.props.settings.get('appColor')[this.props.filter.get('name')] ? { color: this.props.settings.get('appColor')[this.props.filter.get('name')] } : {}\r\n      name = <Badge\r\n        variant='secondary'\r\n        ref='app'\r\n        style={{ ...appStyle, margin: '0 5px 5px', touchAction: 'pan-down' }}\r\n        onClick={() => this.updateFilter('', 'name')}\r\n        onWheel={(e) => this.onWheelHandler(e, 'name')}\r\n        onTouchMove={(e) => this.onTouchMoveHandler(e, 'name')}\r\n        onTouchStart={this.onTouchStartHandler}\r\n      >{this.props.filter.get('name')}</Badge>\r\n\r\n      this.props.onChangeQueryName(this.props.filter.get('name'))\r\n    }\r\n\r\n    // let lvl = ''\r\n    // if (this.props.filter.get('level') !== '') {\r\n    //   const level = classifierNumber(this.props.filter.get('level'))\r\n    //   lvl = <Badge\r\n    //     variant='secondary'\r\n    //     className={'line'}\r\n    //     ref='lvl'\r\n    //     style={{ ...LevelColor[level], margin: '0 5px 5px', touchAction: 'pan-down' }}\r\n    //     onClick={() => this.updateFilter('', 'level')}\r\n    //     onWheel={(e) => this.onWheelHandler(e, 'level')}\r\n    //     onTouchMove={(e) => this.onTouchMoveHandler(e, 'level')}\r\n    //     onTouchStart={this.onTouchStartHandler}\r\n    //     dangerouslySetInnerHTML={{ __html: level }}\r\n    //   />\r\n\r\n    //   this.props.onChangeQueryLvl(level)\r\n    // }\r\n\r\n    // let hostname = ''\r\n    // if (this.props.filter.get('hostname') !== '') {\r\n    //   const hostnameStyle = this.props.settings.get('hostnameColor') && this.props.settings.get('hostnameColor')[this.props.filter.get('hostname')] ? { color: this.props.settings.get('hostnameColor')[this.props.filter.get('hostname')] } : {}\r\n    //   hostname = <Badge\r\n    //     variant='secondary'\r\n    //     ref='hostname'\r\n    //     style={{ ...hostnameStyle, margin: '0 5px 5px', touchAction: 'pan-down' }}\r\n    //     onClick={() => this.updateFilter('', 'hostname')}\r\n    //     onWheel={(e) => this.onWheelHandler(e, 'hostname')}\r\n    //     onTouchMove={(e) => this.onTouchMoveHandler(e, 'hostname')}\r\n    //     onTouchStart={this.onTouchStartHandler}\r\n    //     dangerouslySetInnerHTML={{ __html: this.props.filter.get('hostname') }}\r\n    //   />\r\n\r\n    //   this.props.onChangeQueryHostname(this.props.filter.get('hostname'))\r\n    // }\r\n\r\n    return (\r\n      <Navbar bg='dark' variant='dark' style={{ height: '60px' }} collapseOnSelect>\r\n        <Navbar.Brand>\r\n          <Navbar.Text className='d-lg-none'>\r\n            <img src={require('../TwitchGlitchWhite.svg')} alt='logo' width='30' height='30' className='d-inline-block align-top' />\r\n          </Navbar.Text>\r\n          <Navbar.Text className='d-none d-lg-block'>\r\n            <img src={require('../TwitchGlitchWhite.svg')} alt='logo' width='30' height='30' className='d-inline-block align-top' style={{ marginRight: '5px' }} />\r\n            TwitchChatViewer\r\n          </Navbar.Text>\r\n        </Navbar.Brand>\r\n\r\n        <Navbar.Text>\r\n          <span className='d-lg-none'>{this.props.length}</span>\r\n          <span className='d-none d-lg-block'>{this.props.length} lines</span>\r\n        </Navbar.Text>\r\n\r\n        <Navbar.Collapse className='justify-content-center'>\r\n          <Navbar.Text>\r\n            <ButtonToolbar>\r\n              {channel}\r\n              {/* {hostname} */}\r\n              {name}\r\n              {/* {lvl} */}\r\n            </ButtonToolbar>\r\n          </Navbar.Text>\r\n        </Navbar.Collapse>\r\n\r\n        <Navbar.Collapse className='justify-content-end'>\r\n          <Form\r\n            inline\r\n            onSubmit={e => {\r\n              e.preventDefault()\r\n              this.updateFilter(this.refs.search.value, 'msg')\r\n            }}\r\n          >\r\n            <FormControl\r\n              type='text'\r\n              placeholder='Search'\r\n              className='mr-sm-2 btn-dark'\r\n              ref='search'\r\n              defaultValue={this.props.filter.get('msg')}\r\n              onChange={() => this.updateDebounceFilter(this.refs.search.value, 'msg')}\r\n            />\r\n          </Form>\r\n          <SettingsModal />\r\n        </Navbar.Collapse>\r\n\r\n      </Navbar>\r\n    )\r\n  }\r\n}\r\n\r\nconst enhance = compose(\r\n  connect(\r\n    state => ({\r\n      length: state.length,\r\n      filter: state.filter,\r\n      settings: state.settings\r\n    }), // mapStateToProps\r\n    { update } // mapDispatchToProps\r\n  ),\r\n  addUrlProps({ urlPropsQueryConfig })\r\n)\r\nexport default enhance(TopBar)\r\n","/* globals fetch:true */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","/* globals fetch:true */\r\n\r\nimport { connect } from 'react-redux'\r\nimport { update } from '../redux'\r\n\r\nimport difference from 'lodash.difference'\r\n\r\nlet tempChannels\r\n\r\nexport const _connect = ({ update, badges, channels }) => {\r\n  // console.log('badges_connect', badges, channels)\r\n\r\n  const StoreChannel = channels.toArray().filter(chan => chan.roomId) // filtere undefined roomId raus\r\n\r\n  const ChannelState = tempChannels\r\n  // console.log({ StoreChannel, ChannelState })\r\n\r\n  const _join = difference(StoreChannel, ChannelState)\r\n  if (_join.length) {\r\n    // console.log('badges_connectjoin', _join)\r\n  }\r\n\r\n  const _part = difference(ChannelState, StoreChannel)\r\n  if (_part.length) {\r\n    // console.log('badges_connectpart', _part)\r\n    // https://badges.twitch.tv/v1/badges/channels/gronkh/display\r\n  }\r\n\r\n  if (badges.global.size === 0) {\r\n    fetch('https://badges.twitch.tv/v1/badges/global/display')\r\n      .then(res => res.json())\r\n      .then(res => update({ key: 'global', value: res.badge_sets }, 'UPDATE_BADGES'))\r\n  }\r\n\r\n  StoreChannel.forEach(value => {\r\n    if (!badges[value.name]) {\r\n      fetch(`https://badges.twitch.tv/v1/badges/channels/${value.roomId}/display`)\r\n        .then(res => res.json())\r\n        .then(res => {\r\n          update({ key: value.name, value: res.badge_sets }, 'UPDATE_BADGES')\r\n        })\r\n    }\r\n  })\r\n\r\n  tempChannels = StoreChannel\r\n  return null\r\n}\r\n\r\nexport default connect(\r\n  state => ({\r\n    channels: state.channels,\r\n    badges: state.badges\r\n  }), // mapStateToProps\r\n  { update } // mapDispatchToProps\r\n)(_connect)\r\n","// import protobuf from 'protobufjs' // https://www.npmjs.com/package/protobufjs\r\n\r\nimport { connect } from 'react-redux'\r\nimport { update } from '../redux'\r\n\r\n// import getRandomColor from '../helper/getRandomColor'\r\n\r\nimport difference from 'lodash.difference'\r\n\r\nimport TwitchJs from 'twitch-js'\r\n\r\n// const formatEmotes = (text, emotes) => {\r\n//   if (emotes === []) return text\r\n//   text = text.split('')\r\n//   for (let i = 0, len = emotes.length; i < len; i++) {\r\n//     // A cookie associated with a cross-site resource at https://jtvnw.net/ was set without the `SameSite` attribute. A future release of Chrome will only deliver cookies with cross-site requests if they are set with `SameSite=None` and `Secure`. You can review cookies in developer tools under Application>Storage>Cookies and see more details at https://www.chromestatus.com/feature/5088147346030592 and https://www.chromestatus.com/feature/5633521622188032.\r\n//     text.splice(emotes[i].start, emotes[i].end, '<img class=\"emoticon\" src=\"//static-cdn.jtvnw.net/emoticons/v1/' + emotes[i].id + '/1.0\">')\r\n//   }\r\n//   return text.join('')\r\n// }\r\n\r\nconst { chat } = new TwitchJs({ token: '', username: `justinfan${Math.floor((Math.random() * 80000) + 1000)}`, chat: { joinTimeout: 60000 }, log: { level: 0 } })\r\n\r\n// // eslint-disable-next-line no-control-regex\r\n// const ACTION = /(\\x01ACTION )(.*)(\\x01)/\r\n\r\nexport const _disconnect = () => {\r\n  chat.disconnect()\r\n}\r\n\r\nconst connected = () => chat._readyState === 3\r\n\r\nexport const _connect = ({ update, channels }) => {\r\n  // console.log('_readyState', chat._readyState)\r\n  // console.log(channels.toArray())\r\n  if (connected()) { // https://github.com/twitch-devs/twitch-js/blob/083d8626c8fdfb19ff147a59f60d487b712be06c/src/Chat/index.js\r\n    const StoreChannel = channels.toArray().map(chan => chan.name)\r\n    const ChannelState = Object.keys(chat._channelState).map(chan => chan.substr(1))\r\n\r\n    const _joins = difference(StoreChannel, ChannelState)\r\n    if (_joins.length) {\r\n      for (const _join of _joins) {\r\n        chat.join(_join).then(data => {\r\n          update({ name: _join, roomId: data.roomState.roomId }, 'ADD_ROOMID')\r\n          update([{ timestamp: +new Date(), chan: _join, msg: '=> JOIN' }], 'ADD_DATA')\r\n        })\r\n      }\r\n    }\r\n\r\n    const _parts = difference(ChannelState, StoreChannel)\r\n    if (_parts.length) {\r\n      // console.log('part', _parts)\r\n      for (const _part of _parts) {\r\n        chat.join(_part).then(() => {\r\n          update([{ timestamp: +new Date(), chan: _part, msg: '<= LEAVE' }], 'ADD_DATA')\r\n        })\r\n      }\r\n    }\r\n  } else if (chat._readyState === 0) {\r\n    chat.connect()\r\n      .then(async () => {\r\n        // console.log('Connect ...')\r\n        // await Promise.all(channels.toArray().map(channel => chat.join(channel.name))).then(data => console.log(data))\r\n        channels.toArray().map(channel => chat.join(channel.name).then(_ => update([{ timestamp: +new Date(), chan: channel.name, msg: '=> JOIN' }], 'ADD_DATA')))\r\n      })\r\n      .catch(err => {\r\n        console.warn(err)\r\n      })\r\n\r\n    chat.on('*', ({ channel, command, message, tags, timestamp, username, _raw }) => {\r\n      timestamp = timestamp || +new Date()\r\n      const chan = channel && channel.substr(1)\r\n      const name = username\r\n      let msg\r\n      switch (command) {\r\n        case 'PRIVMSG':\r\n          // msg = formatEmotes(message, tags.emotes)\r\n          msg = message\r\n          // if (tags.color === null) {\r\n          //   tags.color = getRandomColor()\r\n          // }\r\n          // if (msg.toLowerCase().indexOf('@' + chan) !== -1) {\r\n          //   tags.attention = true\r\n          // }\r\n          // const found = ACTION.exec(msg)\r\n          // if (found !== null) {\r\n          //   msg = found[2]\r\n          //   tags.action = true\r\n          // }\r\n          update([{ timestamp, chan, name, msg, tags }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'USERNOTICE':\r\n          update([{ timestamp, chan, msg: tags.systemMsg }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'CLEARMSG': // https://dev.twitch.tv/docs/irc/tags#clearmsg-twitch-tags\r\n          // Single message removal on a channel. This is triggered via /delete <target-msg-id> on IRC.\r\n          console.log('CLEARMSG', { channel, msg, tags, timestamp, username })\r\n          update([{ timestamp, chan, msg: `REMOVE ${username}, ${tags.targetMsgId}` }], 'ADD_DATA')\r\n          update({ timestamp, chan, username, tags }, 'EDIT_DATA')\r\n          break\r\n\r\n        case 'CLEARCHAT': // https://dev.twitch.tv/docs/irc/tags#clearchat-twitch-tags\r\n          // Temporary or permanent ban on a channel.\r\n          if (tags.banDuration) { // ban-duration (Optional) Duration of the timeout, in seconds. If omitted, the ban is permanent.\r\n            msg = `TIMEOUT: ${username}, ${tags.banDuration + 's' + (tags.banReason ? ', ' + tags.banReason : '')}`\r\n          } else {\r\n            msg = `BAN: ${username}, banReason: ${tags.banReason}`\r\n          }\r\n          // channel: \"#forsen\"\r\n          // message: undefined\r\n          // msg: \"TIMEOUT: omegamk19, 1264s\"\r\n          // tags: { banDuration: 1264, roomId: \"22484632\", targetUserId: \"465461503\", tmiSentTs: \"1573230720731\", banReason: undefined }\r\n          // timestamp: Fri Nov 08 2019 17: 32: 00 GMT + 0100(Mitteleuropäische Normalzeit) { }\r\n          // username: \"omegamk19\"\r\n          console.log('CLEARCHAT', { channel, msg, tags, timestamp, username })\r\n          update([{ timestamp, chan, username: 'twitch.tv', msg }], 'ADD_DATA')\r\n          update({ timestamp, chan, username, tags }, 'EDIT_DATA')\r\n          break\r\n\r\n        case 'JOIN':\r\n        //   update([{ timestamp, chan: '-', msg: '=> JOIN' }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'PART':\r\n        //   update([{ timestamp, chan: '-', msg: '<= PART' }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'CONNECTED':\r\n          update([{ timestamp, chan: 'twitch.tv', msg: 'CONNECTED' }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'NOT_READY':\r\n          update([{ timestamp, chan: 'twitch.tv', msg: 'TODO: NOT_READY' }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'CONNECTING':\r\n          update([{ timestamp, chan: 'twitch.tv', msg: 'TODO: CONNECTING' }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'RECONNECTING':\r\n          update([{ timestamp, chan: 'twitch.tv', msg: 'TODO: RECONNECTING' }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'DISCONNECTING':\r\n          update([{ timestamp, chan: 'twitch.tv', msg: 'TODO: DISCONNECTING' }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'DISCONNECTED':\r\n          update([{ timestamp, chan: 'twitch.tv', msg: 'TODO: DISCONNECTED' }], 'ADD_DATA')\r\n          break\r\n\r\n          // \"HOSTTARGET\"\r\n          // { channel: \"#tsm_viss\", command: \"HOSTTARGET\", message: undefined, tags: { … }, timestamp: Sat Nov 02 2019 00: 00: 23 GMT + 0100(Mitteleuropäische Normalzeit), … }\r\n          // channel: \"#tsm_viss\"\r\n          // command: \"HOSTTARGET\"\r\n          // message: undefined\r\n          // tags: { }\r\n          // timestamp: Sat Nov 02 2019 00: 00: 23 GMT + 0100(Mitteleuropäische Normalzeit) { }\r\n          // username: \"halifax\"\r\n\r\n        case 'NOTICE':\r\n          update([{ timestamp, chan: channel, msg: message }], 'ADD_DATA')\r\n          // { channel: \"#tsm_viss\", command: \"NOTICE\", message: \"Now hosting Halifax.\", tags: { … }, timestamp: Sat Nov 02 2019 00: 00: 23 GMT + 0100(Mitteleuropäische Normalzeit), … }\r\n          // channel: \"#tsm_viss\"\r\n          // command: \"NOTICE\"\r\n          // message: \"Now hosting Halifax.\"\r\n          // tags: { msgId: \"host_on\" }\r\n          // timestamp: Sat Nov 02 2019 00: 00: 23 GMT + 0100(Mitteleuropäische Normalzeit) { }\r\n          // username: \"tmi.twitch.tv\"\r\n\r\n          // { channel: \"#eosandy\", command: \"NOTICE\", message: \"Now hosting Shurjoka.\", tags: { … }, timestamp: Tue Nov 05 2019 17: 15: 04 GMT + 0100(Mitteleuropäische Normalzeit), … }\r\n          // channel: \"#eosandy\"\r\n          // command: \"NOTICE\"\r\n          // message: \"Now hosting Shurjoka.\"\r\n          // tags: { msgId: \"host_on\" }\r\n          // timestamp: Tue Nov 05 2019 17: 15: 04 GMT + 0100(Mitteleuropäische Normalzeit) { }\r\n          // username: \"tmi.twitch.tv\"\r\n          // __proto__: Object\r\n          console.log('NOTICE', { channel, command, message, tags, timestamp, username })\r\n          break\r\n\r\n        case '001': ; break\r\n        case '002': ; break\r\n        case '003': ; break\r\n        case '004': ; break\r\n        case '353': ; break\r\n        case '366': ; break\r\n        case '372': ; break\r\n        case '375': ; break\r\n        case '376': ; break\r\n        case 'CAP': ; break\r\n        case 'MODE': ; break\r\n        case 'PING': ; break\r\n        case 'ROOMSTATE': ; break\r\n\r\n        case 'PARSE_ERROR_ENCOUNTERED': ; break\r\n\r\n        default:\r\n          console.log('default', { channel, command, message, tags, timestamp, username })\r\n      }\r\n    })\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport default connect(\r\n  state => ({\r\n    channels: state.channels\r\n  }), // mapStateToProps\r\n  // state => ({ settings: state.settings }), // mapStateToProps\r\n  // state => ({ }), // mapStateToProps\r\n  { update } // mapDispatchToProps\r\n)(_connect)\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Log from './components/Log'\nimport TopBar from './components/TopBar'\nimport * as serviceWorker from './serviceWorker'\n\nimport DataService from './data/twitch'\nimport BadgesService from './data/bages'\nimport { Provider } from 'react-redux'\nimport { store } from './redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <TopBar />\n    <Log />\n    <DataService />\n    <BadgesService />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}