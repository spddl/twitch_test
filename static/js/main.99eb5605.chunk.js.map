{"version":3,"sources":["TwitchGlitchWhite.svg","../node_modules/better-queue/lib sync /^better/-queue/-.*$","components/cache.js","helper/formatEmotes.js","helper/getRandomColor.js","components/chatLine.js","helper/FormatDate.js","redux/filter.js","redux/index.js","components/Log.js","components/Settings.js","components/TopBar.js","serviceWorker.js","data/badges.js","data/twitch.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","cache","CellMeasurerCache","minHeight","defaultHeight","fixedWidth","keyMapper","rowIndex","refreshCache","rowHeight","_minHeight","_defaultHeight","clearAll","splitWords","RegExp","msg","emotes","measure","badges","bttvBadges","ffzBadges","chan","bttvObj","ffzObj","word","exec","globalbttv","has","push","badge","get","name","start","index","end","length","globalffz","i","split","empty","Array","apply","map","slice","concat","splice","key","onLoad","className","title","alt","src","srcSet","urls","randomcolor","Math","floor","random","color","ACTION","App","props","bagdes","source","tags","timestamp","toLowerCase","indexOf","styleColor","found","banDuration","textDecoration","textDecorationColor","banReason","formatEmotes","getRandomColor","detectLinks","anchorme","truncate","attributes","value","banText","this","banMsg","style","fontWeight","Component","zeroPad2","num","zeroPad3","_FormatDate","Datenow","mobile","date","Date","HH","getHours","mm","getMinutes","ss","getSeconds","SSS","getMilliseconds","DD","getDate","MM","getMonth","YYYY","getFullYear","FormatDate","cacheInput","cacheOutput","result","_memoizedFormatDate","debug","timer","Filter","allLogs","filter","console","log","undefined","find","logs","size","scrollBottom","time","CHANNEL","NAME","MSG","item","timeEnd","update","type","initialState","List","Map","level","hostname","settings","JSON","parse","localStorage","getItem","modalShow","showBadges","fontClass","fontSize","maxLines","channelColor","channels","global","store","createStore","state","action","ChannelColorList","len","forEach","username","temp","set","Object","assign","findIndex","ele","setItem","stringify","toArray","roomId","FILTER","Number","_10percent","_maxLines","takeLast","newColor","isNaN","toObject","window","__REDUX_DEVTOOLS_EXTENSION__","getBrowserHiddenProps","hidden","visibilityChange","document","msHidden","webkitHidden","LogContainer","handleResize","innerWidth","setState","bindListRef","current","forceUpdateGrid","listenScrollEvent","scrollHeight","scrollTop","clientHeight","UserNameRenderer","row","onClick","updateFilter","decamelize","text","replace","createBadge","versions","subscriber","bits","aria-label","image_url_1x","image_url_2x","image_url_4x","error","warn","createBadgeTags","hasOwnProperty","element","React","createRef","bind","addEventListener","_debounce","removeResizeListener","prevProps","_prevState","_snapshot","scrollToRow","_scrollingToRow","userInput","scrollButton","Button","variant","height","fontFamily","width","overscanColumnCount","overscanRowCount","scrollingResetTimeInterval","ref","rowCount","deferredMeasurementCache","onScroll","noRowsRenderer","rowRenderer","_key","parent","channelStyle","backgroundColor","channel","columnIndex","padding","wordWrap","lineHeight","PureComponent","connect","SettingsModal","context","handleShow","handleClose","handleChange","restart","addChannel","target","InputGroup","Prepend","Text","FormControl","defaultValue","onChange","Append","role","Modal","show","onHide","scrollable","Header","closeButton","Title","Body","Collapse","in","location","reload","Alert","Form","Group","as","Row","Label","column","sm","Col","Control","placeholder","min","max","Check","custom","label","defaultChecked","checked","aria-describedby","Footer","history","createBrowserHistory","configureUrlQuery","addChangeHandlers","urlPropsQueryConfig","QueryChannel","UrlQueryParamTypes","string","queryParam","QueryName","QueryMsg","TopBar","updateDebounceFilter","fn","delay","args","arguments","clearTimeout","setTimeout","debounce","onWheelHandler","onTouchMoveHandler","onTouchStartHandler","QueryHostname","QueryApp","onChangeQueryChannel","onChangeQueryName","onChangeQueryMsg","up","ChannelArray","nextIndex","AppArray","deltaY","updateFilterNext","touches","touchReset","pageY","touchY","t","appStyle","Badge","margin","touchAction","onWheel","onTouchMove","onTouchStart","Navbar","bg","collapseOnSelect","Brand","require","marginRight","ButtonToolbar","inline","onSubmit","preventDefault","refs","search","Settings","enhance","compose","addUrlProps","Boolean","match","tempChannels","chat","TwitchJs","token","joinTimeout","_readyState","StoreChannel","ChannelState","_channelState","substr","_joins","difference","_join","join","then","data","roomState","_parts","_part","a","_","catch","err","on","command","message","_raw","systemMsg","targetMsgId","fetch","res","status","statusText","json","badge_sets","resEmotes","sets","default_sets","emoticons","room","ReactDOM","render","Log","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.99eb5605.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/TwitchGlitchWhite.5f80eca1.svg\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 441;","import { CellMeasurerCache } from 'react-virtualized'\r\n\r\nexport const cache = new CellMeasurerCache({ // https://github.com/bvaughn/react-virtualized/blob/master/docs/CellMeasurer.md#cellmeasurercache\r\n  minHeight: 19,\r\n  defaultHeight: 19,\r\n  fixedWidth: true,\r\n  keyMapper: rowIndex => rowIndex\r\n})\r\n\r\nexport const refreshCache = function (rowHeight = 19) {\r\n  // console.log('refreshCache()')\r\n  // console.trace()\r\n\r\n  cache._minHeight = rowHeight\r\n  cache._defaultHeight = rowHeight\r\n  cache.clearAll()\r\n}\r\n","import React from 'react'\r\n\r\nconst splitWords = RegExp(/\\w+/, 'g')\r\n\r\nexport default ({ msg, emotes, measure, id, badges, bttvBadges, ffzBadges, chan }) => {\r\n  // console.log({ msg, emotes })\r\n\r\n  const bttvObj = []\r\n  const ffzObj = []\r\n  if (bttvBadges || ffzBadges) {\r\n    let word\r\n    while ((word = splitWords.exec(msg)) !== null) {\r\n      if (bttvBadges) {\r\n        if (badges && badges.globalbttv && badges.globalbttv.has(word[0])) {\r\n          bttvObj.push({\r\n            badge: badges.globalbttv.get(word[0]),\r\n            name: word[0],\r\n            start: word.index,\r\n            end: word.index + word[0].length\r\n          })\r\n        } else if (badges && badges[`${chan}-bttv`] && badges[`${chan}-bttv`].has(word[0])) {\r\n          bttvObj.push({\r\n            badge: badges[`${chan}-bttv`].get(word[0]),\r\n            name: word[0],\r\n            start: word.index,\r\n            end: word.index + word[0].length\r\n          })\r\n        }\r\n      }\r\n\r\n      if (ffzBadges) {\r\n        if (badges && badges.globalffz && badges.globalffz.has(word[0])) {\r\n          ffzObj.push({\r\n            badge: badges.globalffz.get(word[0]),\r\n            name: word[0],\r\n            start: word.index,\r\n            end: word.index + word[0].length\r\n          })\r\n        } else if (badges && badges[`${chan}-ffz`] && badges[`${chan}-ffz`].has(word[0])) {\r\n          ffzObj.push({\r\n            badge: badges[`${chan}-ffz`].get(word[0]),\r\n            name: word[0],\r\n            start: word.index,\r\n            end: word.index + word[0].length\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // if (!(emotes.length || bttvObj.length || ffzObj.length)) {\r\n  //   return msg\r\n  // }\r\n\r\n  if (emotes.length === 0 && bttvObj.length === 0 && ffzObj.length === 0) {\r\n    return msg\r\n  }\r\n\r\n  // if (emotes.length === 0 && bttvObj.length === 0) {\r\n  //   return msg\r\n  // }\r\n\r\n  // if (emotes.length === 0) {\r\n  //   return msg\r\n  // }\r\n\r\n  // msg = msgBttvEmote\r\n  // console.log(msgBttvEmote)\r\n\r\n  // msg = emotes.map((emote, i) => {\r\n  //   const img = <img\r\n  //     key={`${id}-${emote.id}-${i}`}\r\n  //     // onLoad={measure}\r\n  //     className='emoticon'\r\n  //     alt={emote.id}\r\n  //     src={'//static-cdn.jtvnw.net/emoticons/v1/' + emote.id + '/1.0'}\r\n  //     srcSet={`//static-cdn.jtvnw.net/emoticons/v1/${emote.id}/2 2x, //static-cdn.jtvnw.net/emoticons/v1/${emote.id}/4 4x`}\r\n  //   />\r\n  //   const start = emote.start\r\n  //   const ende = emote.end + 1\r\n  //   const left = msg.slice(0, start)\r\n  //   const right = msg.slice(ende)\r\n  //   return (<span key={`${emote.id}-${i}`}>{left.concat(img, right)}</span>)\r\n  // })\r\n  // chatLine.js: 25 emotes: 0.002685546875ms\r\n  // chatLine.js: 25 emotes: 0.00390625ms\r\n  // chatLine.js: 25 emotes: 0.004150390625ms\r\n  // chatLine.js: 25 emotes: 0.003173828125ms\r\n  // chatLine.js: 25 emotes: 0.057861328125ms\r\n  // chatLine.js: 25 emotes: 0.004150390625ms\r\n  // chatLine.js: 25 emotes: 0.0029296875ms\r\n  // chatLine.js: 25 emotes: 0.003173828125ms\r\n  // chatLine.js: 25 emotes: 0.03515625ms\r\n\r\n  // // // // // // // // // // // // // // // // // //\r\n\r\n  // for (let i = emotes.length; i--;) {\r\n  //   msg.splice(\r\n  //     emotes[i].start,\r\n  //     emotes[i].end + 1,\r\n  //     <img\r\n  //       key={`${id}-${emotes[i].id}-${i}`}\r\n  //       // onLoad={measure}\r\n  //       className='emoticon'\r\n  //       alt={emotes[i].id}\r\n  //       src={'//static-cdn.jtvnw.net/emoticons/v1/' + emotes[i].id + '/1.0'}\r\n  //       srcSet={`//static-cdn.jtvnw.net/emoticons/v1/${emotes[i].id}/2 2x, //static-cdn.jtvnw.net/emoticons/v1/${emotes[i].id}/4 4x`}\r\n  //     />\r\n  //   )\r\n  // }\r\n  // chatLine.js: 25 emotes: 0.003173828125ms\r\n  // chatLine.js: 25 emotes: 0.027099609375ms\r\n  // chatLine.js: 25 emotes: 0.00390625ms\r\n  // chatLine.js: 25 emotes: 0.004150390625ms\r\n  // chatLine.js: 25 emotes: 0.00390625ms\r\n  // chatLine.js: 25 emotes: 0.0029296875ms\r\n  // chatLine.js: 25 emotes: 0.003173828125ms\r\n  // chatLine.js: 25 emotes: 0.002685546875ms\r\n  // chatLine.js: 25 emotes: 0.004150390625ms\r\n  // chatLine.js: 25 emotes: 0.029052734375ms\r\n  // chatLine.js: 25 emotes: 0.0029296875ms\r\n\r\n  // // // // // // // // // // // // // // // // // //\r\n\r\n  msg = msg.split('') // TODO problem für BTTV und FTZ\r\n\r\n  for (const i in emotes) { // https://github.com/tmijs/tmi.js/issues/11\r\n    const e = emotes[i]\r\n    const length = e.end - e.start\r\n    const empty = Array.apply(null, new Array(length + 1)).map(function () { return '' })\r\n    msg = msg.slice(0, e.start).concat(empty).concat(msg.slice(e.end + 1, msg.length))\r\n    msg.splice(e.start, 1, <img\r\n      key={`${id}-${e.id}-${i}`}\r\n      onLoad={measure}\r\n      className='emoticon'\r\n      title={'Twitch Emoticon'}\r\n      alt={e.id}\r\n      src={`//static-cdn.jtvnw.net/emoticons/v1/${e.id}/1.0`}\r\n      srcSet={`//static-cdn.jtvnw.net/emoticons/v1/${e.id}/2.0 2x, //static-cdn.jtvnw.net/emoticons/v1/${e.id}/4.0 4x`}\r\n    />)\r\n  }\r\n\r\n  if (bttvBadges) {\r\n    for (const i in bttvObj) { // https://github.com/tmijs/tmi.js/issues/11\r\n      const e = bttvObj[i]\r\n      const length = e.end - e.start\r\n      const empty = Array.apply(null, new Array(length + 1)).map(function () { return '' })\r\n      msg = msg.slice(0, e.start).concat(empty).concat(msg.slice(e.end + 1, msg.length))\r\n      msg.splice(e.start, 1,\r\n        <img\r\n          key={`${e.badge.code}-${e.badge.id}-${i}`}\r\n          onLoad={measure}\r\n          className='emoticon'\r\n          title={'BTTV: ' + e.name}\r\n          alt={e.badge.code}\r\n          src={`//cdn.betterttv.net/emote/${e.badge.id}/1x`}\r\n          srcSet={`//cdn.betterttv.net/emote/${e.badge.id}/2x 2x, //cdn.betterttv.net/emote/${e.badge.id}/3x 3x`}\r\n        />)\r\n    }\r\n  }\r\n\r\n  if (ffzBadges) {\r\n    for (const i in ffzObj) { // https://github.com/tmijs/tmi.js/issues/11\r\n      const e = ffzObj[i]\r\n      const length = e.end - e.start\r\n      const empty = Array.apply(null, new Array(length + 1)).map(function () { return '' })\r\n      msg = msg.slice(0, e.start).concat(empty).concat(msg.slice(e.end + 1, msg.length))\r\n      msg.splice(e.start, 1,\r\n        <img\r\n          key={`${e.badge.name}-${e.badge.id}-${i}`}\r\n          onLoad={measure}\r\n          className='emoticon'\r\n          title={'FFZ: ' + e.badge.name}\r\n          alt={e.badge.name}\r\n          src={`${e.badge.urls[1]}`}\r\n          srcSet={`${e.badge.urls[2]} 2x, ${e.badge.urls[4]} 4x`}\r\n        />)\r\n    }\r\n  }\r\n  // chatLine.js: 25 emotes: 0.003173828125ms\r\n  // chatLine.js: 25 emotes: 0.051025390625ms\r\n  // chatLine.js: 25 emotes: 0.003173828125ms\r\n  // chatLine.js: 25 emotes: 0.049072265625ms\r\n  // chatLine.js: 25 emotes: 0.004150390625ms\r\n  // chatLine.js: 25 emotes: 0.071044921875ms\r\n  // chatLine.js: 25 emotes: 0.004150390625ms\r\n  // chatLine.js: 25 emotes: 0.054931640625ms\r\n  // chatLine.js: 25 emotes: 0.002685546875ms\r\n  // chatLine.js: 25 emotes: 0.004150390625ms\r\n\r\n  return msg\r\n}\r\n","let randomcolor = ['#fc5c65', '#fd9644', '#fed330', '#26de81', '#2bcbba', '#eb3b5a', '#fa8231', '#f7b731', '#20bf6b', '#0fb9b1', '#45aaf2', '#4b7bec', '#a55eea', '#d1d8e0', '#778ca3', '#2d98da', '#3867d6', '#8854d0', '#a5b1c2', '#4b6584'] // https://flatuicolors.com/\r\n\r\nexport default () => {\r\n  const index = Math.floor(Math.random() * randomcolor.length)\r\n  const color = randomcolor[index]\r\n  randomcolor.splice(index, 1)\r\n  if (!randomcolor.length) {\r\n    randomcolor = ['#fc5c65', '#fd9644', '#fed330', '#26de81', '#2bcbba', '#eb3b5a', '#fa8231', '#f7b731', '#20bf6b', '#0fb9b1', '#45aaf2', '#4b7bec', '#a55eea', '#d1d8e0', '#778ca3', '#2d98da', '#3867d6', '#8854d0', '#a5b1c2', '#4b6584']\r\n  }\r\n  return color\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport anchorme from 'anchorme'\r\n\r\n// import FormatDate from '../helper/FormatDate'\r\nimport formatEmotes from '../helper/formatEmotes'\r\nimport getRandomColor from '../helper/getRandomColor'\r\n\r\n// eslint-disable-next-line no-control-regex\r\nconst ACTION = /(\\x01ACTION )(.*)(\\x01)/\r\n\r\nclass App extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    // console.log(props)\r\n\r\n    this.bagdes = props.bagdes\r\n\r\n    this.bttvBadges = props.bttvBadges\r\n    this.ffzBadges = props.ffzBadges\r\n\r\n    this.chan = props.source.chan\r\n    this.msg = props.source.msg\r\n    this.name = props.source.name\r\n    this.tags = props.source.tags\r\n    this.timestamp = props.source.timestamp\r\n\r\n    if (this.msg && this.msg.toLowerCase().indexOf('@' + this.chan) !== -1) {\r\n      this.styleColor = { color: 'red' }\r\n    }\r\n\r\n    const found = ACTION.exec(this.msg)\r\n    if (found !== null) {\r\n      this.msg = found[2]\r\n      this.styleColor = { color: this.tags.color }\r\n    }\r\n\r\n    if (this.tags && this.tags.banDuration) { // ban-duration (Optional) Duration of the timeout, in seconds. If omitted, the ban is permanent.\r\n      this.styleColor = {\r\n        textDecoration: 'line-through',\r\n        textDecorationColor: 'rgba(255, 193, 7, 0.8)'\r\n      }\r\n    } else if (this.tags && this.tags.banReason) {\r\n      this.styleColor = {\r\n        textDecoration: 'line-through',\r\n        textDecorationColor: 'rgba(255, 0, 0, 0.8)'\r\n      }\r\n    }\r\n\r\n    // this._msg = this.msg\r\n    if (this.tags && this.tags.emotes) {\r\n      this.msg = formatEmotes({\r\n        msg: this.msg,\r\n        emotes: this.tags.emotes,\r\n        measure: props.measure,\r\n        id: this.tags.id,\r\n        badges: this.bagdes,\r\n        bttvBadges: this.bttvBadges,\r\n        ffzBadges: this.ffzBadges,\r\n        chan: this.chan\r\n      })\r\n    }\r\n\r\n    // globalbttv TODO\r\n    // this._msg = findBttvEmote({ msg: this._msg, chan: this.chan, badges: this.bagdes, measure: props.measure })\r\n\r\n    // console.log(this.msg)\r\n    // console.log(this._msg)\r\n\r\n    if (this.tags && this.tags.color === true) {\r\n      this.tags.color = getRandomColor()\r\n    }\r\n\r\n    if (props.detectLinks) {\r\n      this.msg = anchorme(this.msg, {\r\n        truncate: [30, 15],\r\n        attributes: [{ name: 'target', value: '_blank' }]\r\n      })\r\n    }\r\n  }\r\n\r\n  render () {\r\n    let banText\r\n    if (this.tags && this.tags.banMsg) {\r\n      banText = <span style={{ fontWeight: 'bold' }} className='line'>{this.tags.banMsg}</span>\r\n    }\r\n\r\n    return (\r\n     <><span style={this.styleColor}>{this.msg}</span>{banText}</>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","const zeroPad2 = (num) => num < 10 ? '0' + num : num\r\nconst zeroPad3 = (num) => {\r\n  if (num < 10) return '00' + num\r\n  else if (num < 100) return '0' + num\r\n  else return num\r\n}\r\nconst _FormatDate = (Datenow = 0, mobile = false) => {\r\n  const date = new Date(Datenow)\r\n\r\n  // 'HH:mm:ss.SSS'\r\n  const HH = zeroPad2(date.getHours())\r\n  const mm = zeroPad2(date.getMinutes())\r\n  const ss = zeroPad2(date.getSeconds())\r\n  const SSS = zeroPad3(date.getMilliseconds())\r\n\r\n  if (!mobile) {\r\n    // 'YYYY-MM-DD HH:mm:ss.SSS'\r\n    const DD = zeroPad2(date.getDate())\r\n    const MM = zeroPad2(date.getMonth())\r\n    const YYYY = date.getFullYear()\r\n    return `${YYYY}-${MM}-${DD} ${HH}:${mm}:${ss}.${SSS}`\r\n  }\r\n\r\n  return `${HH}:${mm}:${ss}.${SSS}`\r\n}\r\n\r\nconst _memoizedFormatDate = (Datenow = 0, mobile) => {\r\n  let cacheInput = 0\r\n  let cacheOutput = ''\r\n  return (Datenow, mobile) => {\r\n    if (cacheInput === Datenow) {\r\n      return cacheOutput\r\n    } else {\r\n      const result = _FormatDate(Datenow, mobile)\r\n      cacheInput = Datenow\r\n      cacheOutput = result\r\n      return result\r\n    }\r\n  }\r\n}\r\n\r\nconst FormatDate = _memoizedFormatDate()\r\nexport default FormatDate\r\n","const debug = false\r\nconst timer = false\r\n\r\nexport default function Filter (allLogs, filter) {\r\n  if (debug) console.log('>>>> Filter', allLogs, filter)\r\n  // if (debug) console.log(`::: Filter name '${filter.get('name')}', level '${filter.get('level')}', hostname '${filter.get('hostname')}', msg '${filter.get('msg')}'`)\r\n  if (debug) console.log(`::: Filter channel '${filter.get('channel')}', name '${filter.get('name')}', msg '${filter.get('msg')}'`)\r\n\r\n  if (filter.find(value => value !== '') === undefined) { // if (filter.get('name') === '' && filter.get('level') === '' && filter.get('hostname') === '' && filter.get('msg') === '') {\r\n    if (debug) console.log('Filter return { logs: allLogs, length: allLogs.size }')\r\n    return { logs: allLogs, length: allLogs.size, scrollBottom: true }\r\n  }\r\n  if (timer) console.time('Filter')\r\n  // let LEVEL\r\n  // if (filter.get('level') !== '') {\r\n  //   LEVEL = filter.get('level') + 1\r\n  // }\r\n\r\n  const CHANNEL = filter.get('channel')\r\n\r\n  // filter = filter.set('msg', filter.get('msg').toLowerCase())\r\n  const NAME = filter.get('name')\r\n  // const HOSTNAME = filter.get('hostname')\r\n  const MSG = filter.get('msg').toLowerCase()\r\n\r\n  // if (debug) console.log(`::: Filter name '${NAME}', level '${LEVEL}', hostname '${HOSTNAME}', msg '${MSG}'`)\r\n  if (debug) console.log(`::: Filter channel '${CHANNEL}', name '${NAME}', msg '${MSG}'`)\r\n\r\n  const logs = allLogs.filter(item => {\r\n    // if (LEVEL && item.level !== LEVEL) { // genaue übereinstimmung\r\n    //   return false\r\n    // }\r\n\r\n    // if (LEVEL && item.level >= LEVEL) { // ab diesem Level\r\n    //   return false\r\n    // }\r\n\r\n    if (CHANNEL && item.chan !== CHANNEL) {\r\n      return false\r\n    }\r\n\r\n    if (NAME && item.name !== NAME) {\r\n      return false\r\n    }\r\n\r\n    // if (HOSTNAME && item.hostname !== HOSTNAME) {\r\n    //   return false\r\n    // }\r\n\r\n    if (MSG && item.msg.toLowerCase().indexOf(MSG) === -1) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  })\r\n  if (timer) console.timeEnd('Filter')\r\n  return { logs: logs, length: logs.size }\r\n}\r\n\r\n// export default function Filter (allLogs, filter) {\r\n//   if (debug) console.log('>>>> Filter', allLogs, filter)\r\n//   if (debug) console.log(`::: Filter name '${filter.get('name')}', level '${filter.get('level')}', hostname '${filter.get('hostname')}', msg '${filter.get('msg')}'`)\r\n\r\n//   if (filter.has('name') && filter.has('level') && filter.has('hostname') && filter.has('msg')) {\r\n//     if (debug) console.log('Filter return { logs: allLogs, length: allLogs.size }')\r\n//     return { logs: allLogs, length: allLogs.size, scrollBottom: true }\r\n//   }\r\n\r\n//   if (debug) console.time('Filter')\r\n//   let LEVEL\r\n//   if (filter.has('level')) {\r\n//     LEVEL = filter.get('level') + 1\r\n//   }\r\n\r\n//   const NAME = filter.get('name')\r\n//   const HOSTNAME = filter.get('hostname')\r\n//   const MSG = filter.get('msg').toLowerCase()\r\n\r\n//   if (debug) console.log(`::: Filter name '${NAME}', level '${LEVEL}', hostname '${HOSTNAME}', msg '${MSG}'`)\r\n//   const logs = allLogs.filter(item => {\r\n//     // if (filter.level && item.level !== filter.level) return false // genaue übereinstimmung\r\n\r\n//     if (LEVEL && item.level >= LEVEL) return false // ab diesem Level\r\n\r\n//     if (NAME && item.name !== NAME) return false\r\n\r\n//     if (HOSTNAME && item.hostname !== HOSTNAME) return false\r\n\r\n//     if (MSG && item.msg.toLowerCase().indexOf(MSG) === -1) return false\r\n\r\n//     return true\r\n//   })\r\n//   if (debug) console.timeEnd('Filter')\r\n//   return { logs: logs, length: logs.size }\r\n// }\r\n","/* globals localStorage:true */\n\nimport { createStore } from 'redux'\nimport { List, Map } from 'immutable' // https://immutable-js.github.io/immutable-js/\nimport Filter from './filter'\nimport { refreshCache } from '../components/cache'\n\nimport getRandomColor from '../helper/getRandomColor'\n\nconst debug = false\nconst timer = false\n\nexport const update = function (value, type) {\n  if (debug) console.log('update()', { type, value })\n  return ({ type, value })\n}\n\n// let randomcolor = ['#fc5c65', '#fd9644', '#fed330', '#26de81', '#2bcbba', '#eb3b5a', '#fa8231', '#f7b731', '#20bf6b', '#0fb9b1', '#45aaf2', '#4b7bec', '#a55eea', '#d1d8e0', '#778ca3', '#2d98da', '#3867d6', '#8854d0', '#a5b1c2', '#4b6584'] // https://flatuicolors.com/\n// const getRandomColor = () => {\n//   const index = Math.floor(Math.random() * randomcolor.length)\n//   const color = randomcolor[index]\n//   randomcolor.splice(index, 1)\n//   if (!randomcolor.length) {\n//     randomcolor = ['#fc5c65', '#fd9644', '#fed330', '#26de81', '#2bcbba', '#eb3b5a', '#fa8231', '#f7b731', '#20bf6b', '#0fb9b1', '#45aaf2', '#4b7bec', '#a55eea', '#d1d8e0', '#778ca3', '#2d98da', '#3867d6', '#8854d0', '#a5b1c2', '#4b6584']\n//   }\n//   return color\n// }\n\n// https://github.com/koba04/redux-store-structure-patterns/blob/master/patterns/separated-list-store.ts?source=post_page---------------------------#L44\nconst LogReducer = (state = {}, action) => {\n  // console.log(action)\n\n  if (debug) console.log('Reducer action', action)\n  if (debug) console.log('Reducer OLDStore', state)\n\n  if (timer) console.time(action.type)\n  switch (action.type) { // Logs\n    case 'scrollBottom':\n      if (timer) console.timeEnd(action.type)\n      state = {\n        ...state,\n        scrollBottom: action.value\n      }\n      break\n    case 'ADD_DATA':\n      let ChannelColorList = state.settings.get('channelColor') || {}\n\n      for (let i = 0, len = action.value.length; i < len; i++) {\n        if (!ChannelColorList[action.value[i].chan]) ChannelColorList[action.value[i].chan] = getRandomColor()\n        // if (!ChannelColorList[action.value[i].chan]) {\n        //   ChannelColorList[action.value[i].chan] = getRandomColor()\n        //   state.settings.set('channelColor', ChannelColorList)\n        // }\n      }\n\n      // List\n      // const allLogs = state.allLogs.concat(action.value) // 2.008056640625ms\n      const allLogs = state.allLogs.push(...action.value) // 1.783935546875ms\n\n      // Seq\n      // const allLogs = state.allLogs.concat(action.value)\n\n      //\n\n      state.allLogs = allLogs\n      break\n\n    case 'EDIT_DATA':\n      // console.time('EDIT_DATA')\n      state.allLogs.forEach((item, index) => {\n        let i = -1\n        if (item.chan === action.value.chan && item.name === action.value.username) {\n          i = index\n        }\n        if (i !== -1) {\n          const temp = state.allLogs.get(i)\n          state.allLogs = state.allLogs.set(i, Object.assign({}, temp, { tags: action.value.tags }))\n        }\n        return true\n      })\n      // console.timeEnd('EDIT_DATA')\n      break\n\n    case 'ADD_ROOMID':\n      const found = state.channels.findIndex(ele => ele.name === action.value.name)\n      if (found !== -1) {\n        state.channels = state.channels.set(found, action.value)\n        action.value = state.channels\n      }\n      localStorage.setItem('channels', JSON.stringify(action.value.toArray()))\n      return {\n        ...state,\n        channels: action.value\n      }\n\n      // break\n    case 'ADD_CHANNEL': // eslint-disable-line\n      ChannelColorList = state.settings.get('channelColor') || {}\n      if (!(ChannelColorList && ChannelColorList[action.value.name])) ChannelColorList[action.value.name] = getRandomColor()\n      const channels = state.channels.push({ name: action.value.name, roomId: action.value.roomId }) /* roomId is undefined */\n\n      // localStorage.setItem('channels', JSON.stringify(action.value.toArray()))\n      return {\n        ...state,\n        channels: channels\n      }\n      // break\n    case 'CHANNELS': // eslint-disable-line\n      // console.log('CHANNELS', action.value)\n\n      localStorage.setItem('channels', JSON.stringify(action.value.toArray()))\n      return {\n        ...state,\n        channels: action.value\n      }\n\n      // localStorage.setItem('channels', JSON.stringify(action.value.toArray()))\n\n      // // state.channels = action.value\n      // return {\n      //   ...state,\n      //   channels: action.value\n      // }\n      // break\n\n    case 'UPDATE_BADGES':\n      // console.log('UPDATE_BADGES', action, state.badges)\n      state.badges[action.value.key] = Map(action.value.value)\n      return {\n        ...state,\n        badges: state.badges\n      }\n    default:\n  }\n\n  // Filter\n  switch (action.type) { // TODO scrollbottom\n    case 'ADD_FILTER_channel':\n      state.filter = state.filter.set('channel', action.value)\n      break\n    case 'ADD_FILTER_name':\n      state.filter = state.filter.set('name', action.value)\n      break\n    case 'ADD_FILTER_msg':\n      state.filter = state.filter.set('msg', action.value)\n      break\n\n    default:\n  }\n\n  switch (action.type) { // Filter übernehmen\n    case 'ADD_FILTER_name':\n    case 'ADD_FILTER_channel':\n    case 'ADD_FILTER_msg':\n    case 'scrollBottom':\n    case 'ADD_DATA':\n      // TODO: wenn 'state.scrollBottom' === false ist sollte er auch keine Zeilen löschen wenn das 'maxLines' erreicht ist\n      // wenn alle Filter === '' sind sollte er wieder nach unten scrollen\n      // man sollte die Filter benutzen können auch wenn nicht 'state.scrollBottom' === true ist\n      const FILTER = (action.type === 'ADD_FILTER_name' || action.type === 'ADD_FILTER_channel' || action.type === 'ADD_FILTER_msg')\n      if (state.scrollBottom || FILTER) {\n        let { logs, length, scrollBottom } = Filter(state.allLogs, state.filter)\n        const maxLines = Number(state.settings.get('maxLines'))\n\n        if (length > maxLines) { // https://github.com/spddl/react_logein/blob/master/src/store/index.js#L91\n          const _10percent = 10 * maxLines / 100\n          const _maxLines = maxLines - _10percent\n\n          state.allLogs = state.allLogs.takeLast(_maxLines)\n          logs = logs.takeLast(_maxLines)\n          length = _maxLines\n          refreshCache() // Damit der Index der Zeilen als Key für den Cache verwendet werden kann\n        }\n\n        if (timer) console.timeEnd(action.type)\n        return {\n          ...state,\n          scrollBottom: scrollBottom || state.scrollBottom,\n          logs,\n          length\n        }\n      } else {\n        if (state.filter.find(value => value !== '') === undefined) { // Wenn kein Filter gesetzt ist\n          if (timer) console.timeEnd(action.type)\n          return { // nach unten scrollen\n            ...state,\n            // scrollBottom: true,\n            logs: state.allLogs,\n            length: state.allLogs.size\n          }\n        } else {\n          if (timer) console.timeEnd(action.type)\n          return { ...state } // 'FREEZE' Die Daten werden nicht geändert\n        }\n      }\n    default:\n  }\n\n  // Settings\n  switch (action.type) {\n    case 'channelColor':\n      const newColor = action.value\n      action.value = {\n        ...state.settings.get(action.type),\n        ...newColor\n      }\n    case 'modalShow': // eslint-disable-line\n    case 'detectLinks':\n    case 'showBadges':\n    case 'bttvBadges':\n    case 'ffzBadges':\n    case 'fontClass':\n    case 'fontSize':\n    case 'rowHeight':\n    case 'appShow':\n    case 'hostnameShow':\n    case 'maxLines':\n      if (isNaN(!action.value)) action.value = Number(action.value)\n      const settings = state.settings.set(action.type, action.value)\n      state = {\n        ...state,\n        settings\n      }\n      localStorage.setItem('settings', JSON.stringify(settings.toObject()))\n      break\n    default:\n  }\n\n  if (timer) console.timeEnd(action.type)\n  if (debug) console.log('Reducer NEWStore', state)\n  return state\n}\n\nconst initialState = {\n  allLogs: List(), // https://immutable-js.github.io/immutable-js/docs/#/List\n  logs: List(),\n  length: 0,\n  scrollBottom: true,\n  filter: Map({\n    name: '',\n    level: '',\n    hostname: '',\n    msg: ''\n  }),\n  // settings: Map({ // https://immutable-js.github.io/immutable-js/docs/#/Map\n  settings: Map(JSON.parse(localStorage.getItem('settings')) || {\n    modalShow: false, // true,\n    detectLinks: false,\n    showBadges: true,\n    bttvBadges: true,\n    ffzBadges: true,\n    fontClass: 'inconsolata-font',\n    fontSize: 13,\n    rowHeight: 19,\n    maxLines: 50000,\n    channelColor: {}\n  }),\n  channels: List(JSON.parse(localStorage.getItem('channels')) || []),\n  badges: {\n    global: Map()\n  }\n}\n\nexport const store = createStore(\n  LogReducer,\n  initialState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n// process.env.NODE_ENV !== 'production' && window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n","import React, { PureComponent } from 'react'\r\n\r\nimport AutoSizer from 'react-virtualized/dist/commonjs/AutoSizer'\r\nimport List from 'react-virtualized/dist/commonjs/List'\r\nimport CellMeasurer from 'react-virtualized/dist/commonjs/CellMeasurer'\r\n\r\nimport { cache, refreshCache } from './cache'\r\n\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport '../TableStyles.css'\r\nimport _debounce from 'lodash.debounce'\r\n\r\n// import anchorme from 'anchorme'\r\n\r\nimport ChatLine from './chatLine'\r\n\r\nimport FormatDate from '../helper/FormatDate'\r\n// import formatEmotes from '../helper/formatEmotes'\r\n// import getRandomColor from '../helper/getRandomColor'\r\n// import classifierNumber from '../helper/classifierNumber'\r\n// import LevelColor from '../helper/colors'\r\n\r\nimport { connect } from 'react-redux'\r\nimport { update } from '../redux'\r\n\r\nconst debug = false\r\n\r\n// Limitations and Performance Considerations // https://github.com/bvaughn/react-virtualized/blob/a41ff4857ea08c604db3a64f556ff08135cfbfcc/docs/CellMeasurer.md\r\n// Performance\r\n// Measuring a column's width requires measuring all rows in order to determine the widest occurrence of that column. The same is true in reverse for measuring \r\n// a row's height.For this reason it may not be a good idea to use this HOC for Grids containing a large number of both columns and cells.\r\n\r\n// Since this component measures one cell at a time to determine it's width/height, it will likely be slow if a user skips many rows (or columns) at once \r\n// by scrolling with a scrollbar or via a scroll-to-cell prop. There is (unfortunately) no workaround for this performance limitation at the moment.\r\n\r\nconst getBrowserHiddenProps = () => {\r\n  let hidden, visibilityChange\r\n  if (typeof document.hidden !== 'undefined') {\r\n    hidden = 'hidden'\r\n    visibilityChange = 'visibilitychange'\r\n  } else if (typeof document.msHidden !== 'undefined') {\r\n    hidden = 'msHidden'\r\n    visibilityChange = 'msvisibilitychange'\r\n  } else if (typeof document.webkitHidden !== 'undefined') {\r\n    hidden = 'webkitHidden'\r\n    visibilityChange = 'webkitvisibilitychange'\r\n  }\r\n\r\n  return {\r\n    hidden,\r\n    visibilityChange\r\n  }\r\n}\r\n\r\nclass LogContainer extends PureComponent {\r\n  constructor(props) {\r\n    super(props)\r\n    if (debug) console.log('LogContainer constructor', props)\r\n\r\n    this.bindListRef = React.createRef()\r\n\r\n    this.state = {\r\n      mobile: window.innerWidth < 640,\r\n      scrollBottom: true\r\n    }\r\n\r\n    this.updateFilter = this.updateFilter.bind(this)\r\n\r\n    const { hidden, visibilityChange } = getBrowserHiddenProps() // https://dev.to/hurricaneinteractive/guilt-users-into-coming-back-with-your-document-title-55kn\r\n\r\n    if (typeof document.addEventListener !== 'undefined' && typeof hidden !== 'undefined') {\r\n      document.addEventListener(visibilityChange, () => {\r\n        if (!document[hidden]) {\r\n          refreshCache()\r\n          // if (this.bindListRef.current) {\r\n          //   this.bindListRef.current.forceUpdateGrid()\r\n          // }\r\n        }\r\n      }, false)\r\n    }\r\n  }\r\n\r\n  // bindListRef = ref => { this.list = ref } // eslint-disable-line\r\n\r\n  componentDidMount() {\r\n    if (debug) console.log('componentDidMount()')\r\n    if (this.bindListRef.current) {\r\n      this.bindListRef.current.forceUpdateGrid()\r\n    }\r\n    window.addEventListener('resize', _debounce(() => this.handleResize(window.innerWidth), 100))\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    try {\r\n      window.removeResizeListener('resize', _debounce(() => this.handleResize(window.innerWidth), 100))\r\n    } catch (error) { }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, _prevState, _snapshot) { // https://stackoverflow.com/a/51770376\r\n    if (debug) console.log('componentDidUpdate()')\r\n    // if (debug) console.log(`${this.state.scrollBottom} && ${this.props.length} !== ${prevProps.length}`)\r\n\r\n    if (this.props.length !== prevProps.length) {\r\n      if (this.props.scrollBottom) { // if (this.state.scrollBottom) {\r\n        const length = this.props.length\r\n        this.bindListRef.current.scrollToRow(length)\r\n        // if (debug) console.log(`1-this.bindListRef.current.scrollToRow(${length})`)\r\n        this.setState({ _scrollingToRow: length }, () => {\r\n          this.bindListRef.current.scrollToRow(length)\r\n          // if (debug) console.log(`2-this.bindListRef.current.scrollToRow(${length})`)\r\n        })\r\n      }\r\n\r\n      if (this.props.filter !== prevProps.filter) {\r\n        refreshCache() // jedes mal wenn ein Filter geändert wird\r\n        // für mehr performance bräuchte man eine UUID\r\n      }\r\n    }\r\n  }\r\n\r\n  handleResize = (innerWidth) => {\r\n    if (debug) console.log('handleResize()')\r\n    if (innerWidth < 640) this.setState({ mobile: true })\r\n    else this.setState({ mobile: false })\r\n\r\n    refreshCache()\r\n    if (this.bindListRef.current) {\r\n      this.bindListRef.current.forceUpdateGrid()\r\n    }\r\n  }\r\n\r\n  listenScrollEvent = ({ scrollHeight, scrollTop, clientHeight }) => {\r\n    if (debug) console.log(`listenScrollEvent() if ((${scrollHeight} - ${scrollTop}) === ${clientHeight})`)\r\n    if (scrollHeight === 0 && scrollTop === 0) return\r\n\r\n    if ((scrollHeight - scrollTop) === clientHeight) {\r\n      if (!this.props.scrollBottom) this.props.update(true, 'scrollBottom')\r\n    } else {\r\n      if (this.props.scrollBottom) this.props.update(false, 'scrollBottom')\r\n    }\r\n  }\r\n\r\n  updateFilter(userInput, type) {\r\n    if (debug) console.log('updateFilter()', userInput, type)\r\n    if (this.props.filter[type] === userInput) userInput = ''\r\n    this.props.update(userInput, 'ADD_FILTER_' + type)\r\n  }\r\n\r\n  classifierLevel(row) {\r\n    // const { result, classcolor } = helper.classifierLevel(cellData)\r\n    return <span onClick={() => this.updateFilter(row.chan, 'channel')}>{row.chan}</span>\r\n  }\r\n\r\n  UserNameRenderer = (row) => {\r\n    return <span className='username' onClick={() => this.updateFilter(row.name, 'name')} style={{ color: (row && row.tags && row.tags.color ? row.tags.color : '#EEE') }}>{row.name}</span>\r\n  }\r\n\r\n  decamelize = (text) => {\r\n    return text\r\n      .replace(/([a-z\\d])([A-Z])/g, '$1-$2')\r\n      .replace(/([A-Z]+)([A-Z][a-z\\d]+)/g, '$1-$2')\r\n      .toLowerCase()\r\n  }\r\n\r\n  createBadge = ({ measure, name, badge, tags }) => {\r\n    // console.log('1createBadge', name, badge, tags)\r\n    switch (name) {\r\n      case 'subscriber':\r\n        if (badge.versions[tags.badges.subscriber]) {\r\n          badge = badge.versions[tags.badges.subscriber]\r\n        } else {\r\n          badge = Object.keys(badge.versions)[0]\r\n        }\r\n        break\r\n\r\n      case 'bits':\r\n        if (badge.versions[tags.badges.bits]) {\r\n          badge = badge.versions[tags.badges.bits]\r\n        } else {\r\n          badge = Object.keys(badge.versions)[0]\r\n        }\r\n        break\r\n\r\n      default:\r\n        if (badge.versions['0']) badge = badge.versions['0']\r\n        else if (badge.versions['1']) badge = badge.versions['1']\r\n        else badge = Object.keys(badge.versions)[0]\r\n    }\r\n\r\n    try {\r\n      return <img\r\n        onLoad={measure}\r\n        key={name || ''}\r\n        title={badge.title || ''}\r\n        alt={badge.title || ''}\r\n        aria-label={badge.title || ''}\r\n        className='line'\r\n        src={badge.image_url_1x}\r\n        srcSet={`${badge.image_url_1x} 1x, ${badge.image_url_2x} 2x, ${badge.image_url_4x} 4x`}\r\n      ></img>\r\n    } catch (error) {\r\n      console.warn(error)\r\n      return <img\r\n        onLoad={measure}\r\n        key={name}\r\n        alt={name}\r\n        className='line'\r\n      ></img>\r\n    }\r\n  }\r\n\r\n  createBadgeTags = ({ source, measure }) => {\r\n    let badges = []\r\n    if (source && source.tags && source.tags.badges) {\r\n      for (let name in source.tags.badges) {\r\n        if (source.tags.badges.hasOwnProperty(name)) {\r\n          let element\r\n          name = this.decamelize(name)\r\n          // console.log(name)\r\n\r\n          // https://discuss.dev.twitch.tv/t/how-to-get-emotes-badges-object/18916/2\r\n          if (this.props.badges[source.chan] && this.props.badges[source.chan].has(name)) {\r\n            const badge = this.props.badges[source.chan].get(name) // .versions['0']\r\n            element = this.createBadge({ measure, name, badge, tags: source.tags })\r\n          } else if (this.props.badges.global.has(name)) {\r\n            const badge = this.props.badges.global.get(name) // .versions['1']\r\n            element = this.createBadge({ measure, name, badge, tags: source.tags })\r\n          } else {\r\n            // console.log(this.props.badges.global, name)\r\n            // TODO::twitchcon-na2019 => twitchconNA2019\r\n            element = <span className='line badge badge-primary' key={name} title={name}>{name}</span>\r\n          }\r\n          badges.push(element)\r\n        }\r\n      }\r\n    }\r\n    return badges\r\n  }\r\n\r\n  render() {\r\n    if (debug) console.log('LogContainer RENDER', this.props, '############################################')\r\n\r\n    let scrollButton = ''\r\n    if (!this.props.scrollBottom) { // TODO: nur wenn man auch scrollen kann\r\n      scrollButton = <Button variant='secondary' id='scrollDown' onClick={() => {\r\n        this.bindListRef.current.scrollToRow(this.props.length)\r\n        this.props.update(true, 'scrollBottom')\r\n        refreshCache()\r\n      }}>scroll down</Button>\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div style={{\r\n          height: 'calc(100vh - 60px)',\r\n          fontSize: Number(this.props.settings.get('fontSize')),\r\n          fontFamily: `'${this.props.settings.get('fontClass')}', monospace`\r\n        }} className={'bg-dark text-list'}>\r\n\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n\r\n              <List\r\n                id='list'\r\n                // height={window.innerHeight - 60}\r\n                // width={window.innerWidth - 3}\r\n                height={height}\r\n                width={width - 3}\r\n                overscanColumnCount={0}\r\n                overscanRowCount={10}\r\n                scrollingResetTimeInterval={0}\r\n                ref={this.bindListRef}\r\n                rowCount={this.props.length}\r\n                deferredMeasurementCache={cache}\r\n                onScroll={this.listenScrollEvent}\r\n                rowHeight={cache.rowHeight}\r\n                noRowsRenderer={() => <div><center><i>Nichts gefunden</i></center></div>}\r\n                rowRenderer={({ // https://github.com/bvaughn/react-virtualized/blob/8738097a6ead422f74590d6a631bd5fd83ebc831/docs/List.md#rowrenderer\r\n                  index,       // Index of row\r\n                  // isScrolling, // The List is currently being scrolled\r\n                  // isVisible,   // This row is visible within the List (eg it is not an overscanned row)\r\n                  _key,         // Unique key within array of rendered rows\r\n                  parent,      // Reference to the parent List (instance)\r\n                  style        // Style object to be applied to row (to position it);\r\n                  // This must be passed through to the rendered row element.\r\n                }) => {\r\n                  let key\r\n                  const source = this.props.logs.get(index) // This comes from your list data\r\n                  if (source.tags && source.tags.id) {\r\n                    key = source.tags.id\r\n                  } else {\r\n                    key = _key || index\r\n                  }\r\n\r\n                  const channelStyle = this.props.settings.get('channelColor') && this.props.settings.get('channelColor')[source.chan] ? { backgroundColor: this.props.settings.get('channelColor')[source.chan] } : {}\r\n                  const channel = <><span className='line badge badge-primary' style={channelStyle} onClick={() => this.updateFilter(source.chan, 'channel')}>{source.chan}</span></>\r\n\r\n                  return (\r\n                    <CellMeasurer // https://github.com/bvaughn/react-virtualized/blob/master/docs/CellMeasurer.md\r\n                      cache={cache}\r\n                      columnIndex={0}\r\n                      key={key}\r\n                      parent={parent}\r\n                      rowIndex={index}\r\n                    >\r\n                      {({ measure }) => (\r\n\r\n                        <div\r\n                          key={key}\r\n                          style={{\r\n                            ...style,\r\n                            padding: '.3rem', // '.5rem 2rem',\r\n                            wordWrap: 'break-word',\r\n                            lineHeight: '20px'\r\n                          }}\r\n                        >\r\n                          <span>{FormatDate(source.timestamp, this.state.mobile)}</span>:\r\n                          {channel}\r\n                          {(this.props.settings.get('showBadges') ? this.createBadgeTags({ source, measure }) : '')}\r\n                          <span className='line'>{this.UserNameRenderer(source)}</span>\r\n                          <span className='line'>\r\n                            <ChatLine\r\n                              source={source}\r\n                              detectLinks={this.props.settings.get('detectLinks')}\r\n                              bttvBadges={this.props.settings.get('bttvBadges')}\r\n                              ffzBadges={this.props.settings.get('ffzBadges')}\r\n                              measure={measure}\r\n                              bagdes={this.props.badges}\r\n                            />\r\n                          </span>\r\n                        </div>\r\n                      )}\r\n                    </CellMeasurer>\r\n                  )\r\n\r\n                }}\r\n              />\r\n\r\n            )}\r\n          </AutoSizer>\r\n\r\n          {scrollButton}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  state => ({\r\n    scrollBottom: state.scrollBottom,\r\n    logs: state.logs,\r\n    length: state.length,\r\n    filter: state.filter,\r\n    settings: state.settings,\r\n    badges: state.badges\r\n  }), // mapStateToProps\r\n  { update } // mapDispatchToProps\r\n)(LogContainer)\r\n","import React, { PureComponent } from 'react'\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\n\nimport Collapse from 'react-bootstrap/Collapse'\n\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport Alert from 'react-bootstrap/Alert'\n\nimport { connect } from 'react-redux'\nimport { update } from '../redux'\n\nconst debug = false\n\nclass SettingsModal extends PureComponent {\n  constructor (props, context) {\n    super(props, context)\n\n    this.handleShow = this.handleShow.bind(this)\n    this.handleClose = this.handleClose.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n\n    this.state = {\n      restart: false,\n      temp: '',\n      addChannel: ''\n    }\n  }\n\n  handleShow () {\n    this.props.update(true, 'modalShow')\n  }\n\n  handleClose () {\n    this.props.update(false, 'modalShow')\n  }\n\n  handleChange ({ target }) {\n    this.setState({ addChannel: target.value })\n  }\n\n  render () {\n    if (debug) console.log('SettingsContainer RENDER', this.props, '############################################')\n\n    const channelColor = []\n    this.props.channels.forEach((channel) => {\n      channelColor.push(\n        <InputGroup key={channel.name} className='mb-3'>\n          <InputGroup.Prepend>\n            <InputGroup.Text>{channel.name}</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl\n            key={channel.name}\n            type='color'\n            name={channel.name}\n            defaultValue={this.props.settings.get('channelColor')[channel.name]}\n            onChange={({ target }) => {\n              this.props.update({ [target.name]: target.value }, 'channelColor')\n            }}\n          />\n          <InputGroup.Append>\n            <Button\n              variant='outline-danger'\n              onClick={() => {\n                let channels = this.props.channels\n                const index = channels.indexOf(channel) // https://immutable-js.github.io/immutable-js/docs/#/List/indexOf\n                if (index > -1) {\n                  channels = channels.splice(index, 1) // https://immutable-js.github.io/immutable-js/docs/#/List/slice\n                }\n                this.props.update(channels, 'CHANNELS')\n              }}\n            >X</Button>\n          </InputGroup.Append>\n        </InputGroup>\n      )\n    })\n\n    return (\n      <>\n        <Button variant='outline-secondary' onClick={this.handleShow}>\n          <span role='img' aria-label='Gear'>⚙</span>\n        </Button>\n\n        <Modal\n          size='lg'\n          show={this.props.settings.get('modalShow')}\n          onHide={this.handleClose}\n          scrollable\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Einstellungen</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n\n            <Collapse in={this.state.restart}>\n              <div onClick={() => { window.location.reload() }}>\n                <Alert variant='danger'>\n                  Webseite Aktualisieren notwenig (F5)\n                </Alert>\n              </div>\n            </Collapse>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm='1'>Font</Form.Label>\n              <Col sm='11'>\n                <Form.Control\n                  as='select'\n                  name='fontClass'\n                  value={this.props.settings.get('fontClass')}\n                  onChange={({ target }) => { this.props.update(target.value, 'fontClass') }}\n                >\n                  <option value='Arimo'>Arimo</option>\n                  <option value='Hind'>Hind</option>\n                  <option value='IBM Plex Sans'>IBM Plex Sans</option>\n                  <option value='Montserrat'>Montserrat</option>\n                  <option value='Muli'>Muli</option>\n                  <option value='Nunito Sans'>Nunito Sans</option>\n                  <option value='Gothic A1'>Gothic A1</option>\n                  <option value='Roboto'>Roboto</option>\n                  <option value='Rubik'>Rubik</option>\n                  <option value='Source Sans Pro'>Source Sans Pro</option>\n                  <option value='Poppins'>Poppins</option>\n                  <option value='Open Sans'>Open Sans</option>\n                  <option value='Work Sans'>Work Sans</option>\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <InputGroup className='mb-3'>\n              <InputGroup.Prepend>\n                <InputGroup.Text id='basic-addon1'>Font Size</InputGroup.Text>\n              </InputGroup.Prepend>\n\n              <FormControl\n                type='number'\n                placeholder='Font Size'\n                aria-label='Font Size'\n                name='fontSize'\n                onChange={({ target }) => { this.props.update(target.value, target.name) }}\n                defaultValue={this.props.settings.get('fontSize')}\n                min='6'\n                max='30'\n              />\n              <InputGroup.Append>\n                <InputGroup.Text>px</InputGroup.Text>\n              </InputGroup.Append>\n            </InputGroup>\n\n            <InputGroup className='mb-3'>\n              <InputGroup.Prepend>\n                <InputGroup.Text>Row Height</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                type='number'\n                placeholder='Row Height'\n                aria-label='Row Height'\n                name='rowHeight'\n                onChange={({ target }) => {\n                  this.props.update(target.value, target.name)\n                  this.setState({ restart: true })\n                }}\n                defaultValue={this.props.settings.get('rowHeight')}\n                min='3'\n                max='60'\n              />\n              <InputGroup.Append>\n                <InputGroup.Text>px</InputGroup.Text>\n              </InputGroup.Append>\n            </InputGroup>\n\n            <InputGroup className='mb-3'>\n              <InputGroup.Prepend>\n                <InputGroup.Text>Max Lines</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                type='number'\n                placeholder='Max Lines'\n                aria-label='Max Lines'\n                onChange={({ target }) => {\n                  this.props.update(target.value, target.name)\n                  this.setState({ restart: true })\n                }}\n                name='maxLines'\n                defaultValue={this.props.settings.get('maxLines')}\n                min='1'\n              />\n            </InputGroup>\n\n            <div key='checkbox-detectLinks' className='mb-3'>\n              <Form.Check\n                custom\n                type='checkbox'\n                id='checkbox-detectLinks'\n                label='Erkenne URLs/EMails/IP-Adressen und konvertiere zu einem Link'\n                name='detectLinks'\n                defaultChecked={this.props.settings.get('detectLinks')}\n                onChange={({ target }) => { this.props.update(target.checked, target.name) }}\n              />\n            </div>\n\n            <div key='checkbox-showBadges' className='mb-3'>\n              <Form.Check\n                custom\n                type='checkbox'\n                id='checkbox-showBadges'\n                label='Zeige Badges an Twitch'\n                name='showBadges'\n                defaultChecked={this.props.settings.get('showBadges')}\n                onChange={({ target }) => { this.props.update(target.checked, target.name) }}\n              />\n            </div>\n\n            <div key='checkbox-bttvBadges' className='mb-3'>\n              <Form.Check\n                custom\n                type='checkbox'\n                id='checkbox-bttvBadges'\n                label='Zeige Badges an bttvBadges'\n                name='bttvBadges'\n                defaultChecked={this.props.settings.get('bttvBadges')}\n                onChange={({ target }) => { this.props.update(target.checked, target.name) }}\n              />\n            </div>\n\n            <div key='checkbox-ffzBadges' className='mb-3'>\n              <Form.Check\n                custom\n                type='checkbox'\n                id='checkbox-ffzBadges'\n                label='Zeige Badges an ffzBadges'\n                name='ffzBadges'\n                defaultChecked={this.props.settings.get('ffzBadges')}\n                onChange={({ target }) => { this.props.update(target.checked, target.name) }}\n              />\n            </div>\n\n            {channelColor}\n\n            <InputGroup className='mb-3'>\n              <FormControl // https://reactjs.org/docs/forms.html#controlled-components\n                placeholder='add Channel'\n                aria-label='add Channel'\n                aria-describedby='basic-addon9'\n                // defaultValue={this.temp}\n                value={this.state.addChannel}\n                onChange={this.handleChange}\n\n                // value={this.state.addChannel}\n                // onChange={({ target }) => {\n                //   // this.setState({ addChannel: target.value })\n                //   this.setState({ addChannel: { name: target.value, roomId: undefined } })\n                // }}\n                // TODO: onEnter: () =>\n              />\n              <InputGroup.Append>\n                <Button\n                  variant='outline-success'\n                  onClick={() => {\n                    // const channels = this.props.channels.push({ name: this.state.addChannel.toLowerCase(), roomId: undefined })\n                    this.props.update({ name: this.state.addChannel.toLowerCase(), roomId: undefined }, 'ADD_CHANNEL') // TODO: Gleich mit neue Farbe übergeben\n                    this.setState({ addChannel: '' })\n                  }}\n                >Add</Button>\n              </InputGroup.Append>\n            </InputGroup>\n\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant='secondary' onClick={this.handleClose}>\n              Schliessen\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    settings: state.settings,\n    channels: state.channels\n  }), // mapStateToProps\n  { update } // mapDispatchToProps\n)(SettingsModal)\n","import React, { PureComponent } from 'react'\r\n\r\nimport Navbar from 'react-bootstrap/Navbar'\r\n\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar'\r\n\r\nimport Form from 'react-bootstrap/Form'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\n// import classifierLevel from '../helper/classifierLevel'\r\n// import classifierNumber from '../helper/classifierNumber'\r\n// import LevelColor from '../helper/colors'\r\n\r\nimport SettingsModal from './Settings'\r\nimport { addUrlProps, UrlQueryParamTypes, configureUrlQuery } from 'react-url-query' // https://github.com/pbeshai/react-url-query\r\n\r\nimport { createBrowserHistory } from 'history'\r\n\r\nimport { compose } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { update } from '../redux'\r\n\r\nconst debug = false\r\n\r\nfunction debounce (fn, delay) {\r\n  let timer = null\r\n  return function () {\r\n    let context = this\r\n    let args = arguments\r\n    clearTimeout(timer)\r\n    timer = setTimeout(function () {\r\n      fn.apply(context, args)\r\n    }, delay)\r\n  }\r\n}\r\n\r\nconst history = createBrowserHistory()\r\n\r\nconfigureUrlQuery({\r\n  history,\r\n  addChangeHandlers: true\r\n})\r\n\r\nconst urlPropsQueryConfig = {\r\n  // QueryApp: { type: UrlQueryParamTypes.string, queryParam: 'app' },\r\n  // QueryHostname: { type: UrlQueryParamTypes.string, queryParam: 'hostname' },\r\n  // QueryLvl: { type: UrlQueryParamTypes.string, queryParam: 'lvl' },\r\n  QueryChannel: { type: UrlQueryParamTypes.string, queryParam: 'channel' },\r\n  QueryName: { type: UrlQueryParamTypes.string, queryParam: 'name' },\r\n  QueryMsg: { type: UrlQueryParamTypes.string, queryParam: 'msg' }\r\n}\r\n\r\nclass TopBar extends PureComponent {\r\n  constructor (props) {\r\n    super(props)\r\n    if (debug) console.log('TopBar', props)\r\n\r\n    this.state = {}\r\n    this.timer = {}\r\n    this.updateFilter = this.updateFilter.bind(this)\r\n    // this.updateDebounceFilter = debounce(this.updateDebounceFilter, 150) // https://stackoverflow.com/a/48702173\r\n    this.updateDebounceFilter = debounce(this.updateFilter, 150) // https://stackoverflow.com/a/48702173\r\n\r\n    this.onWheelHandler = this.onWheelHandler.bind(this)\r\n    this.onTouchMoveHandler = this.onTouchMoveHandler.bind(this)\r\n    this.onTouchStartHandler = this.onTouchStartHandler.bind(this)\r\n  }\r\n\r\n  componentDidMount () {\r\n    if (this.props.QueryChannel) this.props.update(this.props.QueryHostname, 'ADD_FILTER_channel')\r\n    if (this.props.QueryName) this.props.update(this.props.QueryApp, 'ADD_FILTER_name')\r\n    if (this.props.QueryMsg) this.props.update(this.props.QueryMsg, 'ADD_FILTER_msg')\r\n    // if (this.props.QueryHostname) this.props.update(this.props.QueryHostname, 'ADD_FILTER_hostname')\r\n    // if (this.props.QueryLvl) {\r\n    //   const lvl = isNaN(this.props.QueryLvl) ? classifierLevel(this.props.QueryLvl.toUpperCase()) : this.props.QueryLvl\r\n    //   this.props.update(lvl, 'ADD_FILTER_level')\r\n    // }\r\n  }\r\n\r\n  updateFilter (userInput, type) {\r\n    this.props.update(userInput, 'ADD_FILTER_' + type)\r\n    switch (type) {\r\n      case 'channel': this.props.onChangeQueryChannel(userInput); break\r\n      case 'name': this.props.onChangeQueryName(userInput); break\r\n      case 'msg': this.props.onChangeQueryMsg(userInput); break\r\n      // case 'hostname': this.props.onChangeQueryHostname(userInput); break\r\n      // case 'level': this.props.onChangeQueryLvl(userInput); break\r\n      default:\r\n    }\r\n  }\r\n\r\n  // updateDebounceFilter (userInput, type) {\r\n  //   this.props.update(userInput, 'ADD_FILTER_' + type)\r\n  //   switch (type) {\r\n  //     case 'name': this.props.onChangeQueryApp(userInput); break\r\n  //     case 'hostname': this.props.onChangeQueryHostname(userInput); break\r\n  //     case 'level': this.props.onChangeQueryLvl(userInput); break\r\n  //     case 'msg': this.props.onChangeQueryMsg(userInput); break\r\n  //     default:\r\n  //   }\r\n  // }\r\n\r\n  updateFilterNext (type, up) {\r\n    if (debug) console.log('updateFilterNext', { type, up })\r\n    switch (type) {\r\n      // case 'hostname':\r\n      //   const HostanameArray = Object.keys(this.props.settings.get('hostnameColor'))\r\n      //   if (HostanameArray.length !== 1) {\r\n      //     const index = HostanameArray.indexOf(this.props.filter.get('hostname'))\r\n      //     let nextIndex\r\n      //     if (up) {\r\n      //       nextIndex = index - 1\r\n      //       if (HostanameArray[nextIndex] === undefined) nextIndex = HostanameArray.length - 1\r\n      //     } else {\r\n      //       nextIndex = index + 1\r\n      //       if (HostanameArray[nextIndex] === undefined) nextIndex = 0\r\n      //     }\r\n      //     this.updateFilter(HostanameArray[nextIndex], type)\r\n      //   }\r\n      //   break\r\n\r\n      case 'channel':\r\n        const ChannelArray = Object.keys(this.props.settings.get('channelColor'))\r\n        console.log({ ChannelArray })\r\n\r\n        if (ChannelArray.length !== 1) {\r\n          const index = ChannelArray.indexOf(this.props.filter.get('channel'))\r\n          let nextIndex\r\n          if (up) {\r\n            nextIndex = index - 1\r\n            if (ChannelArray[nextIndex] === undefined) nextIndex = ChannelArray.length - 1\r\n          } else {\r\n            nextIndex = index + 1\r\n            if (ChannelArray[nextIndex] === undefined) nextIndex = 0\r\n          }\r\n          this.updateFilter(ChannelArray[nextIndex], type)\r\n        }\r\n        break\r\n\r\n      case 'name':\r\n        const AppArray = Object.keys(this.props.settings.get('appColor')) // TODO: das kommt direkt aus der Line\r\n        if (AppArray.length !== 1) {\r\n          const index = AppArray.indexOf(this.props.filter.get('name'))\r\n          let nextIndex\r\n          if (up) {\r\n            nextIndex = index - 1\r\n            if (AppArray[nextIndex] === undefined) nextIndex = AppArray.length - 1\r\n          } else {\r\n            nextIndex = index + 1\r\n            if (AppArray[nextIndex] === undefined) nextIndex = 0\r\n          }\r\n          this.updateFilter(AppArray[nextIndex], type)\r\n        }\r\n        break\r\n\r\n        // case 'level':\r\n        //   let level = this.props.filter.get('level')\r\n        //   if (up) level = level - 1\r\n        //   else level = level + 1\r\n        //   this.updateFilter(level, type)\r\n        //   break\r\n\r\n      default:\r\n        console.warn('updateFilterNext:', type)\r\n    }\r\n  }\r\n\r\n  onWheelHandler ({ deltaY }, type) {\r\n    let up\r\n    if (deltaY > 0) up = false\r\n    else up = true\r\n    this.updateFilterNext(type, up)\r\n  }\r\n\r\n  onTouchMoveHandler ({ touches }, type) {\r\n    if (!this.state.touchReset) {\r\n      const t = touches[0]\r\n      let up\r\n      if (t.pageY - this.state.touchY > 0) up = false\r\n      else up = true\r\n      this.setState({ touchReset: true })\r\n      this.updateFilterNext(type, up)\r\n    }\r\n  }\r\n\r\n  onTouchStartHandler ({ touches }) {\r\n    const t = touches[0]\r\n    this.setState({ touchY: t.pageY, touchReset: false })\r\n  }\r\n\r\n  render () {\r\n    if (debug) console.log('TopbarContainer RENDER', this.props, '############################################')\r\n\r\n    let channel = ''\r\n    if (this.props.filter.get('channel') !== '') {\r\n      const appStyle = this.props.settings.get('channelColor') && this.props.settings.get('channelColor')[this.props.filter.get('channel')] ? { backgroundColor: this.props.settings.get('channelColor')[this.props.filter.get('channel')] } : {}\r\n      channel = <Badge\r\n        variant='secondary'\r\n        ref='app'\r\n        style={{ ...appStyle, margin: '0 5px 5px', touchAction: 'pan-down' }}\r\n        onClick={() => this.updateFilter('', 'channel')}\r\n        onWheel={(e) => this.onWheelHandler(e, 'channel')}\r\n        onTouchMove={(e) => this.onTouchMoveHandler(e, 'channel')}\r\n        onTouchStart={this.onTouchStartHandler}\r\n      >{this.props.filter.get('channel')}</Badge>\r\n\r\n      this.props.onChangeQueryChannel(this.props.filter.get('channel'))\r\n    }\r\n\r\n    let name = ''\r\n    if (this.props.filter.get('name') !== '') {\r\n      const appStyle = this.props.settings.get('appColor') && this.props.settings.get('appColor')[this.props.filter.get('name')] ? { color: this.props.settings.get('appColor')[this.props.filter.get('name')] } : {}\r\n      name = <Badge\r\n        variant='secondary'\r\n        ref='app'\r\n        style={{ ...appStyle, margin: '0 5px 5px', touchAction: 'pan-down' }}\r\n        onClick={() => this.updateFilter('', 'name')}\r\n        onWheel={(e) => this.onWheelHandler(e, 'name')}\r\n        onTouchMove={(e) => this.onTouchMoveHandler(e, 'name')}\r\n        onTouchStart={this.onTouchStartHandler}\r\n      >{this.props.filter.get('name')}</Badge>\r\n\r\n      this.props.onChangeQueryName(this.props.filter.get('name'))\r\n    }\r\n\r\n    // let lvl = ''\r\n    // if (this.props.filter.get('level') !== '') {\r\n    //   const level = classifierNumber(this.props.filter.get('level'))\r\n    //   lvl = <Badge\r\n    //     variant='secondary'\r\n    //     className={'line'}\r\n    //     ref='lvl'\r\n    //     style={{ ...LevelColor[level], margin: '0 5px 5px', touchAction: 'pan-down' }}\r\n    //     onClick={() => this.updateFilter('', 'level')}\r\n    //     onWheel={(e) => this.onWheelHandler(e, 'level')}\r\n    //     onTouchMove={(e) => this.onTouchMoveHandler(e, 'level')}\r\n    //     onTouchStart={this.onTouchStartHandler}\r\n    //     dangerouslySetInnerHTML={{ __html: level }}\r\n    //   />\r\n\r\n    //   this.props.onChangeQueryLvl(level)\r\n    // }\r\n\r\n    // let hostname = ''\r\n    // if (this.props.filter.get('hostname') !== '') {\r\n    //   const hostnameStyle = this.props.settings.get('hostnameColor') && this.props.settings.get('hostnameColor')[this.props.filter.get('hostname')] ? { color: this.props.settings.get('hostnameColor')[this.props.filter.get('hostname')] } : {}\r\n    //   hostname = <Badge\r\n    //     variant='secondary'\r\n    //     ref='hostname'\r\n    //     style={{ ...hostnameStyle, margin: '0 5px 5px', touchAction: 'pan-down' }}\r\n    //     onClick={() => this.updateFilter('', 'hostname')}\r\n    //     onWheel={(e) => this.onWheelHandler(e, 'hostname')}\r\n    //     onTouchMove={(e) => this.onTouchMoveHandler(e, 'hostname')}\r\n    //     onTouchStart={this.onTouchStartHandler}\r\n    //     dangerouslySetInnerHTML={{ __html: this.props.filter.get('hostname') }}\r\n    //   />\r\n\r\n    //   this.props.onChangeQueryHostname(this.props.filter.get('hostname'))\r\n    // }\r\n\r\n    return (\r\n      <Navbar bg='dark' variant='dark' style={{ height: '60px' }} collapseOnSelect>\r\n        <Navbar.Brand>\r\n          <Navbar.Text className='d-lg-none'>\r\n            <img src={require('../TwitchGlitchWhite.svg')} alt='logo' width='30' height='30' className='d-inline-block align-top' />\r\n          </Navbar.Text>\r\n          <Navbar.Text className='d-none d-lg-block'>\r\n            <img src={require('../TwitchGlitchWhite.svg')} alt='logo' width='30' height='30' className='d-inline-block align-top' style={{ marginRight: '5px' }} />\r\n            TwitchChatViewer\r\n          </Navbar.Text>\r\n        </Navbar.Brand>\r\n\r\n        <Navbar.Text>\r\n          <span className='d-lg-none'>{this.props.length}</span>\r\n          <span className='d-none d-lg-block'>{this.props.length} lines</span>\r\n        </Navbar.Text>\r\n\r\n        <Navbar.Collapse className='justify-content-center'>\r\n          <Navbar.Text>\r\n            <ButtonToolbar>\r\n              {channel}\r\n              {/* {hostname} */}\r\n              {name}\r\n              {/* {lvl} */}\r\n            </ButtonToolbar>\r\n          </Navbar.Text>\r\n        </Navbar.Collapse>\r\n\r\n        <Navbar.Collapse className='justify-content-end'>\r\n          <Form\r\n            inline\r\n            onSubmit={e => {\r\n              e.preventDefault()\r\n              this.updateFilter(this.refs.search.value, 'msg')\r\n            }}\r\n          >\r\n            <FormControl\r\n              type='text'\r\n              placeholder='Search'\r\n              className='mr-sm-2 btn-dark'\r\n              ref='search'\r\n              defaultValue={this.props.filter.get('msg')}\r\n              onChange={() => this.updateDebounceFilter(this.refs.search.value, 'msg')}\r\n            />\r\n          </Form>\r\n          <SettingsModal />\r\n        </Navbar.Collapse>\r\n\r\n      </Navbar>\r\n    )\r\n  }\r\n}\r\n\r\nconst enhance = compose(\r\n  connect(\r\n    state => ({\r\n      length: state.length,\r\n      filter: state.filter,\r\n      settings: state.settings\r\n    }), // mapStateToProps\r\n    { update } // mapDispatchToProps\r\n  ),\r\n  addUrlProps({ urlPropsQueryConfig })\r\n)\r\nexport default enhance(TopBar)\r\n","/* globals fetch:true */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","/* globals fetch:true */\r\n\r\nimport { connect } from 'react-redux'\r\nimport { update } from '../redux'\r\n\r\nimport difference from 'lodash.difference'\r\n\r\nlet tempChannels\r\n\r\nexport const _connect = ({ update, badges, channels }) => {\r\n  // console.log('badges_connect', badges, channels)\r\n\r\n  const StoreChannel = channels.toArray().filter(chan => chan.roomId) // filtere undefined roomId raus\r\n\r\n  const ChannelState = tempChannels\r\n  // console.log({ StoreChannel, ChannelState })\r\n\r\n  const _join = difference(StoreChannel, ChannelState)\r\n  if (_join.length) {\r\n    // console.log('badges_connectjoin', _join)\r\n  }\r\n\r\n  const _part = difference(ChannelState, StoreChannel)\r\n  if (_part.length) {\r\n    // console.log('badges_connectpart', _part)\r\n    // https://badges.twitch.tv/v1/badges/channels/gronkh/display\r\n  }\r\n\r\n  if (badges.global.size === 0) {\r\n    fetch('https://badges.twitch.tv/v1/badges/global/display')\r\n      .then(res => {\r\n        if (res.status !== 200) throw new Error(res.status || res.statusText)\r\n        else return res.json()\r\n      })\r\n      .then(res => update({ key: 'global', value: res.badge_sets }, 'UPDATE_BADGES'))\r\n      .catch(err => { console.warn(err) })\r\n      // .then(res => {\r\n      //   update({ key: 'global', value: res.badge_sets }, 'UPDATE_BADGES')\r\n      // })\r\n\r\n    fetch('https://api.betterttv.net/2/emotes')\r\n      .then(res => {\r\n        if (res.status !== 200) throw new Error(res.status || res.statusText)\r\n        else return res.json()\r\n      })\r\n      .then(res => {\r\n        const emotes = {}\r\n        for (let i = 0, len = res.emotes.length; i < len; i++) {\r\n          emotes[res.emotes[i].code] = res.emotes[i]\r\n        }\r\n        update({ key: 'globalbttv', value: emotes }, 'UPDATE_BADGES')\r\n      })\r\n      .catch(err => { console.warn(err) })\r\n\r\n    // https://api.betterttv.net/2/emotes 2.0k\r\n    // https://api.betterttv.net/2/channels/:name 1.6k\r\n\r\n    // https://community.nightdev.com/t/bttv-api-for-tracking-usage-of-own-emotes/20922\r\n    // https://community.nightdev.com/t/is-there-a-bettertwitchtv-api/5223\r\n\r\n    // https://github.com/BatedUrGonnaDie/glitchify/blob/master/app/src/main/java/com/leagueofnewbs/glitchify/Main.java#L427\r\n\r\n    fetch('https://api.frankerfacez.com/v1/set/global')\r\n      .then(res => {\r\n        if (res.status !== 200) throw new Error(res.status || res.statusText)\r\n        else return res.json()\r\n      })\r\n      .then(res => {\r\n        const resEmotes = res.sets[res.default_sets[0]].emoticons\r\n        const emotes = {}\r\n        for (let i = 0, len = resEmotes.length; i < len; i++) {\r\n          emotes[resEmotes[i].name] = resEmotes[i]\r\n        }\r\n        update({ key: 'globalffz', value: emotes }, 'UPDATE_BADGES')\r\n      })\r\n      .catch(err => { console.warn(err) })\r\n  }\r\n\r\n  StoreChannel.forEach(value => {\r\n    if (!badges[value.name]) {\r\n      fetch(`https://badges.twitch.tv/v1/badges/channels/${value.roomId}/display`)\r\n        .then(res => {\r\n          if (res.status !== 200) throw new Error(res.status || res.statusText)\r\n          else return res.json()\r\n        })\r\n        .then(res => {\r\n          update({ key: value.name, value: res.badge_sets }, 'UPDATE_BADGES')\r\n        })\r\n        .catch(err => { console.warn(err) })\r\n    }\r\n\r\n    if (!badges[`${value.name}-bttv`]) {\r\n      fetch(`https://api.betterttv.net/2/channels/${value.name}`)\r\n        .then(res => {\r\n          if (res.status !== 200) throw new Error(res.status || res.statusText)\r\n          else return res.json()\r\n        })\r\n        .then(res => {\r\n          const emotes = {}\r\n          for (let i = 0, len = res.emotes.length; i < len; i++) {\r\n            emotes[res.emotes[i].code] = res.emotes[i]\r\n          }\r\n          update({ key: `${value.name}-bttv`, value: emotes }, 'UPDATE_BADGES')\r\n        })\r\n        .catch(err => {\r\n          if (err.message !== '404') {\r\n            console.warn(err.message)\r\n          }\r\n        })\r\n    }\r\n\r\n    if (!badges[`${value.name}-ffz`]) {\r\n      fetch(`https://api.frankerfacez.com/v1/room/id/${value.roomId}`)\r\n        .then(res => {\r\n          if (res.status !== 200) throw new Error(res.status || res.statusText)\r\n          else return res.json()\r\n        })\r\n        .then(res => {\r\n          if (res.room && res.room.set) {\r\n            if (res.sets[res.room.set] && res.sets[res.room.set].emoticons && res.sets[res.room.set].emoticons.length !== 0) { // das Array könnte auch leer sein\r\n              const resEmotes = res.sets[res.room.set].emoticons\r\n              const emotes = {}\r\n              for (let i = 0, len = resEmotes.length; i < len; i++) {\r\n                emotes[resEmotes[i].name] = resEmotes[i]\r\n              }\r\n              update({ key: `${value.name}-ffz`, value: emotes }, 'UPDATE_BADGES')\r\n            }\r\n          }\r\n        })\r\n        .catch(err => {\r\n          if (err.message !== '404') {\r\n            console.warn(err.message)\r\n          }\r\n        })\r\n    }\r\n  })\r\n\r\n  tempChannels = StoreChannel\r\n  return null\r\n}\r\n\r\nexport default connect(\r\n  state => ({\r\n    channels: state.channels,\r\n    badges: state.badges\r\n  }), // mapStateToProps\r\n  { update } // mapDispatchToProps\r\n)(_connect)\r\n","// import protobuf from 'protobufjs' // https://www.npmjs.com/package/protobufjs\r\n\r\nimport { connect } from 'react-redux'\r\nimport { update } from '../redux'\r\n\r\n// import getRandomColor from '../helper/getRandomColor'\r\n\r\nimport difference from 'lodash.difference'\r\n\r\nimport TwitchJs from 'twitch-js'\r\n\r\n// const formatEmotes = (text, emotes) => {\r\n//   if (emotes === []) return text\r\n//   text = text.split('')\r\n//   for (let i = 0, len = emotes.length; i < len; i++) {\r\n//     // A cookie associated with a cross-site resource at https://jtvnw.net/ was set without the `SameSite` attribute. A future release of Chrome will only deliver cookies with cross-site requests if they are set with `SameSite=None` and `Secure`. You can review cookies in developer tools under Application>Storage>Cookies and see more details at https://www.chromestatus.com/feature/5088147346030592 and https://www.chromestatus.com/feature/5633521622188032.\r\n//     text.splice(emotes[i].start, emotes[i].end, '<img class=\"emoticon\" src=\"//static-cdn.jtvnw.net/emoticons/v1/' + emotes[i].id + '/1.0\">')\r\n//   }\r\n//   return text.join('')\r\n// }\r\n\r\nconst { chat } = new TwitchJs({ token: '', username: `justinfan${Math.floor((Math.random() * 80000) + 1000)}`, chat: { joinTimeout: 60000 }, log: { level: 0 } })\r\n\r\n// // eslint-disable-next-line no-control-regex\r\n// const ACTION = /(\\x01ACTION )(.*)(\\x01)/\r\n\r\nexport const _disconnect = () => {\r\n  chat.disconnect()\r\n}\r\n\r\nconst connected = () => chat._readyState === 3\r\n\r\nexport const _connect = ({ update, channels }) => {\r\n  // console.log('_readyState', chat._readyState)\r\n  // console.log(channels.toArray())\r\n  if (connected()) { // https://github.com/twitch-devs/twitch-js/blob/083d8626c8fdfb19ff147a59f60d487b712be06c/src/Chat/index.js\r\n    const StoreChannel = channels.toArray().map(chan => chan.name)\r\n    const ChannelState = Object.keys(chat._channelState).map(chan => chan.substr(1))\r\n\r\n    const _joins = difference(StoreChannel, ChannelState)\r\n    if (_joins.length) {\r\n      for (const _join of _joins) {\r\n        chat.join(_join).then(data => {\r\n          update({ name: _join, roomId: data.roomState.roomId }, 'ADD_ROOMID')\r\n          update([{ timestamp: +new Date(), chan: _join, msg: '=> JOIN' }], 'ADD_DATA')\r\n        })\r\n      }\r\n    }\r\n\r\n    const _parts = difference(ChannelState, StoreChannel)\r\n    if (_parts.length) {\r\n      // console.log('part', _parts)\r\n      for (const _part of _parts) {\r\n        chat.join(_part).then(() => {\r\n          update([{ timestamp: +new Date(), chan: _part, msg: '<= LEAVE' }], 'ADD_DATA')\r\n        })\r\n      }\r\n    }\r\n  } else if (chat._readyState === 0) {\r\n    chat.connect()\r\n      .then(async () => {\r\n        // console.log('Connect ...')\r\n        // await Promise.all(channels.toArray().map(channel => chat.join(channel.name))).then(data => console.log(data))\r\n        channels.toArray().map(channel => chat.join(channel.name).then(_ => update([{ timestamp: +new Date(), chan: channel.name, msg: '=> JOIN' }], 'ADD_DATA')))\r\n      })\r\n      .catch(err => {\r\n        console.warn(err)\r\n      })\r\n\r\n    chat.on('*', ({ channel, command, message, tags, timestamp, username, _raw }) => {\r\n      timestamp = timestamp || +new Date()\r\n      const chan = channel && channel.substr(1)\r\n      const name = username\r\n      let msg\r\n      switch (command) {\r\n        case 'PRIVMSG':\r\n          // msg = formatEmotes(message, tags.emotes)\r\n          msg = message\r\n          // if (tags.color === null) {\r\n          //   tags.color = getRandomColor()\r\n          // }\r\n          // if (msg.toLowerCase().indexOf('@' + chan) !== -1) {\r\n          //   tags.attention = true\r\n          // }\r\n          // const found = ACTION.exec(msg)\r\n          // if (found !== null) {\r\n          //   msg = found[2]\r\n          //   tags.action = true\r\n          // }\r\n          update([{ timestamp, chan, name, msg, tags }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'USERNOTICE':\r\n          update([{ timestamp, chan, msg: tags.systemMsg }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'CLEARMSG': // https://dev.twitch.tv/docs/irc/tags#clearmsg-twitch-tags\r\n          // Single message removal on a channel. This is triggered via /delete <target-msg-id> on IRC.\r\n          // console.log('CLEARMSG', { channel, msg, tags, timestamp, username })\r\n          update([{ timestamp, chan, msg: `REMOVE ${username}, ${tags.targetMsgId}` }], 'ADD_DATA')\r\n          update({ timestamp, chan, username, tags }, 'EDIT_DATA')\r\n          break\r\n\r\n        case 'CLEARCHAT': // https://dev.twitch.tv/docs/irc/tags#clearchat-twitch-tags\r\n          // Temporary or permanent ban on a channel.\r\n          if (tags.banDuration) { // ban-duration (Optional) Duration of the timeout, in seconds. If omitted, the ban is permanent.\r\n            tags.banMsg = `TIMEOUT: ${username}, ${tags.banDuration + 's' + (tags.banReason ? ', ' + tags.banReason : '')}`\r\n          } else {\r\n            tags.banMsg = `BAN: ${username}, banReason: ${tags.banReason}`\r\n          }\r\n          // console.log('CLEARCHAT', { channel, msg, tags, timestamp, username })\r\n          update([{ timestamp, chan, username: 'twitch.tv', msg: tags.banMsg }], 'ADD_DATA')\r\n          update({ timestamp, chan, username, tags }, 'EDIT_DATA')\r\n          break\r\n\r\n        case 'JOIN':\r\n        //   update([{ timestamp, chan: '-', msg: '=> JOIN' }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'PART':\r\n        //   update([{ timestamp, chan: '-', msg: '<= PART' }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'CONNECTED':\r\n          update([{ timestamp, chan: 'twitch.tv', msg: 'CONNECTED' }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'NOT_READY':\r\n          update([{ timestamp, chan: 'twitch.tv', msg: 'TODO: NOT_READY' }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'CONNECTING':\r\n          update([{ timestamp, chan: 'twitch.tv', msg: 'TODO: CONNECTING' }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'RECONNECTING':\r\n          update([{ timestamp, chan: 'twitch.tv', msg: 'TODO: RECONNECTING' }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'DISCONNECTING':\r\n          update([{ timestamp, chan: 'twitch.tv', msg: 'TODO: DISCONNECTING' }], 'ADD_DATA')\r\n          break\r\n\r\n        case 'DISCONNECTED':\r\n          update([{ timestamp, chan: 'twitch.tv', msg: 'TODO: DISCONNECTED' }], 'ADD_DATA')\r\n          break\r\n\r\n          // \"HOSTTARGET\"\r\n          // { channel: \"#tsm_viss\", command: \"HOSTTARGET\", message: undefined, tags: { … }, timestamp: Sat Nov 02 2019 00: 00: 23 GMT + 0100(Mitteleuropäische Normalzeit), … }\r\n          // channel: \"#tsm_viss\"\r\n          // command: \"HOSTTARGET\"\r\n          // message: undefined\r\n          // tags: { }\r\n          // timestamp: Sat Nov 02 2019 00: 00: 23 GMT + 0100(Mitteleuropäische Normalzeit) { }\r\n          // username: \"halifax\"\r\n\r\n        case 'NOTICE':\r\n          update([{ timestamp, chan: channel, msg: message }], 'ADD_DATA')\r\n          // { channel: \"#tsm_viss\", command: \"NOTICE\", message: \"Now hosting Halifax.\", tags: { … }, timestamp: Sat Nov 02 2019 00: 00: 23 GMT + 0100(Mitteleuropäische Normalzeit), … }\r\n          // channel: \"#tsm_viss\"\r\n          // command: \"NOTICE\"\r\n          // message: \"Now hosting Halifax.\"\r\n          // tags: { msgId: \"host_on\" }\r\n          // timestamp: Sat Nov 02 2019 00: 00: 23 GMT + 0100(Mitteleuropäische Normalzeit) { }\r\n          // username: \"tmi.twitch.tv\"\r\n\r\n          // { channel: \"#eosandy\", command: \"NOTICE\", message: \"Now hosting Shurjoka.\", tags: { … }, timestamp: Tue Nov 05 2019 17: 15: 04 GMT + 0100(Mitteleuropäische Normalzeit), … }\r\n          // channel: \"#eosandy\"\r\n          // command: \"NOTICE\"\r\n          // message: \"Now hosting Shurjoka.\"\r\n          // tags: { msgId: \"host_on\" }\r\n          // timestamp: Tue Nov 05 2019 17: 15: 04 GMT + 0100(Mitteleuropäische Normalzeit) { }\r\n          // username: \"tmi.twitch.tv\"\r\n          // __proto__: Object\r\n          console.log('NOTICE', { channel, command, message, tags, timestamp, username })\r\n          break\r\n\r\n        case '001': ; break\r\n        case '002': ; break\r\n        case '003': ; break\r\n        case '004': ; break\r\n        case '353': ; break\r\n        case '366': ; break\r\n        case '372': ; break\r\n        case '375': ; break\r\n        case '376': ; break\r\n        case 'CAP': ; break\r\n        case 'MODE': ; break\r\n        case 'PING': ; break\r\n        case 'ROOMSTATE': ; break\r\n\r\n        case 'PARSE_ERROR_ENCOUNTERED': ; break\r\n\r\n        default:\r\n          console.log('default', { channel, command, message, tags, timestamp, username })\r\n      }\r\n    })\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport default connect(\r\n  state => ({\r\n    channels: state.channels\r\n  }), // mapStateToProps\r\n  // state => ({ settings: state.settings }), // mapStateToProps\r\n  // state => ({ }), // mapStateToProps\r\n  { update } // mapDispatchToProps\r\n)(_connect)\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Log from './components/Log'\nimport TopBar from './components/TopBar'\nimport * as serviceWorker from './serviceWorker'\n\nimport DataService from './data/twitch'\nimport BadgesService from './data/badges'\nimport { Provider } from 'react-redux'\nimport { store } from './redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <TopBar />\n    <Log />\n    <DataService />\n    <BadgesService />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}